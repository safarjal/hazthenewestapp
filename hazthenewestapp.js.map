{"version":3,"file":"hazthenewestapp.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAyB,gBAAID,IAE7BD,EAAsB,gBAAIC,IAR5B,CASGK,MAAM,WACT,O,0GCi9CmB,MAAX,EAAW,CACG,uB,GAAd,GAAc,E,GAAT,MAAS,E,GAAA,QACS,MAAf,EAAK,GACL,OAAO,QAFf,GAAc,O,CAMA,uB,GAAd,GAAc,E,GAAT,MAAS,E,GAAA,QACN,KAAW,EAAK,IAChB,OAAO,QAFf,GAAc,GAMlB,OAAO,E,oBAglQM,uBAAb,EAAa,IAAR,MAAQ,aACT,EAAY,WAAI,G,KAEpB,OAAO,E,cA7sDS,OAAR,SAAO,EAAC,E,0BA41dhB,O,0BA9NA,EAAO,iBAAO,G,KACd,MAAY,EACI,mB,OAAhB,EAAgB,IAAX,MAAW,K,GAAA,SACN,IAAF,EAAE,GAAQ,IAAG,EAAO,iBAAO,G,QAC3B,EAAQ,GAAK,GAAS,GAEnB,QADI,GAAP,EAAqB,EAAS,GAKtC,OAFI,GAAS,GAAK,EAAQ,IAAO,EAAO,iBAAO,G,MAC/C,EAAO,iBAAO,G,KACP,EAoNA,GAAO,KAAiB,EAAW,EAAQ,EAAS,EAAO,EAAW,GAAW,W,0BCv6mBxF,O,0BAtBA,EAAO,iBAAO,G,KACd,MAAY,EACI,oB,OAAA,mBAAX,MAAW,c,IACN,IAAF,EAAE,GAAQ,IAAG,EAAO,iBAAO,G,QAC3B,EAAQ,GAAK,GAAS,GAEnB,QADI,GAAP,EAAqB,EAAS,GAKtC,OAFI,GAAS,GAAK,EAAQ,IAAO,EAAO,iBAAO,G,MAC/C,EAAO,iBAAO,G,KACP,EAYA,GAAO,KAAiB,EAAW,EAAQ,EAAS,EAAO,EAAW,GAAW,W,8BADrF,oBAA4D,MAA5D,aAAwF,IAAxF,aAAoH,IAApH,cAAqI,GAArI,cAAoK,OAApK,cAA8M,MAA9M,iB,oBAr+DC,OACa,I,SAAA,qB,KACT,E,EAAK,K,WACL,E,EAAK,G,GAAU,MAAc,gBAAK,GAAQ,kBAAW,a,gBAC7C,IAAa,GAA6B,sBAHtD,SAMJ,O,YCppCH,OAJqD,qB,KAClD,E,OAAK,K,KACL,E,OAAK,GAAM,kBAAW,a,eACd,GDqpCgC,CAAjC,IAAa,O,oBAlUhB,O,GACI,qBAAQ,EAAG,OAAY,EAAL,G,ME1+BwC,GA8OsmtB,GC1G6pG,eHw2Bj0zB,O,YI40BA,SAAO,G,eClzDP,MACA,O,EAAiB,O,8CCMd,EDLe,KAAK,QAEvB,GCKE,EDLsC,EAAS,EAAN,GAAiB,M,MD8yDlD,CAAU,GJ50BuC,CAt6Bb,GAs6BsB,GGl7BjE,G,IA0Eo5zB,OH02B35zB,O,YEz2BA,GAAgB,EAAM,MFy2BS,CAx6BmB,GGZ3C,E,cHiuCP,OAAO,GAAU,G,iBAlmCb,iBACA,MAAM,GAAwB,kBAClC,OAAO,gBAAK,G,iBA0MR,iBACA,MAAM,GAAwB,kBAClC,OAAO,gBAAK,O,gBAjHZ,OAAW,GAAS,GAAK,GAAS,MAAW,gBAAI,GAAY,K,0BAtOzD,MACO,kBAAS,G,oBA4OhB,MAAc,OAAO,EAAK,eAAQ,G,IACtC,MAAY,EACC,uCAAR,MAAQ,c,GACT,GAAmB,G,KACf,KAAW,GACX,OAAO,EACX,Q,KAEJ,OAAO,EAnPA,GAAQ,IAAY,E,qBOoEo+sB,GAAK,GA1GhgtB,MAAM,GAAiC,GPk1BxB,2BAAyB,EAAC,wB,GACpC,IAAL,EAAQ,OAAO,K,MACf,O,GACI,GAAK,oBAAM,OAAO,K,GACb,IAAL,EAAQ,OAAO,G,kBAzrBjB,EACF,IAAW,OAAY,EAAL,GAEd,MAAe,kB,IACV,EAAS,eACV,MAAM,GAAwB,wBAClC,OAAO,EAAS,YAmrBM,KAE9B,MAAY,EACZ,EAAW,GAAa,GACX,oB,OAAA,mBAAR,MAAQ,c,GACT,EAAK,WAAI,G,MACH,IAAF,EAAE,KAAS,EACX,QAER,OAAY,GAAL,G,gBOrvBi2f,IP0hBx2f,E,KO1hBw2f,GAAK,GA1Gz2f,MAAM,GAAiC,GPkoBxB,2BAAyB,EAAC,wB,GACpC,IAAL,EAAQ,OAAO,K,MAEf,OACA,MAAiB,oBAAO,EAAxB,E,GACI,GAAc,EACd,OAAO,K,GACO,IAAd,EACA,OAAO,G,kBAvST,EACF,IAAW,OAAY,EAAL,GAEd,MAAe,kB,IACV,EAAS,eACV,MAAM,GAAwB,wB,IAClC,MAAW,EAAS,YACb,EAAS,gBACZ,EAAO,EAAS,YACpB,OAAO,EA8RO,K,GAClB,EAAO,GAAa,G,GAChB,O,MACI,OACc,QAAQ,sB,GAAtB,EAAc,E,GAAT,MAAS,UACV,EAAK,WAAI,gBAAK,I,WADlB,EAAc,Q,QAGD,EQ5oBsslB,yBAAa,GR4oBntlB,mBAAR,MAAQ,cACT,EAAK,WAAI,G,KAEjB,OAAO,QAIX,EAAO,K,IAEX,MAAY,EACC,uCAAR,MAAQ,cACL,GAAS,GAAG,EAAK,WAAI,G,OAAa,IAAF,EAAE,E,MAE1C,OAAY,GAAL,G,oBAykBM,2CAAR,MAAQ,cACT,EAAY,WAAI,G,KAEpB,OAAO,E,oBAcH,OACa,I,SAAA,qB,KACT,E,EAAK,K,WACL,E,EAAK,G,GAAW,MAAc,gBAAI,GAAQ,kBAAW,a,gBACxC,EAAL,GAHZ,SAMJ,OAA4B,GAAhB,EAAL,I,wBAOH,MACY,EAAL,GACJ,IAAa,M,uDSxYpB,OAAW,EAAO,EAAc,EAAkB,E,gBA6ElD,OAAW,EAAO,EAAc,EAAkB,E,qBFn2B04Y,GAAK,GA1G77Y,MAAM,GAAiC,GGsgBxB,2BAAyB,EAAC,wBAC7C,OACS,IAAL,ECpgBmD,K,GDqgBnD,MAA4B,EAAK,eAAK,GAC9B,OAAa,EAAM,G,4DHhaq3c,GAAK,GA1Gr5c,MAAM,GAAiC,GK+gBxB,6BAA2B,EAAC,wBC3P2sM,QAAF,EAAe,UD4PvwM,ONtgB05hB,EOqL9zhB,UAqFypM,EArFnoM,G,qBNrFgkN,GAAK,GA1GnrN,MAAM,GAAiC,GK2SxB,6BAA2B,EAAC,wBCpE3B,QAAF,EAAe,UDqEjC,ONlSwrS,EOkL3mS,UAAU,G,qBNlFgyO,GAAK,GA1Gx3O,MAAM,GAAiC,GKmUxB,6BAA2B,EAAC,wBAC/C,OAAO,IAAkB,EAAZ,SAAS,EAAG,EAAc,I,yDEnSpB,cAEO,c,gBAaP,gBAAqC,eAGhD,kCAAmB,EAAO,cAAkB,mBAC5C,2BAAa,G,oXAtEzB,KACoE,a,iBCyFsB,OAA1C,IAAM,EAAO,aAAmB,GAAF,G,8BfuD9E,IAyHoB,EAzHpB,uBAyHoB,mCAAX,MAAW,c,GejJ4D,GAYqkG,EAZlkG,iBAAO,GfiJ5D,CAAoB,EAAO,E,SACrD,EAAO,KelJoF,OAA7B,E,0GAxHlE,KAkFiC,iBAoCS,mB,2EC9DoE,OAArD,EAAS,OAAO,EAAY,GAAT,GAAuB,K,eAkJ1E,OAAb,EAAK,kBAAO,EAAC,E,qBAtMsB,uD,cA8CA,O,iCAgO9C,OAJuD,qB,KACpD,E,OAAK,K,KACL,E,OAAK,GAAO,gBAAK,I,eACT,G,6EA7OuB,eAA0B,kB,mBCVzD,MAAa,KACG,sCACL,GAAP,EADY,e,KAGhB,OAAO,E,iBAZgH,O,GAA7C,MAAuB,EAAK,kBAAU,E,qBCxBrE,uD,uBCoGrC,EACF,IAAiB,OAAO,mBAAO,G,IAE3B,OAAsB,EACT,uCAAR,MAAQ,cACL,aAAI,KAAO,GAAS,GAC5B,OAAO,E,eChFsD,OAA1B,OAAqB,G,eA9BY,cAAjC,iB,8DT+Y5B,iCACa,eAAT,yBAAS,gB,oBAb5B,iBACA,gBJ/PqrS,aAAS,GA1G1rS,MAAM,GAAiC,GI6WhB,uCAAqC,YAAK,M,gCAnMzC,iBAAT,2BAAS,gB,iBAFpB,mBAAmC,oB,eAiYnC,aAA4B,IAAb,aAAiB,+BAAuB,0BAAqB,GAAR,cACpE,aAA4B,MAAZ,YAAkB,EAAO,E,gCAL1B,oBACE,mB,iBAHY,wBAAuC,qB,0EVriBpC,Y,eAQ8D,OAAnD,EAAS,OAAO,E,YF01TnE,OAAa,U,KACT,E,OAAK,K,KACL,E,OAAK,GAAM,EAAK,I,eACR,IAAa,GAA6B,YE71TyB,CAAT,GAAsB,K,eAiE5F,O,kBF2/HgB,uBAAhB,EAAgB,IAAX,MAAW,aAAqB,MAAX,IAAiB,EAAY,WAAI,G,MAC3D,OAAO,EE5/HS,CAAT,EAAyB,M,qBA9FW,sD,sDA6DsE,OAAjD,EAAT,E,qCoBhCI,WAA3D,WACI,O,yDAAM,CAAgB,EAAiB,GAGA,CAAK,EAAiB,EAAtB,G,GpB4BsD,EAAS,O,sEqB4MqB,gBAAvC,EAAuC,K,qDCpN1G,eACO,sB,kCCgBX,MAAb,GAAqB,mBAAO,EAAU,I,MACtC,gBAA4B,mBAAO,G,MACnC,iBAAmB,mBAAO,G,OAClB,mBAAe,GAAR,I,4BCkJf,SAAQ,GAAO,OAAO,E,IACrB,EAAY,OAAO,EAExB,I,EAAA,EAAqB,GAAL,GAChB,EAAuB,GAAN,G,GAEV,SAAa,G,GAAb,M,SCpN2C,GpBoBizR,EAArlR,WAAuB,coBpBvO,GAAE,EAAd,GpBoB80R,EAAlnR,WAAuB,coBpBvO,G,EDoN5B,SAAwC,GAA1E,S,eEvL2D,O,gCCwF7C,GAAV,MAAa,IACb,MAAM,GAA0B,SAAO,EAAK,kCD/EhD,CAAW,G,KAEX,IAGA,EACA,EACA,EALA,EAAa,EAAK,O,GACJ,IAAV,EAAa,OAAO,KAMxB,MAAgB,KAAK,G,GACjB,qC,GACc,IAAV,EAAa,OAAO,K,GAExB,EAAQ,EAEJ,qBACA,GAAa,EACb,EAAY,oB,KACL,qBAIP,OAAO,KAHP,GAAa,EACb,KAAa,sBAIjB,EAAQ,EACR,GAAa,EACb,KAAa,gBAIjB,OAAuB,GAAM,iBAAa,GAA1C,EAEA,EAAqB,EACrB,EAAa,EACH,I,GAAV,EAAsB,E,GAAjB,MAAK,UACN,MAAY,GAAQ,KAAK,GAAI,G,GAEzB,EAAQ,EAAG,OAAO,K,GAClB,EAAS,G,GACL,IAAkB,EAOlB,OAAO,K,GAJH,GAFJ,EAAiB,EAAQ,EAAzB,GAGI,OAAO,K,IAOnB,OAAU,KAEG,EAAQ,EAAjB,GAAwB,OAAO,KAEnC,IAAU,EAAV,QApBJ,EAAsB,GAuBtB,OAAW,EAAY,EAAvB,GAAoC,EAnEA,GAAoB,I,eE+OG,OAAD,IAAV,M,wBA0gCzB,IAAnB,EAAW,OACX,O,kBAeJ,GAAwB,GAExB,MAAoB,EACpB,EAAgB,KAAQ,EAAW,EAAe,G,IACjC,IAAb,GAA4B,IAAT,EACnB,OAAO,GAAY,GAAL,IAGlB,I,EAAA,EAAgB,EAAQ,EACxB,EAAa,GAAsB,EAAiB,EAAN,EAAmB,IAAS,I,cAz6B0D,EAAV,GAAlC,GA26BzE,EAAU,EAAe,IAApC,EAAO,WAAI,G,KACX,EAAgB,EAAY,EAAU,OAAtC,EAEI,GAAa,EAAO,qBAAQ,EAAQ,EAAvB,GAA0B,QAC3C,EAAY,KAAQ,EAAW,EAAe,UAC5B,IAAb,GAGT,OAn7BoI,EAAV,GAAlC,GAk7B7E,EAAU,EAAe,QAApC,EAAO,WAAI,G,KACJ,EAlCI,GAAM,EAAW,GAAG,WAAY,EAAY,G,Q7B4V5B,E,YUsiC3B,OOrqFmF,SjB+nDxD,C,wB6BxbvB,oBAA4E,GAA5E,cAAqG,GAArG,aAAyH,G,oBAG7H,OAFA,GAAwB,GAEjB,OAAwB,EAAM,EAAY,G,EAAO,E,EAAA,E,EAAA,Y,0DAHpD,Y7BsbmF,GAAkB,EAAlB,EAEvF,EAAoB,EAFmE,IAlI1E,KAAa,KAAwB,KAuErC,EAvEN,EAuEM,mCAAR,I,E6B5R2F,O7B4RnF,eACT,EAAY,WAAI,G,K6B7RpB,O7B8RO,E,iB6B7qC6G,OAAV,GAAjD,KAAY,EAAM,mBAAO,EAAM,0BAAe,EAA9C,I,4BA8YpD,EAAc,GAAO,EAAa,GAAO,GAAkB,GAAL,GAAc,EAA3B,IAAuC,GAAoB,GAAN,GAAe,EAA7B,GACjF,OAAO,EAGG,Q,GAAd,EAAsB,E,GAAjB,MAAS,E,GAAA,SACoB,GAAzB,KAAK,EAAa,EAAlB,GAAgC,KAAM,EAAc,EAApB,GAA4B,GAC7D,OAAO,QAFf,EAAsB,GAItB,OAAO,E,oBA0bC,GAAS,GAxtCG,MAAM,GAGjB,GAqtCc,uCAAqC,I,qBAzK5D,OAAW,GAAc,mB,0BAlIrB,sBAAmH,G,sBACvH,MAAmB,E,cpBvcnB,OAAsB,+BAAgB,EAAM,GAAI,GoB0c5C,CAAW,EAAX,EAAwB,OAA2B,EAAT,EAAuB,IAFjE,GAAW,EAAX,EAAyB,GAAa,EAAT,EAAsB,Q,GAInD,oBAAkB,mB,CACJ,uC,GAAA,EAAd,MAAc,KAAd,GAAc,GAAd,E,GAAK,MAAS,E,GAAA,QACA,GAAN,EAAoB,EAAG,EAAM,EAAa,GAAN,GAAc,GAClD,OAAO,QAFf,IAAc,O,CAKA,uC,GAAA,EAAd,MAAc,KAAd,GAAc,GAAd,E,GAAK,MAAS,E,GAAA,QACA,GAAN,EAAwB,EAAG,EAAM,EAAa,GAAN,GAAc,GACtD,OAAO,QAFf,IAAc,GAKlB,OAAO,EAjBH,cAmIA,GAAQ,EAAQ,EAAY,MAAQ,GAApC,MhBrxBsihC,EApG98gC,QAoG49gC,EAAQ,G,kBgBw2BpjhC,mBAAkB,EAClB,eAAY,EACZ,cAAW,S,UAEP,mBAAQ,GAAO,8BAAF,EAAE,E,EAAA,YAAW,wB,GAAb,E,MAAsB,mBAAwB,GAAN,oBACrD,cAAW,wBAAyB,GAAN,qBAC9B,oBAAkB,M,CAElB,MAAkB,0BAAN,mBAAmB,oB,GAClB,MAAT,EACA,cAAW,wBAAyB,GAAN,qBAC9B,oBAAkB,M,CAEI,QAAjB,EAAiB,EAAjB,kBAAO,EAAU,EAAV,kBACZ,e,EAAW,sB,EAAwB,IpBhazC,gBAA2B,YAClC,KAAS,EAAK,EAAd,IoBgaa,qBAAoB,EAAQ,EAA5B,EACA,mBAAkB,sBAAkC,IAAV,EAAa,EAAO,GAA9D,GAGR,eAAY,E,wCA1BC,qBACmB,wB,mBpB7ExC,EAAe,EAAc,MAAM,GAA0B,kDAAgD,EAAY,yBAAuB,EAAY,K,OAC5J,EAAO,EAAqB,EAC5B,EAAO,EAAqB,EACzB,EoB0EqC,CAAX,2BAAoB,EAAS,GAAN,wBACzB,8CACD,sBACP,gB,qBAXvB,cACA,mBACA,cACA,qB,yBAlPK,GAA4B,IAAd,EAAM,QAAa,mB,CAClC,ICjvBi07B,IjBvKty7B,E,Yd4zFlB,I,SAAA,U,KACT,EAAK,MAAM,GAAwB,mB,KACnC,E,EAAK,EAAK,G,cACF,MAAM,GAA0B,oCAH5C,S8Bp6DqB,CAAN,GhBx5BgB,WgBy5B3B,OvB35BJ,EO0M4F,QAAQ,EAoGspxB,GgBgnBjuxB,QAAX,EAAyB,GAAI,Q,GAA3C,GAAc,E,GAAT,MAAS,UACV,I,EAAA,EAAkB,KAAI,G,O9BuRa,uBA2yWvC,EAAgB,IAAX,MAAW,K,GAAA,IA3yWuB,EA2yWvB,E8BjkXO,GAmiBsp8W,EAniB/o8W,EAAa,G9BikXjB,CAAoB,GAAO,E,SACrD,GAAO,E,G8BlkXO,EACN,OAAO,QAHf,IAAc,GAKd,OAAO,E,eApjBgB,OAAV,GAAL,GAAc,EAAC,E,mBA4wBoB,O,sBAzExC,oBAAuD,GAAvD,cAAgF,G,2BACxE,GAAc,mB,EACrB,KEp+BmiyC,QFo+BrgyC,EAAY,O,KC34Bm+pC,IjBvKl/pC,EA4Si6/B,EA5Sj6/B,W,EPF/B,EO0M4F,QAAQ,EAoGk2/B,GgBqwBt8/B,SADG,UAyEH,GAAQ,EAAR,EAA2B,EAA3B,IAA0C,E,uBAD9B,qBAA4D,GAA5D,U,yGGzlCA,GAVqB,GAUrB,CACc,iCAAY,6BAAtB,KAXiB,G,KAWjB,0DAAiC,MAAM,GAAiB,GAXvC,GAW4C,uC,CAEnD,4BAAa,wBAAvB,KAbiB,G,KAajB,0DAAmC,MAAM,GAAiB,GAbzC,GAa8C,oCACtD,+BAAsB,2BAA/B,KAdiB,G,GAcjB,yDAAoD,MAAM,GAAiB,GAd1D,GAc+D,uBAd/D,S,eAEa,OAAd,gBAAa,G,eAEG,OAAD,IADwB,EAC7C,EADiC,c,qBAkB3B,2BAGI,yCACM,6C,sDA0jBI,O,YAHuD,QAAlE,SAAY,iBAAqB,SAAY,oBAG9C,I,iBAsIjB,I,EAAA,IAAb,OACI,0B,8BACA,8B,gCACQ,GAAoB,MAttBA,GAstBO,GAttB6D,UAstBxF,GAHZ,E,iBAkTJ,OAAW,oB,WAAA,EACP,GAAgB,GAAiC,GAAL,GAAe,EAA3C,O,cASpB,MAAkB,mCAAiE,G,OACtE,EAAD,kBAAR,iDAAsB,IAAtB,EACO,GAAgB,GAA4B,EAAM,EAAlC,OAGhB,G,mBvBgCP,sBAAe,GAAf,EAA6B,MAAM,GAA0B,kDAAgD,EAAY,yBAAuB,EAAY,K,OAC5J,sBAAO,GAAP,EAA4B,EAC5B,sBAAO,GAAP,EAA4B,EACzB,EuBnC4B,CADlB,GAAoB,EAAM,EAA1B,MACkB,8CAZtB,CAAT,MAAoB,G,eAmXyD,OAAlC,GChoCmptD,gBAAiB,GAzM/ptD,6B,eDw0CoB,OAA3B,GAAS,gBAAgB,I,iBEx4CtE,cACA,e,2ICU0E,cAAjB,aACzB,qBACD,cAAI,WAAO,EAAG,GAAS,EAAU,GAAS,EACjD,WAAI,cAAS,EAAW,mB,kFCoCpD,KAQoB,IAAR,EAAW,MAAa,GAA0B,0B,GAClD,IAAY,gBAAW,MAAa,GAA0B,0EAM9C,gBAKD,cAA0B,EAAO,EAAc,GAK/C,e,oCblCU,mBAAS,EAAG,G,wDAxBjD,KAAuD,aAAe,EAAO,EAAc,G,wFcEvF,EAAO,E,EAAS,GAAS,EAAK,EAAS,EAAM,GAAiB,EAAK,EAAO,GAA7B,M,MAC7C,EAAO,GACC,MAAa,GAA0B,iB,EAD/B,GAAS,EAAK,EAAS,EAAM,GAAiB,EAAO,EAAxB,GAA8B,GAA9B,EAEhD,S,mBA5BG,OAAO,GAAI,GAAI,EAAG,GAAK,GAAI,EAAG,GAAvB,EAA2B,G,iBAXlC,MAAU,EAAI,EACd,OAAW,GAAO,EAAG,EAAS,EAAM,EAApC,E,qBCsDqB,4BAGA,2BAGE,mBAGD,mB,qEpCRuC,OcgDxC,K,EdhDgC,KcgDxC,OAAW,KAAiB,GAAU,OAAkB,GAAsB,I,qBd3BlC,OAAlB,GAAU,K,eAoJjD,OAHI,EAAQ,G,WcuOoB,MAAM,GAAqB,gCdtOvD,GAEG,E,eA5MP,YAA8C,IIG9C,EJHkC,QIId,EAAuB,UAGlC,GACF,G,oBJuIH,EAAK,mBAAQ,EAAG,YAEpB,MAAY,GAAY,I,iBG/JpB,MACA,M,kBAAiB,U,oDAAA,ICGsD,EDFrD,KAAK,QAEvB,GCEyB,EDFe,EAAS,EAAN,GAAiB,GH4JhE,CAAc,EAAO,GAEX,QAAc,EAAN,EAAM,O,GAAxB,EAAU,E,GAAL,MAAK,UACN,gBAAK,EAAK,EAAM,I,WADpB,EAAU,G,uBA5IV,EqCrB2C,GrCsB3C,EAAe,EAAW,gBACnB,EAAS,gBIO0C,EJNpC,KAAK,EAAS,aACpC,OAAO,E,csC9BgF,a,eC8GpE,gBAEO,gBAKD,gB,iBAsBX,gBAAqC,gBAG9B,kCAAmB,EAAO,cAAyB,mBAChE,2BAAa,G,cAzI4D,cACnD,iB,uDCMQ,YAGb,e,cAqB6C,c,gCAezC,c,cA5CsD,cAwC/C,mBA+CS,qB,cChGmC,c,mDJM7B,EAAR,GKGb,UAAK,G,8DLHgB,EAAR,GKSO,UAAK,G,2D1CD4B,EAAjB,GAQpD,G0CFuC,UAAc,G,mDAkIlE,OADgB,iCAAkB,EAAO,qBzCfgC,E,eyCnIe,cAAlC,cACrB,oB,iBvC0BP,MAA3B,EFQ8B,OER9B,E,KACA,GAA4B,EAE5B,MCGyJ,GDA3I,I,GAAd,EAAsB,I,GAAjB,MAAS,UCA2V,EDA5T,KAAK,SAAlD,EAAsB,KACtB,I,EAAA,G,EAAiB,O,+CCD2b,EDE1b,KAAK,GACT,QAAc,EAAN,EAAM,O,GAA5B,EAAc,E,GAAT,MAAS,UACV,MAAQ,EAAM,EAAQ,EAAd,GACR,EAAQ,EAAM,G,IACH,EAAN,KAAmB,EAAN,IAAY,GAAK,EAAG,OAAO,QAHjD,EAAc,GAMd,OADA,GAA4B,GACrB,E,yB0BkBU,EAAN,EAAM,O1BZjB,EAAa,GAAU,E0BjCwC,GAAiB,MAAU,GAAO,M1BiC3D,EAAO,EAAc,G,GACvD,IAAW,EAAX,CACU,Q,GAAV,GAAiB,E,GAAZ,MAAK,UAAqB,EAAM,GAAK,EAAO,SAAjD,IAAiB,I,0BAMjB,IAAS,EACT,OAAO,EAGX,OAAc,EAAQ,EAAT,GAAgB,EAA7B,EACA,EAAW,GAAU,EAAO,EAAQ,EAAO,EAAQ,GACnD,EAAY,GAAU,EAAO,EAAQ,EAAS,EAAlC,EAAqC,EAAK,GAEtD,EAAiB,IAAS,EAAQ,EAAW,EAG7C,EAAgB,EAChB,EAAiB,EAAS,EAA1B,EACU,I,GAAV,GAAiB,E,GAAZ,MAAK,E,GAAA,QAEF,GAAa,GAAU,GAAc,EAAd,CACnB,MAAgB,EAAK,GACrB,EAAiB,EAAM,GAEnB,EAAW,QAAQ,EAAW,IAAe,GAC7C,EAAO,GAAK,EACZ,Q,OAEA,EAAO,GAAK,EACZ,Q,WAGR,GAAa,GACT,EAAO,GAAK,EAAK,GACjB,Q,OAGA,EAAO,GAAK,EAAM,GAClB,Q,iBApBZ,IAAiB,GA0BjB,OAAO,E,oHwCtFO,gBAAiB,c,oCA8BwB,WAAvD,WACI,eAAmB,EACnB,YAAgB,EAAY,sBAMT,CAAK,Q,oBAAL,G,6EAUuC,QtCoBnC,GAAmB,GAtD1C,MAAM,GAAiC,GsCoCN,8BAA4B,I,KtCqBrE,GACQ,GA1DA,MAAM,GAAiC,GsCqCX,6BAA2B,I,uBAsBQ,oB,wBxBzCzB,WAA1C,WACI,OAAW,E,wCyBoDQ,KAAsB,cAAS,sBAAY,I,GAA3C,QAAoD,OAAO,KAA9E,MAAmB,E,GACf,eASA,OAAa,GAD0B,EAC1B,EAAiB,GAR9B,MAAgC,E,OAC5B,cAAS,iBAAO,EAAM,iBAAK,GACpB,EAEA,K,gC/CyCR,uBA+lCX,EAAgB,IAAX,MAAW,K,GAAA,IA/lCL,EA+lCK,E+C/nCW,cAAS,iBAmE0z/B,EAnE7y/B,iBAAK,G/C+nC5B,CAAoB,EAAO,E,SACrD,EAAO,K+ChoCqD,OAAxD,E,iBA8DA,MAAmB,cAAW,GAC9B,YAA4B,IAAjB,EAA4B,KAAU,E,gCA1DjC,eAE2B,WAAb,OAAa,KAAK,4BAC7B,kBAEa,wBACd,iBACE,mBACqB,qB,eA9GR,mBAEH,yCACT,a,8BCgBP,gBAE4B,kBAGA,kBAGlC,aAAO,6B,mBApBL,gBAA2C,aAAqC,EAAK,GACxD,kBACA,gB,eAQ7B,gBAAiB,c,iBAqGvB,EAAK,UAAS,EAEd,QAAO,MAEH,UAAS,IAET,QAAO,WAEP,GAAJ,iBAAc,QACV,GAAJ,iBAAc,WAElB,UAAO,KACP,QAAO,K,qBAeY,G,+BAAvB,WACI,SAAM,K,uDAgBoD,GAAM,EAAiB,EAAvB,GAA9D,WACI,SAAM,K,+EAQiC,MAA3C,WACI,SAAM,KACN,EAAK,iBAAO,G,gDArFsB,gBAoDJ,sB,mDC/IX,GAAM,KAAN,GAAvB,W,gDAiB8D,GAAM,GAAsB,EAAiB,GAA7C,GAA9D,WAE2C,CAAK,EAAiB,EAAtB,G,sHClBU,cAA7B,qB,cAwCgB,c,cAdP,cACpB,gB,eAgDb,EAAO,kBAAQ,G,eC7ElB,OAPmD,U,oCAAS,c,8BCUnB,OAA7B,aAAuB,GAAvB,EAAuB,0B,8BCfhC,e,mBA+BA,aAAc,GAFd,wBACA,2B,qBAcgC,aAAoB,QAClB,2B,qEA1ByB,aAAc,G,M9CJzB,EAAnB,EAAmB,WAAyB,EAAX,MAAd,EAAc,KAAd,EAAc,W8CKiB,qB,wV9CnB9C,O+CClB,wBAA8D,O,EAAM,O,kD/CI3E,O+CDU,2BAAiE,S,iBAAS,O,iDAAA,IAGzE,wB,M/CEmF,Q+CCnF,4BAAmE,U,iBAAU,O,iDAAA,I,M/CIvD,O+CDzB,yBAA+D,O,iBAAO,O,iDAAA,I,M/CK7D,O+CFR,0BAAgE,Q,iBAAQ,O,iDAAA,I,M/CM9D,O+CHZ,wBAA8D,M,iBAAM,O,iDAAA,I,M/CQ7D,O+CLL,0BAAgE,Q,iBAAQ,O,iDAAA,I,M/CWrF,O+CRc,2BAAiE,S,iBAAS,O,iDAAA,I,M/CWE,M+CR7E,0BAAkE,Q,iBAAQ,O,iDAAA,I,M/CQmJ,O+CL5N,2BAAiE,S,iBAAS,O,iDAAA,I,M/CKsS,M+CF7W,8BAAmE,Y,iBAAY,O,iDAAA,I,M/CEgc,M+CC5gB,iCAAsE,e,iBAAe,O,iDAAA,I,M/CD4lB,Y+CIprB,8BAAyE,Y,iBAAY,O,iDAAA,I,M/CJiwB,U+COt1B,8BAAuE,Y,iBAAY,O,iDAAA,I,M/CPq6B,W+CUv/B,+BAAyE,a,iBAAa,O,iDAAA,I,M/CVmkC,W+Ca3pC,6BAAuE,W,iBAAW,O,iDAAA,I,M/CbuuC,M+CgBxzC,8BAAmE,Y,iBAAY,O,iDAAA,I,M/ChBu4C,a+CmBr9C,+BAA2E,a,iBAAa,O,iDAAA,I,M/CnBuiD,a+CsB9nD,gCAA4E,c,iBAAc,O,iDAAA,I,eCzDjH,OAAW,MAAY,QAAQ,G,YAQwD,I,SAAT,EAAS,Q,KACvF,E,EAAK,GAAW,EAAS,I,WACzB,E,EhDCY,K,gBAEH,OgDDZ,SAXO,ChDGH,GgDDG,GhDEyC,G,kBgD6CzC,IAAW,OAAc,O,mBhDfusC,agDiBpuC,I,EAAA,EhDjB4xC,EgDiB1vC,W,GAEX,MAAZ,EAAY,C,SACQ,MAAvB,EAAS,SAAc,CACvB,MAAa,OAAiB,GAC9B,WAAsB,E,EACtB,O,EAEA,EAAS,S,EANY,O,EASzB,OAAiB,GATrB,S,qCChDoC,G,6DAOb,UAAK,I,sEAEC,kBAAgB,IAAZ,EAAuB,EAAa,G,mB7BqCrE,EpBjBunC,EAAqtB,WAAuB,coBkBn2D,OAAW,EAAU,OAAS,EAAG,EAAU,KAAU,G,eA6LU,O,kB8B5O/D,OAAa,IC8BoC,EApChB,EAoCS,eD/B5B,GACO,IACJ,IAFH,MAEW,IACR,MAHH,KAIE,OACE,OALJ,GAMO,MANP,MAMe,MACR,OAPP,GAQO,OARP,GASO,OATP,GAUO,OAVP,GAWO,QAXP,G9B6O+B,I,uBEvMT,MAAwC,OAAxC,Q,YDmJiB,MAAM,GAAuB,2BAAyB,EAAK,KCnJ3D,CAAkB,G,EAAnC,EAAwC,E,qB8BR5E,EACA,EACA,EvD4G0/B,EAAW,sCAAe,qCAAe,8BAAe,sCAAe,qCAAe,8BAAa,GAAnG,EAA0G,sCAAe,sCAAe,8BAAa,GAArJ,EAA4J,sCAAmB,EAAO,yCAAoB,wCAAoB,iCAAkB,GAAhP,EAA0R,yCAAoB,wCAAoB,iCAAkB,GAApV,GuD9G1/B,EvD8G83C,EsD7Gp1C,aCA1C,E,kBAvBA,MAAa,EACb,EAAU,EAAM,OAAO,EAAvB,EACA,GAAa,EACb,EAAY,EACL,GAAU,G,GAGT,GADJ,EAAQ,EADR,GAAU,EAAS,EAAV,GAAiB,EAA1B,IAGI,EAAS,EAAS,EAAlB,M,IACK,IAAU,EACf,OAAO,EAEP,EAAM,EAAS,EAAf,EAER,OAAO,GAAc,EAAS,EAAO,EAAO,GAA5C,EASY,CAAwB,iBAAY,IAChD,EAAW,EAAW,iBAAW,GAAjC,GACkB,GAAI,GAAU,G9B4GC,OA7E0C,GA6E7D,GAAO,EA7EsD,E,2C+B7B9B,UAAK,EAAS,M,uDA2Q3B,+BAAU,wBAAwB,KAC9B,mCAAU,UAAW,KAGf,yCAAU,MAAQ,K,wLArRhE,KAUwC,gBAEkB,gBAAR,GACV,+BAAO,EArCsB,EAqCb,EArC0B,GAqCT,KArCJ,a,EAAmC,O,2CAAnC,KAsCtB,+BAIO,sC,oCA0QlD,YAAiB,EACjB,MAAY,OAAK,G,OACJ,MAAT,EAAsB,KAGnB,OAFK,KAAM,MAAO,YAAY,EAAzB,GAEL,O,eAjTyB,gB,mBAsXhC,MAAY,EAAa,EAAzB,EACA,EAAiB,KAAK,GAAL,4B,mBAGV,EAAQ,UAAU,WAAK,G,EAAL,kC,GAAA,E,cACrB,MAAqB,KAAa,IAAO,KAAK,GAAL,4BAAzC,E,KACqB,GAAjB,KAAyB,GAIzB,QAHA,EAAa,EACb,Q,KAKR,OAAO,E,6EA7EwE,a,gCAYvC,c,2FAhBL,yBAIa,oCAOF,wB,yB7B1LpC,qBAA6E,G,sBjBNlE,aAAa,sBAAO,GAAe,EAAa,MACrE,MAAY,yCAAwB,GiBMmF,OxBnH45I,EOqMl7I,QAAQ,EAAS,GiBnFxG,U,uBA9IA,qBAA4D,G,uBACjE,EAGM,KAAc,EAAG,EAAQ,EAAG,EAAO,OAAQ,GxBCrD,EOmMwF,WAhMnF,EAAQ,GiBRJ,Q,yBA0E2D,OAArE,KAAkB,EAAY,EAAO,EAAa,EAAQ,G,+D8BhF9C,G,wBAIC,K,2BAIA,K,sBAIL,K,sBAIA,M,iBAIF,O,gBAID,Q,qCA5B6B,c,mBAqDlC,I,EAAA,EAA2C,GAAjB,EAAW,OAAgB,EAAW,Q,GAE5D,EAAsB,GAClB,I,EAAA,EAAkD,GAArC,EAAW,OAAQ,EAAW,QAC3C,EAAa,kBAAQ,GAEjB,gBAAS,GAAT,OAAkB,G,EAAS,EAC3B,sC,wEAIR,EAAsB,EAAK,gBAA8C,GAArC,EAAW,OAAQ,EAAW,SAC1D,EAXZ,S,mBAXA,MAA2C,GAAjB,EAAW,OAAgB,EAAW,QAChE,OACI,EAAsB,EAAK,kBAA8C,GAArC,EAAW,OAAQ,EAAW,SAClE,EAAsB,EAAK,gBAA8C,GAArC,EAAW,OAAQ,EAAW,SAC1D,E,+EnC4C2B,4BAMA,gCAKS,uCAKA,uCAKD,sCAKA,sCAKJ,kCAKA,kCAMJ,qBAMD,qB,wDAvI1C,K,MoC6Q4D,EAAN,MAtQ7C,EpCHyB,gB,4OqCRD,aAAkB,gB,e/BOd,I,EAAM,MAAN,EAAM,QAAN,GAA0B,OAA1B,QAAqB,OAArB,E,iBgCFvB,QAAG,IAAM,OAAO,EAAb,E,GAAb,GAAU,E,GAAL,MAAK,UACN,EAAM,GAAK,QADf,IAAU,GAGV,OAAO,E,mBC+Bc,E1DDnB,E0DCmB,QDTqG,OCgB1H,SARqB,YASd,E,8BDVK,gB,sBzDC4S,GAAY,EAAK,K2DSxR,EAClC,GAAJ,IAGX,GAAW,GAAK,EACT,MAAS,IAAa,IAAK,GAAS,IAA3C,G,0BCjDW,GAAS,GAAT,C,MTD2D,EnDC1E,EAES,WAAW,G,QmDOZ,EAAY,UA2B0B,a,GA3BtC,G,OAA8B,EAAY,cA2BJ,c,EA1BtC,MAAM,GAA0B,sBAAoB,G,cUOW,OAA/B,O,YAZuE,OCjB/G,YACE,OAAO,GAAK,IAAM,G,IP4XmC,CAxVlD,GAGH,KJhBc,CAAL,Q,ESTH,gBAAE,GAHN,S,eA4BgD,uBAAX,E,eAlBrC,OAAW,GAAS,G5DLwD,EAG9E,O4DKM,EAAE,oB,mBAON,OAAW,GAAS,G5DPU,EAAc,UAAU,EAAY,G4DU9D,EAAE,sBAAY,EAAY,G,eG1B+D,O,EAAnD,E,EAAoB,K,EAAM,I,EAAK,I,EAAzB,E,EAAA,K,EAA6B,O,4CtEgstB1E,O,EsEhstB6C,OtEgstB7C,EAA6D,MAA7D,aAAyF,IAAzF,aAAqH,IAArH,cAAsI,GAAtI,cAAqK,OAArK,cAA+M,MAA/M,iB,sDuE/rtBqD,I,gBAAS,G,IAChE,S,EACmB,iBAAP,EACL,GAAgB,EAAG,GACvB,gBACI,GAAgB,EAAG,EAAE,iBAErB,GAAmB,EAAG,G,UAG7B,S,IAAU,U,EAAY,GAAmB,EAAG,G,8BAO/B,OAAd,EAAE,iBAAU,GALJ,CAA2B,EAAG,GACzC,S,0BAeO,EAAI,E,GAAK,O,GACT,EAAI,E,EAAK,O,GAET,IAAM,G,SACQ,IAAN,E,EACA,M,KAEA,EhEZX,EgEYoC,E,EACrB,IhEZJ,EgEY2B,EACvB,EACO,EAAK,GACZ,EAEA,E,WAKZ,GAAM,EACE,GAAM,EAAG,EAAO,GAEhB,EACX,S,iBA1BA,OAHG,EAAI,GAAK,EACT,EAAI,EAAK,EACD,E,mBFjChB,cACE,OAAO,KAAY,E,CGuD8B,uBAGL,GAArC,CACD,MAAW,GALU,WAKE,KAAW,SAAqB,GACvD,EAAiB,IH7DrB,OG8DI,QAAmB,EACnB,cAAwB,EACxB,OAAa,eAAe,EARe,uBAQsB,GAErE,OjEnBiqB,uB,eiEbpqB,OAJQ,MAAL,EAAc,O,YC0FmD,QAAjE,GAAU,IlEzEq0D,YAAkB,OAAO,GiEhBx2D,CAAW,GAAO,QjEN8B,EAAE,W,kBiEkBvC,MAAP,EACA,OAAO,EAEE,I,gBAAS,G,IACjB,S,EAAgB,mBAAuB,EAAI,SAAY,EAAI,WAAiB,GAAkB,G,UAC9F,W,EAAa,GAAkB,G,UAC/B,S,EAAW,GAAkB,G,UAC7B,U,EjEzBgE,EiEyBtB,EAAO,E,gBAC1C,GAAkB,OAAa,IAL3C,S,eAwBA,MAAW,EAED,IAAG,EADK,EAAI,OACF,EAAP,E,GAAb,GAAU,E,GAAL,MAAK,UACN,MjE1Bo5B,EiE0Bp3B,WAAW,GAC3C,EAAO,KAAO,IAAK,EAAnB,QAFJ,IAAU,GAIV,OAAO,E,wBApEK,MAAR,EACe,MAAR,EAEC,MAAR,IAImB,iBAAV,GAA+C,mBAAjB,EAAK,OACpC,EAAK,OAAQ,GAGrB,GAAS,EACF,GAAS,EAGG,iBAAV,GAAwC,iBAAV,EAChC,IAAS,IAAkB,IAAT,GjEJuB,EiEIO,GjEJkB,EiEIO,GAE7E,IAAS,G,iBAwDqB,MAAjC,MAAY,kBACZ,MAAY,kBAAkB,EAAU,GjEpCiuC,EiEsCzwC,OAA+C,IHrFnD,OGqFmD,M,mBAenD,MAAY,KAAK,G,oBAKZ,GAAwB,EAAQ,WAAhC,C,SAE8B,MAAX,EAAW,C,SAEX,OAAZ,GAEA,I,EAAO,MAAP,EAAO,KAAP,EAAO,W,EAAP,aAAqB,EAArB,O,OAGA,E,WAED,EATP,YAWC,GAAwB,EAAQ,WACjC,QAAc,GAElB,OAAa,OAAS,eAAe,GAAO,YAAY,KApBxD,CAAiC,EAAO,EAAS,G,iBA9DjD,OjERsC,OAAS,eAElD,GAAG,eAAe,G,qBmEA6D,OAAxB,MAAL,E,WAP/C,MAAM,KAOoD,G,EAAiB,EAAC,E,cAX5E,MAAM,K,sBxCDiC,wCAKA,wCAMA,qBAMD,qB,0DA1B1C,KAGI,cAFA,YACA,a,oByC4EI,KAAW,GACX,OAAO,EAGX,MAAc,MACd,EAAqB,GAAN,GAEf,OACI,IAAY,GAAY,GACvB,GAAW,EAAY,EAER,GAAhB,KAAS,KAAuB,EACxB,E,iBAOZ,MAAU,UAAU,GACpB,EAAmB,MAAT,QACV,EAAU,SAAS,GACnB,EAAkB,MAAR,OAEV,EAAU,EAAM,QAAU,GAC1B,EAAyB,MAAf,EAAM,MAChB,EAAU,EAAM,OAAS,GAGzB,EAAU,EACV,EAAU,EACV,EAAU,EACV,EAAU,EAYV,OAFA,GAFA,MADA,GAFA,MADA,GAFA,MADA,KAAO,GANiB,MAAd,EAAM,MAMhB,QACgB,IAAhB,IAEO,EAAM,EAAb,QACgB,IAAhB,IAEO,EAAM,EAAb,QACgB,IAAhB,IAEO,EAAM,EAAb,KAEO,QANP,GAAc,QAMO,IATrB,GAAc,QAQd,GAAc,QAC4B,IAH1C,GAAc,Q,iBAM+C,OAAvB,KAAI,EAAM,mB,oBAG5C,MACA,OAAO,G,GACM,GAAN,GACP,OAAO,G,GAGP,KAAW,IACX,OAAiB,GAAN,GAAe,GAAe,G,GAC5B,GAAN,EAAiB,IACxB,OAAW,MAAS,GAAe,G,GAGnC,MACA,OAAiB,GAAN,GACE,GAAT,MAAwB,GAAN,IAEO,GAAhB,GAAT,MAAkB,I,GAET,GAAN,GACP,OAAgC,GAAzB,KAAe,GAAN,K,GAIhB,KAAS,KAAsB,GAAN,EAAe,IACxC,OAAO,GAAW,MAAmB,GAAN,IAMnC,MAAU,UAAU,GACpB,EAAmB,MAAT,QACV,EAAU,SAAS,GACnB,EAAkB,MAAR,OAEV,EAAU,EAAM,QAAU,GAC1B,EAAyB,MAAf,EAAM,MAChB,EAAU,EAAM,OAAS,GACzB,EAAwB,MAAd,EAAM,KAEhB,EAAU,EACV,EAAU,EACV,EAAU,EACV,EAAU,EAqBV,OAnBA,MADA,IAAO,KAAM,GAAb,KACgB,IAAhB,EACA,GAAc,MAKd,GAHA,MADA,IAAO,KAAM,GAAb,KACgB,IAAhB,KAEA,GADA,GAAc,OACP,KAAM,GAAb,KACgB,IAAhB,EACA,GAAc,MAQd,GAHA,GAHA,MADA,IAAO,KAAM,GAAb,KACgB,IAAhB,KAEA,GADA,GAAc,OACP,KAAM,GAAb,KACgB,IAAhB,KAEA,GADA,GAAc,OACP,KAAM,GAAb,KACgB,IAAhB,EACA,GAAc,MACd,OAAO,KAAM,GAAM,KAAM,GAAlB,GAAwB,KAAM,GAA9B,GAAoC,KAAM,GAAjD,KAEO,OAAK,GAAQ,GAAM,GAD1B,GAAc,QACyB,GAAM,G,iBAmF7C,MAC0B,GAAZ,E,OACC,IAAX,EACO,EAEH,EAAU,GACH,OAAK,QAAQ,EAAU,SAAS,EAAa,UAAU,GAAK,EAAf,IAE7C,OAAK,EAAG,SAAS,EAAU,GAAnB,I,iBAMvB,MAC0B,GAAZ,E,OACC,IAAX,EACO,EAEH,EAAU,GACH,OAAM,SAAS,EAAa,UAAU,GAAK,EAAf,GAA0B,SAAS,GAE/D,OAAK,UAAU,EAAU,GAApB,GAA6B,SAAQ,EAAG,GAAO,G,eAlSK,OA4VxC,WA5VL,Q,YAEiE,OAAnD,QAAO,EAAG,OA0VnB,WA1VyD,OAFrC,I,iBA4D0B,OAAtC,UAAQ,EAAM,OAAQ,SAAO,EAAM,K,oBArDvE,EAAQ,GAAK,GAAK,EAClB,MAAM,GAAW,uBAAqB,G,GAGtC,MACA,MAAQ,I,GAGR,O,GACI,KAAW,IAAX,CAGA,MAAgB,GAAQ,GACxB,EAAU,gBAAI,GACd,EAAkC,GAApB,GAAJ,EAAa,GAAoB,GAAM,aAEjD,OAAW,GAAJ,EAAiB,GpEKgL,EAAgB,SAAS,GoEHjO,MAAQ,IAAY,GAAT,MAAsB,G,IAMzC,MAAmB,GAAW,KAAO,IAAI,EAAkB,IAE3D,EAAU,EACV,EAAa,KACN,CACH,MAAa,EAAI,cAAI,GAErB,EADiB,GAAJ,EAAoB,GAAP,EAAgB,IAAe,apET4rB,SAAS,G,GoEatvB,GADR,EAAM,GAEF,OAAO,EAAS,E,KAET,EAAO,OAAS,GACnB,EAAU,IAAK,EAEnB,EAAS,EAAS,G,eA8Q0C,OAArC,OAAK,EAAW,EAAQ,GAAG,EAAQ,G,eArQ7B,OAAR,QAAO,E,eAFU,OAAb,IAAR,SAAoB,IAAP,O,eAIA,OAAD,IAAL,EAAR,Q,eANa,OAAZ,oB,iBAU+B,OAAlB,KAAQ,GAAS,E,qBAwQnD,IC9U4C,ED+U5C,OAAO,G,SACA,IAAS,mBAChB,OAAO,G,GACA,EAAQ,GAwBa,mBAvB5B,OAAO,G,GACA,EAAQ,EACf,OAA0B,GAAnB,IAAY,IAEnB,MAa4B,WAZ5B,OAAO,OACH,GAAY,EAAU,EAAW,GACjC,GAAY,EAAQ,EAAU,I,iBAhRqB,OAAlB,KAAQ,GAAS,E,iBAES,OAAnB,KAAQ,IAAU,E,iBE5ElE,OAAO,GAFG,GAAa,EAAS,YAA+B,GAAa,EAAS,OAC3E,GAAa,EAAS,OAAqB,EACvB,G,eTAsD,OAAxC,gBAAW,EAAE,a,YAgB5D,OAHG,EAAI,WAAc,WAClB,GAAI,YAAe,WACX,GAAY,EAAG,GAf+C,CAAY,G,eAQL,OAA/B,gBAAW,EAAO,GAAW,G,eAE7B,OAAV,GAAQ,G,iBUZf,OAA7B,OAAS,EAAO,G,eLuGhB,OlEjE6nD,MAAY,QAAQ,G,uBkEXtoD,EAAI,Y,OAAJ,SAEJ,GAFI,EAEkB,G,oBApBzB,IAAS,EAAO,OAAO,EAE3B,MAAe,EAAK,W,GACJ,MAAZ,E,IACA,IACU,EADO,EAAS,WAChB,eAAV,EAAU,IAAL,MAAK,K,GAAA,QACF,GAAgB,EAAG,GACnB,OAAO,EAKnB,MAA2C,MAAlB,EAAK,UAAmB,OAAa,eAAe,EAAK,WAAgB,KAClG,EAAoD,MAAlB,EAAwB,EAAe,YAAiB,KAC1F,OAA2B,MAApB,GAA4B,GAAgB,EAAkB,G,eAoFrE,QAAO,GAAU,KlErEuuD,EkEqE7sD,O,eAd3C,cAFyB,G,IAGpB,S,IACA,S,IACA,U,IACA,W,OAAa,E,eACN,GAAa,EAAK,S,eAqEsC,MAApB,iBAAP,GAAkB,gB,eAG3D,aAAoB,EAEpB,QAAgB,WAAT,GACU,YAAT,IACA,GAAS,KACT,GAAY,EAAyB,Y,eAI4B,MAArD,iBAAX,GAAsB,GAAY,EAA2B,Y,epErFtE,OAAO,OExDy7E,G,4ByBO73E,EAtC5D,mBAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAG1D,KACI,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAiB,KACvG,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,MACtE,MACI,MAAQ,MAAQ,MAAQ,MAAQ,MAAQ,Q2BTf,mB,iEoBEoB,KAAM,OAAN,GAA9C,W,uJAc8C,GAAM,EAAN,GAA9C,W,4HAyD8B,G,+BAA9B,W,+DAC8C,GAAM,EAAN,GAA9C,W,gHAzE8B,oBAA9B,WAO8B,IAA9B,W,0BAC8C,GAAM,EAAN,GAA9C,W,sEAc8C,GAAM,EAAN,GAA9C,W,wHAO8C,GAAM,EAAN,GAA9C,W,qGAW8B,G,+BAA9B,W,+DAC8C,GAAM,EAAN,GAA9C,W,oHA/C8C,KAAM,OAAN,GAA9C,WAuEuC,CAAM,EAAN,GAAvC,W,+IAc8C,GAAM,EAAN,GAA9C,W,wHA9B8C,GAAM,EAAN,GAA9C,W,qGAK8B,G,+BAA9B,W,sEAK8B,G,+BAA9B,W,yFAgC8C,GAAM,EAAN,GAA9C,W,+FCnF2C,OXvB/C,cACE,OAAO,EAAW,E,wBADpB,qBACgB,EAAS,G,uBW4BuC,OX7BhE,cACE,OAAO,aAAoB,E,uBWyBkB,OX1B/C,cACE,OAAO,EAAW,E,kEYmFQ,MAGH,KAAoB,WAAG,EAAM,OAAO,EAAb,EAC/C,G,GADkC,GAAU,E,GAAL,MAAK,MAC5C,EAD4C,EAC/B,MAAQ,EAAM,GAAW,EAAQ,EAC9C,EACE,EAF4C,GAExB,MAAL,GAAkB,MAAL,IAE9B,MADgB,IACQ,E9DmBqC,M8DjBzD,EAAO,aAAI,EAAG,G,YAPgB,IAAU,GAQrC,OAAO,QAAU,GAAV,E,iBAbmD,OAAzD,MADqB,EACb,G,cAoBhB,OADC,OAAmB,EAAK,GAnBY,CAAe,EAAK,G,iBAsClD,cACc,gB,eC/GJ,gB,cAelB,c,oCAiDgC,c,oCA1B2C,c,sHAe6E,OAAT,yB,eCJtI,oBAAuD,mBAAiB,EAC1E,WACP,GACA,a,MAHmC,WAItB,gBAJR,EAIQ,K,mBA3DwC,YAAuB,iBAClC,gBACf,wB,iBCsBoH,OAAhE,OAAiB,G,EAAM,U,uEAvB9E,mBAAiC,cACvC,c,+CC2Db,GAAsB,cAAI,EAAO,KAAK,G,iBAyQkB,GAE5D,cAAI,EAAO,QAAQ,G,eAFqB,OAAxC,GAAsB,cAAI,EAAO,S,iBAzSY,GACjC,cAAI,EAAO,QAAQ,G,iBAoTA,GAAsB,cAAI,EAAO,QAAQ,G,oDCjMzC,kB,wDAmE5B,U,uBAAwB,Y,iBAAuB,S,mBAAmB,Q,oBAAsB,Y,4BACtF,kB,iBACQ,S,gBAAmB,Q,kBAAoB,U,iBACpD,S,kBAAoB,S,sBACF,U,qBACH,Y,kBACE,S,kBACC,S,kBACP,S,mBAAqB,U,mBAChB,U,iBACD,Q,gBACF,O,iBACN,Q,gBACJ,O,iBACJ,Q,qCAlBa,oB,6EA5DgB,U,iBAAqB,S,kBAAqB,U,8VCrB7D,aACV,SAEK,EAAU,EACF,MAAM,GAAM,GALb,mB,iBCnCT,aAAS,MAAM,EAAU,EAAmB,MAAM,GAAO,GALkH,mB,iBC5BzI,aAAS,OAAO,EAAU,EAAmB,MAAM,GAAO,GAD/E,mB,iBC0DE,aAGd,KAAK,EAAU,EACF,MAAM,GAAO,GALR,mB,iBCnBrB,aAAS,QAAQ,EAAU,EAAmB,MAAM,GAAM,GAJxD,mB,iBCnFqF,aAAS,QAAQ,EAAU,EAAmB,MAAM,GAAM,GAApG,mB,iBC8F/B,aACZ,SAAS,EAAU,EAAmB,MAAM,GAAM,GAJyE,mB,iBC3F1C,aAAS,IAAI,EAAU,EAAmB,MAAM,GAAO,GAAjG,mB,iBC8IT,aAAS,QACxC,EAAU,EAGJ,MAAM,GAAM,GANR,mB,iBApDX,aAAS,SAAS,EAAU,EAAmB,MAAM,GAAM,GAJzD,mB,iBCpFqF,aAAS,QAAQ,EAAU,EAAmB,MAAM,GAAO,GAArG,oB,iBAiKP,aAAS,QAAQ,EAAU,EAAmB,MAEpF,GAGA,GANmE,oB,iBAiC6B,aAAS,KAAK,EAAU,EAAmB,MAAM,GAAO,GAAlG,oB,iBAnDkE,aAAS,KAAK,EAAU,EAG9I,MAAM,GAAO,GAH+D,oB,iBAjGpC,aAAS,QAAQ,EAAU,EAAmB,MAAM,GAAO,GAArG,oB,iBAW4B,aAAS,KAAK,EAAU,EAAmB,MAAM,GAAO,GAD7E,oB,+DC9DL,gBACD,oBAEF,kBAAiD,kBACT,iBAGN,wBAAc,EAAmB,M,EAAM,a,oDC6F3C,OAAlB,OAAa,G,uB9FYuE,O8FApF,OADsC,EAFA,GAAb,GAAjB,Q,EAAyC,Y,sDAVhC,E,uB9FyBtB,O8FAP,OADA,EAHwC,GAAb,GAAjB,Q,EAAyC,Y,sDArBtB,E,eA5FD,iB,MjFuFmC,EAAX,KiFtF1C,aACoB,sB,wBAqIjB,sB,EAAoB,M,CAAqB,sB,GAAA,QAAiB,MACnE,GAGG,6B,EAJ+C,EAId,S,wICtH8B,wBAAS,qBAC1E,EAAO,UAAU,G,iBALqD,wBAAS,qBAC3E,EAAO,WAAW,G,iBA8EiC,wBACzD,qBAAW,EAAO,UAAU,G,iBC1G9B,wBAAS,qBAAW,G,IAEb,EAAL,G,0CAEF,wBAAS,qBAAW,EAAX,G,QACM,wBACR,mBAAS,I,sBAI4E,EAAK,wBACtF,EAAoB,MAAM,GACb,mBAGnB,OAHgD,KAClD,GAES,EACZ,gB,iMCdG,eAEA,mBAEA,2BAEA,kBAEA,mBAEA,oBAEA,oBAEA,2BAEA,gBAEA,yBAEA,aAEA,cAEA,wBAEA,yBAEA,sBAEA,sBAGA,kBAEA,cAEA,iBAEA,2BAEA,qBAEA,kBAEA,4BAEA,kBAEA,iBAEA,+BAEA,+BAGA,0BAEA,iBAEA,kBACA,8BAEA,sBAEA,mBACA,sBACA,uBACA,wBACA,uBACA,iBACA,oBACA,aACA,gBACA,kBACA,kBACA,sBACA,eACA,mBACA,2BACA,8BACA,kBACA,gBACA,kBACA,uBACA,cACA,0BACA,yBACA,gCACA,8BACA,0BACA,wCACA,qBACA,kBACA,mBACA,aACA,cACA,qBACA,sBACA,4BACA,wCACA,sBACA,uBACA,8BACA,0BACA,iCACA,6BACA,4BACA,uBACA,sBACA,2B,iBAUA,oBACA,kB,6LAKA,aACA,oB,mBAGA,oBACA,eACA,uB,yBAGA,oBACA,iBACA,sBACA,qBACA,2BACA,uB,mBAKA,mBACA,+BACA,qB,qBAKA,sBACA,kBACA,mBACA,2B,2sBA2BA,eACA,a,2QAKA,oBACA,kBACA,e,2LAQA,eACA,2BACA,oB,iFAOC,WpFzH8D,EAAX,K,KoFyHnD,EAG+B,GAH/B,wCAKqC,MALrC,cAM4C,MAN5C,cAOqB,IAAAC,KAAK,EAAE,EAAE,IAP9B,yB,6EACD,eACA,6BACA,gBACA,sBACA,sBACA,wBACA,kB,mCAOA,WACA,WACA,WACA,WACA,aACA,uBACA,aACA,wBACA,kBACA,kBACA,sB,yBAIA,gBACA,wBACA,eACA,oBACA,oBACA,wB,iBAIA,oBACA,oB,iBASA,cACA,gB,o5BCtPK,oB,Y5BLL,MAAM,GAAsC,qBAAmB,EAAI,6B4BK9D,mB,mCAILC,GAAiBC,EAAA,cAAQ,GAAG,a,QrG2zCX,OAsFD,EA33CkB,EA23ClB,mCAAX,MAAW,cAEA,GAAZ,EqGj5CoBC,GAAa,CAg3BO,EAh3BP,aAg3BO,EAh3BU,c,SrGsB/C,MA63CA,EAmGM,KAAa,KAAwB,KAuErC,EAvEN,EAuEM,mCAAR,I,EqG5jDmB,KrG4jDX,cqG5jDCC,WrG6jDV,EAAY,WAAI,G,KqG/jDpB,MrGgkDO,E,IOziD+D,KAAe,EAAN,IAL3E,MAAM,GAAiC,GAfzB,wB8FElB,I,EAAIC,GAAQ,ErGguGZ,EApsGE,EAosGa,gB,GACV,EAAS,e,SACd,EgB/pGoD,KhBgqGpD,EAAc,EAAS,YAChB,EAAS,iBACZ,I,EAAA,EAAW,EAAS,YqG5sDqzpC,IAvhDz0pC,EAAeA,EAAf,UACAA,GAASA,EACT,MAAAC,GAAS,EAqhDy0pC,EArhDn0pC,gBAAa,GAAW,IAAAN,KAAK,IrGkuG5C,EAAO,WAAI,G,KACX,EAAU,EAEd,EAAO,OARkB,EAAO,K,IqGhuGhC,MAAsB,ErGi/CT,KAAa,GA78C3B,EA68CmD,KAuErC,EAphDd,EAohDc,mCAAR,I,EAAA,EAAQ,c,cqGjjDL,KAm/BA,EAn/BuB,QAm/BvB,EAn/BsC,oBAAtC,iBAm/BA,EAn/B8E,aAA9E,IrGkjDJ,EAAY,WAAI,G,KqGpjDpB,MAIKO,ErGijDE,I,gBqGvpCP,IAAIC,EAAG,EACDA,EAAEC,EAAe,mBACnBA,EAAA,cAAeD,GAAG,SAAQ,WAAIA,G,KAC9BA,EAAAA,EAAA,I,KA5ZJE,CAA2BD,GAC3B,MAAe,IAAAE,GAAY,GAAG,GAAG,GrFuDmB,KqFvDE,IAAAC,IAAmB,EAAM,KAAM,MrFuDjC,MqFtDhDC,ErFsDgD,KqFrDhDC,ErFqDgD,KG/CG,IAAkB,wBAGtD,GAInB,EAAK,WAAI,G,KAJkB,QAAkB,wBAE9B,G,GAEf,EAAK,WAAI,G,KkFPNC,EAAA,C,GACCC,GAA6BP,G,cA4SR,UAAfA,EAAe,sB,GAAzB,GAAU,E,GAAL,IAAAD,EAAK,MAAe,EAAf,EACN,MAA6BC,EAAA,cAAeD,GAAG,qBAE5CC,EAAA,cAAeD,GAAG,QAAlB,cACCC,EAAA,cAAeD,GAAG,WAAUJ,UAAYa,EAAU,WAAUb,WAC5Dc,EAAuBd,UAAYa,EAAU,eAAcb,YAE3DK,EAAA,cAAeD,GAAf,oBAPR,GAAU,GA1SNW,CAA8BV,EAAgBQ,GAG1CA,EAAU,oB,yBAqTlB,IAAIT,EAAG,EACP,EAAwD,GAAlCS,EAAU,eAAcb,WAC9C,EAAkD,GAA9Ba,EAAU,WAAUb,WAElCI,EAAEC,EAAe,oBACnB,MAA6BA,EAAA,cAAeD,GAAG,qB,GAI5CC,EAAA,cAAeD,GAAG,QAAlB,cACKC,EAAA,cAAeD,GAAG,WAAUJ,UAAUgB,EAAA,iBACtCF,EAAuBd,UAAUgB,EAAA,iBACjCF,EAAuBd,WAAWiB,EAAA,gBAAlC,CAMJ,MAAkBD,EAAA,gBAAwD,GAAtCX,EAAA,cAAeD,GAAG,WAAUJ,YAChE,EAAiBK,EAAA,cAAeD,GAAG,sBAAlB,gBAAqCc,GACtDb,EAAA,cAAeD,GAAf,sBAAuCc,E,IAGvC,EAAuB,G,KAAuCC,EAAvC,K,YAAA,UAA+DC,GAAcf,EAAA,cAAeD,GAAG,WAAWc,GAA1G,IACvBb,EAAe,cAAID,EAAE,EAAN,EAASiB,G,GAIzBhB,EAAA,cAAeD,GAAG,QAAlB,cACSU,EAAuBd,WAAaiB,EAAA,iBACpCZ,EAAA,cAAeD,GAAG,WAAUJ,WAAagB,EAAA,kBAIjDX,EAAA,cAAeD,GAAf,cAIDC,EAAA,cAAeD,GAAG,QAAlB,cACSC,EAAA,cAAeD,GAAG,WAAUJ,UAAUiB,EAAA,iBACtCZ,EAAA,cAAeD,GAAG,WAAUJ,WAAWgB,EAAA,iBACvCF,EAAuBd,UAAUiB,EAAA,gBAAjC,CAGR,MAAkD,GAA9BJ,EAAU,WAAUb,WAApB,gBAA6E,GAAtCK,EAAA,cAAeD,GAAG,WAAUJ,YACvF,EAAqBK,EAAA,cAAeD,GAAG,sBAAlB,gBAAqCkB,GAC1D,EAA0B,G,KAA+BC,EAA/B,K,YAAA,UAA2DV,EAAU,WAArE,IAC1BR,EAAe,cAAID,EAAE,EAAN,EAAQoB,GACvBnB,EAAA,cAAeD,GAAf,sBAAuCkB,EACvCjB,EAAA,cAAeD,GAAf,a,GAKDC,EAAA,cAAeD,GAAG,QAAlB,cACKC,EAAA,cAAeD,GAAG,WAAUJ,UAAUgB,EAAA,iBACtCF,EAAuBd,UAAUiB,EAAA,gBAAjC,CAEJ,MAAoBD,EAAA,gBAAsD,GAAtCX,EAAA,cAAeD,GAAG,WAAUJ,YAChE,EAAqBiB,EAAA,gBAAcD,GACnC,EAAoBX,EAAA,cAAeD,GAAG,sBAAlB,gBAAqC,GAArC,gBAAmD,GAEvE,EAA0B,G,KAAuC,EAAvC,K,YAAA,UAAmES,EAAU,eAA7E,IAC1B,EAAyB,G,KAA+BY,EAA/B,K,YAAA,UAA0DZ,EAAU,WAApE,IACzBR,EAAe,cAAID,EAAE,EAAN,EAAS,GACxBC,EAAe,cAAID,EAAE,EAAN,EAASsB,GACxBrB,EAAA,cAAeD,GAAf,sBAAqC,EAKzCA,EAAAA,EAAA,I,MA7WIuB,CAA6BtB,EAAgBQ,GAC7Ce,GAAqBvB,GACrBO,GAA6BP,G,cA+OrC,MAAmD,GAA9BQ,EAAU,WAAUb,WACzC,EAAkB6B,EAAA,qCACdzB,EAAI,E,OACDA,EAAEC,EAAe,oBACpB,MAAgBA,EAAA,cAAeD,GAAG,WAAUJ,U,GACzC8B,GAAWD,EAAA,iBACNC,GAAWC,EAAA,iBACX1B,EAAA,cAAeD,GAAG,QAAlB,a,GAGDA,EAAE,GAAKC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,cAEN,MAAAC,EAAA,cAAeD,EAAE,EAAjB,kEAA0CC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,sBAApB,eAAyCC,EAAA,cAAeD,GAAG,wBACrGC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,SAAQ,iBAAOC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,U,KACvDC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,SAAQ,iBAAOC,EAAA,cAAeD,GAAG,U,KACrDC,EAAe,mBAASD,EAAE,EAAX,G,KACfC,EAAe,mBAASD,EAAE,EAAX,G,KACfA,EAAAA,EAAK,EAAL,M,CAEA,MAAiC,GAAV0B,GAAA,gBAAmBD,GAC1CxB,EAAA,cAAeD,GAAf,WAA4BS,EAAU,WACtC,MAAAR,EAAA,cAAeD,G,GAAf,+DAAwCc,GACxCb,EAAA,cAAeD,GAAf,aAGGA,EAAE,GACD,MAAAC,EAAA,cAAeD,EAAE,EAAjB,mEAAwCc,I,GAIjDY,EAAUC,EAAA,gBACT,QAEJ3B,EAAAA,EAAA,I,MA/QI4B,CAAwC3B,EAAeQ,G,gBAyM/D,IAAIT,EAAI,E,OACDA,EAAEC,EAAe,oB,GACjBA,EAAA,cAAeD,GAAG,QAAlB,cACIC,EAAA,cAAeD,GAAG,sBAAlB,6C,GAE0B,MAAtBS,EAAU,YAQT,MANc,YAAXoB,EACCC,OAAOC,MAAyB,cAAQ,uBACxB,SAAXF,GACLC,OAAOC,MAAyB,WAAK,uBAEzCtB,EAAU,YAAV,eACO,EAEX,MAAoBR,EAAA,cAAeD,GAAG,sBAAlB,gBAAyD,GAApBS,EAAU,cACnE,EAAgB,IAAAuB,GACQ,GAApBvB,EAAU,aAAcwB,E,0CrFnMY,MqFqMxChC,EAAA,cAAeD,GAAf,iBAAkCkC,EAKlC,QAORlC,EAAAA,EAAA,I,KAEJ,OAAO,EAzOKmC,CAA0BlC,EAAeQ,EAAWoB,IACxDO,GAAmBnC,GACnBO,GAA6BP,GACzBoC,GAAwBpC,EAAgBqC,EAAiBC,EAAmBC,EAAsBC,EAAiBZ,EAAUxB,EAAgBC,IACjJoC,GAAmBzC,GACnB0C,GAAW1C,EAAgBQ,GAC3BmC,GAAoB3C,EAAgBQ,GAE7BoC,GAA8B5C,EAAgB6C,EAAYrC,EADxCsC,GAA4B9C,GAAgB,EAAOsC,EAAmBC,EAAsBC,EAAgBpC,EAAgBC,GACrD0C,IAL0EC,GAHhGA,EAjB1EzB,GAAqBvB,G,gBAgZ7B,IAAID,EAAE,EACAA,EAAIC,EAAe,mB,GAElBA,EAAA,cAAeD,GAAG,kBAAK,IAAMC,EAAA,cAAeD,GAAG,QAAlB,cAE5B,MAAAC,EAAA,cAAeD,EAAE,EAAjB,kEAA0CC,EAAA,cAAeD,GAAG,sBAAlB,eAAuCC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,wBACrGC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,SAAQ,iBAAOC,EAAA,cAAeD,GAAG,U,KACrDC,EAAe,mBAASD,G,KACxBC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,SAAQ,iBAAOC,EAAA,cAAeD,GAAG,U,KACrDC,EAAe,mBAASD,G,UAExBA,EAAAA,EAAA,I,KA1ZAkD,CAAgCjD,GAChCmC,GAAmBnC,GACnBO,GAA6BP,GAC7B,M,qBAgDLwC,EACC,OAAO,E,GAEqB,MAAxBD,EACJ,OAAO,EAGP,MAAoB/B,EAAU,eAC9B,EAAkBA,EAAU,WAC5B,EAA0C0C,EAAflD,GAAuB,WAClD,EAA6Be,GAAcoC,EAAuBZ,EAAD,mB,OAC7DY,EAAqBxD,UAAUyD,EAAczD,WAAWwD,EAAqBxD,WAAW0D,EAAY1D,WACpG2D,EAAuB3D,WAAWyD,EAAczD,WAAW2D,EAAuB3D,UAAU0D,EAAY1D,WACxG2D,EAAuB3D,WAAWyD,EAAczD,WAAYwD,EAAqBxD,WAAW0D,EAAY1D,UA7D9E4D,CAAiCvD,EAAgBQ,EAAW+B,EAAqBC,G,OACvGJ,GAAwBpC,EAAgBqC,EAAiBC,EAAmBC,EAAsBiB,EAAqB5B,EAASxB,EAAgBC,IACpJoC,GAAmBzC,GACnB0C,GAAW1C,EAAgBQ,GAC3BmC,GAAoB3C,EAAgBQ,GAE7BoC,GAA8B5C,EAAgB6C,EAAYrC,EADxCsC,GAA4B9C,GAAgB,EAAOsC,EAAkBC,EAAsBiB,EAAoBpD,EAAgBC,GACxD0C,IAL6EC,E,GAsB5KS,EAAA,CACLlC,GAAqBvB,GACrBmC,GAAmBnC,GACnBO,GAA6BP,GAC7B,M,oBAyDJ,IAAI0D,EAAJ,cACIC,EAAJ,cACIC,EAAJ,gBACIC,EAAJ,iBAEI9D,EAAI,EACDA,EAAEC,EAAe,oB,GAEjBA,EAAA,cAAeD,GAAG,QAAlB,cAA4CC,EAAA,cAAeD,GAAG,mBAAM,GAAxB,ClFwG5C,akFtGC2D,EAAW1D,EAAA,cAAeD,GAAG,sBlFuGV,G,GAH8G,EAvMpI,WAAI,G,KkFsGD8D,EAAoB,sCAA2BH,GAC/CE,EAAoBF,EAGjB3D,GAAEC,EAAe,kBAAK,EAAtB,IAA2BA,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,clF6GyB,akF5GnD4D,EAAU3D,EAAA,cAAeD,EAAE,EAAjB,GAAoB,sBlF4G8D,GkFtG5F,OlFsGkC,EAvNzC,WAAI,G,KkFgHGC,EAAA,cAAeD,EAAE,EAAjB,gBACO,IAAA+D,GAAoBJ,EAASC,S,GAEnC3D,EAAA,cAAeD,GAAG,QAAlB,cAA4CC,EAAA,cAAeD,GAAG,kBAAK,GAAvB,CAGjD,IACIgE,EACAC,EAFAC,EAAJ,YAIIC,EAAJ,c,GACGnE,EAAE,IAAMC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,cAA6CC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,gBAKpDmE,EAAgBlE,EAAA,cAAeD,EAAE,EAAjB,GAAoB,sBAApB,eAAuCC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,iBAE5EA,EAAE,GAAKmE,EAAA,oBAAgBL,GAAhB,IAAqCK,EAAA,wBAI3CD,EAAiBJ,EAAA,gBAAkBK,IAOpClE,EAAA,cAAeD,GAAG,sBAAlB,gBAAqCkE,GAArC,oBAAsDL,IAAtD,GlF6Gy5B,akFxGx5BF,EAHAK,EAAO/D,EAAA,cAAeD,GAAG,sBAAlB,gBAAqCkE,GlF2Go5B,G,GAAzD,EA1P94B,WAAI,G,KkFoJGL,EAAoBF,EAEjB3D,GAAEC,EAAe,kBAAO,EAAxB,IAA6BA,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,clFoGqtC,akFnGjvC4D,EAAY3D,EAAA,cAAeD,EAAE,EAAjB,GAAoB,sBlFmG0vC,GAA1D,EA1P3uC,WAAI,G,KkF0JO,MAAoB,IAAAoE,G,qDAAqCF,EAAgBF,E,YAAUA,E,crFlH/C,MqFqHpC,OAFA/D,EAAA,cAAeD,GAAf,eAAkCqE,EAClCpE,EAAA,cAAeD,EAAE,EAAjB,gBACO,IAAA+D,GAAoBJ,EAASC,G,IAEpC,EAAoB,IAAAQ,G,qDAAqCF,EAAgBF,E,YAAUA,E,crFvH/C,MqFwHpC/D,EAAA,cAAeD,GAAf,eAAkC,EAClC8D,EAAkB,sCAAyBE,O,CAK/CA,EAAOH,EAIPA,EAAoBS,GAHpBL,EAAgBhE,EAAA,cAAeD,GAAG,sBAAlB,gBAAqCkE,GAArC,gBAAoDL,GAGXG,EAAMF,EAAmB7D,EAAgBD,GAOlG,MAAgBiE,EAAA,qC,GAEbJ,EAAA,wCACEA,EAAA,yBAA+CU,EAAA,yBlFsEu6G,akF7Dv9GZ,EAAWE,ElF6Do/G,G,GAAzD,EA1Pj9G,WAAI,G,KkFgMU7D,GAAEC,EAAe,kBAAO,EAAxB,IAA6BA,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,clF0DuvH,akFzDnxH4D,EAAY3D,EAAA,cAAeD,EAAE,EAAjB,GAAoB,sBlFyD4xH,GAA1D,EA1PjxH,WAAI,G,KkFoMW,MAAoB,IAAAoE,G,qDAAqCF,EAAgBF,EAAMC,EAAeN,E,crF5J9D,MqF+JhC,OAFA1D,EAAA,cAAeD,GAAf,eAAkC,EAClCC,EAAA,cAAeD,EAAE,EAAjB,gBACO,IAAA+D,GAAoBJ,EAASC,G,IAEpC,EAAoB,IAAAQ,G,qDAAqCF,EAAgBF,EAAMC,EAAeN,E,crFjK9D,MqFkKhC1D,EAAA,cAAeD,GAAf,eAAkC,EAClC8D,EAAkB,sCAAyBH,GAGnD,MAAoB,IAAAS,G,qDAAqCF,EAAgBF,EAAMC,EAAeN,E,crFtKtD,MqFuKxC1D,EAAA,cAAeD,GAAf,eAAkC,GAK1CA,EAAAA,EAAA,I,KAEJ,OAAO,IAAA+D,GAAoBJ,EAASC,GAtLnBY,CAAoBvE,EAAeI,EAAgBC,GAQhE,O,gBAmCiB,MAAAL,EAAA,mCAAjB,IAAAwE,EAAiB,cACG,EAAdA,EAAc,Q,GAChB,eAAqBA,EAAc,QAAd,U,GACrB,eAAsBA,EAAc,QAAd,U,GACtB,eAA6BA,EAAc,QAAd,U,GAC7B,eAAmD,aA/CvDC,CAAsCzE,GAElC0E,EAAO,aAAP,uBAAyBA,EAAO,aAAP,wBACzBtC,GAAwBpC,EAAgB0E,EAAO,aAAWA,EAAO,aAAUA,EAAO,cAAW,EAAO9C,EAAUxB,EAAiBC,G,MAEnIoC,GAAmBzC,G,oBC1EvB,IACI2E,EAAa,GACjB,EAAmBC,GAAiB5E,GACpC,EAAc6E,GAAyB7E,EAAgB6C,EAAYiC,EAAoB/B,GAKvF,OAAO,IAAA7C,GAJPyE,EAAAA,EAAe,OAAMI,GAA4B/E,EAAgB6C,EAAYiC,EAAoB/B,GAInEiC,EAFZC,GAAoBC,EAAarC,GAECqC,EAAaJ,EAAoB9E,GDoE1EmF,CAA6BnF,EAAgBoF,EAAWvC,EADtCC,GAA4B9C,GAAgB,EAAMsC,EAAmBC,EAAsBC,EAAgBpC,EAAgBC,GACrD0C,G,OAE/FxB,GAAqBvB,GACrBmC,GAAmBnC,GACnBO,GAA6BP,GACzBoC,GAAwBpC,EAAgBqC,EAAiBC,EAAmBC,EAAsBC,EAAiBZ,EAAUxB,EAAiBC,IAClJgF,GAAS,8BACT5C,GAAmBzC,G,oBCvEvB,IACI2E,EAAa,GACjB,EAAmBC,GAAiB5E,GAYpC,EAAc6E,GAAyB7E,EAAgB6C,EAAYiC,EAAoB/B,GAKvF,OAAO,IAAA7C,GAJPyE,EAAAA,EAAe,OAAMI,GAA4B/E,EAAgB6C,EAAYiC,EAAoB/B,GAInEiC,EAFZC,GAAoBC,EAAarC,GAECqC,EAAaJ,EAAoB9E,GDsD1EsF,CAA4BtF,EAAgBoF,EAAWvC,EADrCC,GAA4B9C,GAAgB,EAAOsC,EAAmBC,EAAsBC,EAAgBpC,EAAgBC,GACvD0C,IAJ6EC,E,mBAoV/K,IAAIuC,EAAY,KACM,EAAAvF,EAAA,mCAAjB,IAAAwE,EAAiB,cAClBA,EAAc,WAAYe,EAC1BA,EAAOxE,GAAcwE,EAAKf,EAAc,wB,mBAqC5C,IAAIzE,EAAE,EACAA,EAAIC,EAAe,mB,GAElBA,EAAA,cAAeD,GAAG,kBAAK,IAAMC,EAAA,cAAeD,GAAG,QAAlB,cAE5B,MAAAC,EAAA,cAAeD,EAAE,EAAjB,kEAA0CC,EAAA,cAAeD,GAAG,sBAAlB,eAAuCC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,wBACrGC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,SAAQ,iBAAOC,EAAA,cAAeD,GAAG,U,KACrDC,EAAe,mBAASD,G,KACxBC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,SAAQ,iBAAOC,EAAA,cAAeD,GAAG,U,KACrDC,EAAe,mBAASD,G,UAExBA,EAAAA,EAAA,I,wBAUR,IAAIA,EAAE,EACCA,GAAEC,EAAe,kBAAK,EAAtB,K,GACAA,EAAA,cAAeD,GAAG,QAAlB,cAA4CC,EAAA,cAAeD,GAAG,kBAAK,GAC/DA,EAAE,GACEC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,cACCC,EAAA,cAAeD,EAAE,EAAjB,gBACA,MAAAC,EAAA,cAAeD,EAAE,EAAjB,G,GAAA,+DAA0CC,EAAA,cAAeD,GAAG,uBAC5DC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,SAAQ,iBAAOC,EAAA,cAAeD,GAAG,U,KAElDC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,cACC,MAAAC,EAAA,cAAeD,EAAE,EAAjB,kEAA0CC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,uBAC9DC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,SAAQ,iBAAOC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,U,KACvDC,EAAe,mBAASD,EAAE,EAAX,G,KAGnBC,EAAe,mBAASD,G,KACxBA,EAAAA,EAAA,I,KAIZA,EAAAA,EAAA,I,mCAgBJsF,GAAS,0BAET,IAAI3B,EAAJ,cACIC,EAAJ,cACI6B,EAAJ,c,GAEwB,MAApBnD,GAA4BA,EAAA,0CAA6CA,EAAA,yClF9Om1jB,akF+O55jBqB,EAAWrB,GlF/Oy7jB,GAAzD,EA1P14jB,WAAI,G,QkF4ee,MAApBC,GAA4BA,EAAA,0ClFlPmkkB,akFmP/lkBqB,EAAYrB,GlFnP4nkB,GAA1D,EA1P7kkB,WAAI,G,KkFgfkB,MAAvBC,GAA+BA,EAAA,2CAC/BiD,EAAejD,GAGM,UAAfvC,EAAe,sB,GAAzB,GAAU,E,GAAL,IAAAD,EAAK,E,GAAA,IAAe,EAAf,EAIHC,EAAA,cAAeD,GAAG,QAAlB,cAA4CC,EAAA,cAAeD,GAAG,mBAAM,IAAIC,EAAA,cAAeD,GAAG,mBAAM,EAAxB,ClF9PshlB,akF+P7llB2D,EAAW1D,EAAA,cAAeD,GAAG,sBlF/PwmlB,G,GAAzD,EA1P/klB,WAAI,G,KkF2fEA,EAAE,GAAKC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,eACN4D,EAAY3D,EAAA,cAAeD,EAAE,EAAjB,GAAoB,uBAE7B,gDAEC4D,EAAY,IAAZ,gBAEA3D,EAAA,cAAeD,EAAE,EAAjB,iBlFxQwqmB,aAA+B,EAAU,GAA1D,EA1PlqmB,WAAI,G,ckFugBIC,EAAA,cAAeD,GAAG,QAAlB,cAA6DC,EAAA,cAAeD,GAAG,kBAAK,GAAvB,CAGlE,MAAkD,GAAjCC,EAAA,cAAeD,GAAG,kBAAkB,SACrD,EAAqD,GAAjCC,EAAA,cAAeD,GAAG,kBAAkB,iB,GAIpDiC,EAAA,0CAA0CjC,IAAoB,GAAfC,IAC3CgC,EAAA,yCAGJqC,GAAsBrC,EAAtB,kCAAqFhC,EAAgBD,G,KACrG,MAAgB,IAAAgC,GAAqB0D,EAAYzD,EAAe0B,EAASA,EAAUC,ErF5e3C,MqF6exC3D,EAAA,cAAeD,GAAf,iBAAkCkC,M,IAI/ByB,EAAA,uBAA0BC,EAAA,sBAOzB,MALc,YAAX/B,EACCC,OAAOC,MAAyB,cAAQ,kBACxB,SAAXF,GACLC,OAAOC,MAAyB,WAAK,mBAElC,EAGX,MAAW4B,ElFzSo/pB,SkF0S//pBA,EAAWW,GAAsBrC,EAAc0B,EAASC,EAAU3D,EAAgBD,GlF1Sq9pB,GAAzD,EA1Pr/pB,WAAI,G,KkFsiBG,MAAgB,IAAAgC,GAAqB0D,EAAYzD,EAAe+B,EAAKL,EAAUC,ErF9fvC,MqF+fxC3D,EAAA,cAAeD,GAAf,iBAAkC,Q,GAGjCC,EAAA,cAAeD,GAAG,QAAlB,cAA4CC,EAAA,cAAeD,GAAG,kBAAK,GAAvB,C,GAG9C2D,EAAA,uBAA0BC,EAAA,sBAOzB,MALc,YAAX/B,EACCC,OAAOC,MAAyB,cAAQ,kBACxB,SAAXF,GACLC,OAAOC,MAAyB,WAAK,mBAElC,E,GAGJ0D,EAAA,uBAAqBzF,EAAE,EAOtB,MALc,YAAX6B,EACCC,OAAOC,MAAyB,cAAQ,yBACxB,SAAXF,GACLC,OAAOC,MAAyB,WAAK,0BAElC,EAIJ/B,EAAE,IACDyF,EAAexF,EAAA,cAAeD,EAAE,EAAjB,GAAoB,sBAApB,eAAyCC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,iBAGpF,MAAcyF,EACd,EAAc7B,EACd,EAAc3D,EAAA,cAAeD,GAAG,sBAChC,EAAc2D,EACd,EAAgCgC,GAAaC,EAAIC,EAAIC,EAAIC,GlFhVi6tB,SkFoV19tBpC,EAAW,EAAO,QlFpVg/tB,G,GAAzD,EA1Ph9tB,WAAI,G,KkFilBM,EAAO,oBAAsB3D,EAAE,IAAMyC,GAAqBzC,EAAE,GAAKC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,cAArC,EAE3B4D,EAAYgC,GAET,gDAEChC,EAAY,IAAZ,gBAGG5D,EAAE,IACDC,EAAA,cAAeD,EAAE,EAAjB,kBlFjWsxvB,aAA+B,EAAU,GAA1D,EA1PxxvB,WAAI,G,akFkmB0C2D,E,EAASC,ErF1jBG,EAAX,KqFyjBxC,MAAY,IAAAQ,GAAgBwB,EAAGC,EAAGC,EAAGC,EAAI,EAAO,QAAQ,EAAO,kBAC3D,EAAO,QAAM,EAAO,iBADZ,IAC+C,GAC3D9F,EAAA,cAAeD,GAAf,eAAgCgG,ElFzW+rwB,akF2W/twBrC,EAAWW,GAAsB,EAAO,iBAAcX,EAASC,EAAU3D,EAAgBD,GlF3W8qwB,GAAzD,EA1PrtwB,WAAI,G,YkFofT,GAAU,GAuHV,OAAO,E,uBAUP,IAAIiG,EAAkBtC,E,GAClB1B,EAAA,oBAAe2B,EAAA,mCAAf,GAGA,MAAgB3B,EAAA,cAAe0B,EAAA,eAASC,IAEpCW,EAAA,oBAAUX,EAAA,kCAAV,EAIG5D,EAAiB,GAAfC,IAA4BsE,EAAA,qCAC5BtE,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,cAA6CC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,gBAC9CC,EAAA,cAAeD,EAAE,EAAjB,gBACAC,EAAA,cAAeD,EAAE,EAAjB,kBAAkCuE,GAKtC0B,EAAkB1B,EAAA,gBAAUX,QAI3B3B,EAAA,qBAMFjC,GAAEC,EAAe,kBAAK,EAAtB,KACEA,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,cAA6CC,EAAA,cAAeD,EAAE,EAAjB,GAAoB,QAApB,gBAC9CC,EAAA,cAAeD,EAAE,EAAjB,gBACAC,EAAA,cAAeD,EAAE,EAAjB,kBAAoCiC,GAI5C,OAAOgE,E,uBAIP,eACA,yBACA,eACA,wBACA,yB,qBAoCA,MACA,EACA,EACA,EACA,EAyCF,OAvCML,EAAA,oBAAMC,IAAN,EACIE,EAAA,oBAAMD,EAAA,gBAAMD,EAAA,gBAAKD,MAAjB,GAGAM,EAAS,KACTC,EAAiBN,EAAA,gBAAGD,GACpB5B,EAAO+B,EACP9D,EAAgB6D,EAAA,gBAAID,EAAA,gBAAGD,IAAP,gBAAWG,GAC3BK,GAAmB,GAEd,qCAA2BN,EAAA,gBAAID,EAAA,gBAAGD,MAAlC,GAAyCE,EAAA,gBAAID,EAAA,gBAAGD,IAAP,oBAAaG,GAAb,GAC9CG,EAAS,KACTC,EAAiBN,EAAA,gBAAGD,GACpB5B,EAAO8B,EAAA,gBAAID,EAAA,gBAAGD,IACd3D,EAAgB,IAAhB,QACAmE,GAAmB,IAGnBF,EAAS,KACTC,EAAiB,IAAjB,QACAnC,EAAO+B,EACP9D,EAAgB6D,EAAA,gBAAGC,GACnBK,GAAmB,GAGnBL,EAAA,gBAAMH,EAAA,gBAAKC,IAAX,0C,KACAK,E,GACAC,EAAiB,IAAjB,QACAnC,EAAO+B,EAAA,gBAAIH,EAAA,gBAAGC,IACd5D,EAAgB6D,EAAA,gBAAIC,EAAA,gBAAIH,EAAA,gBAAGC,KAC3BO,GAAmB,I,KAEnBF,E,GACAC,EAAiB,IAAjB,QACAnC,EAAO+B,EACP9D,EAAgB6D,EAAA,gBAAGC,GACnBK,GAAmB,GAGtB,IAAAC,GAAmBH,EAAOC,EAAenC,EAAK/B,EAAemE,G,eAWzC,UAAfnG,EAAe,sB,GAAzB,GAAU,E,GAAL,IAAAD,EAAK,E,GAAA,IAAe,EAAf,EACHC,EAAA,cAAeD,GAAG,QAAlB,cACCC,EAAA,cAAeD,GAAG,kBAAK,IACQ,GAA/BC,EAAA,cAAeD,GAAG,gBAAgB,MAAlC,cACAA,IAAkB,GAAfC,GAAH,CACA,MAAqD,GAA/BA,EAAA,cAAeD,GAAG,gBAAgB,IAAlC,gBAAoE,GAA/BC,EAAA,cAAeD,GAAG,gBAAgB,K,GAC1FC,EAAA,cAAeD,GAAG,sBAAlB,oBAAqCsG,GAArC,GACgC,IlFzgB8k8B,EkFygB9k8B,GAA/BrG,EAAA,cAAeD,GAAG,gBlFzgB2l8B,eAAmD,cAAsC,EAAgB,gBAAe,GAAG,YA1Ppv8B,EAAK,WAAI,G,KkFowBG,MAAoBgB,GAAcf,EAAA,cAAeD,GAAG,WAAWsG,GAC/D,EAAmBrG,EAAA,cAAeD,GAAG,sBAAlB,gBAAqCsG,GlF3gBm48B,EkF4gB558B,GAA/BrG,EAAA,cAAeD,GAAG,gBlF5gBy68B,eAAmD,cAAuC,EAAc,GkF6gBni9B,OlFvwBZ,EAAK,WAAI,G,KkFuwBG,M,IAGJC,EAAA,cAAeD,GAAG,QAAlB,cAA2CC,EAAA,cAAeD,GAAG,QAAlB,eACxCC,EAAA,cAAeD,GAAG,kBAAK,GAAvB,CAGH,MAAoD,GAA/BC,EAAA,cAAeD,GAAG,gBAAgB,gBACvD,EAAmCC,EAAA,cAAeD,GAAG,W,GAEjDmG,EAAA,oCAC+B,IlFxhBs89B,EkFwhBt89B,GAA/BlG,EAAA,cAAeD,GAAG,gBlFxhBm99B,eAAmD,cAAsC,EAAe,GA1Pzl+B,EAAK,WAAI,G,KkFoxBD,MAAoBgB,GAAcuF,EAA0BJ,GAC5D,EAA0C,GAA/BlG,EAAA,cAAeD,GAAG,gBAAgB,MlF3hB8u+B,EkF4hB5v+B,GAA/BC,EAAA,cAAeD,GAAG,gBlF5hByw+B,eAAmD,cAA2B,EAAK,GA1Pt3+B,EAAK,WAAI,G,KkFwxBD,MAA6BgB,GAAc,EAAgBgD,GAC3D,EAAmD,GAA/B/D,EAAA,cAAeD,GAAG,gBAAgB,iBAElD4D,EAA2C,GAA/B3D,EAAA,cAAeD,GAAG,gBAAgB,WAC9C2D,EAA0C,GAA/B1D,EAAA,cAAeD,GAAG,gBAAgB,W,GAG9C4D,EAAA,wBACID,EAAA,wBACCA,EAAA,iBAEJC,EAAU,sCAAyBI,IAGpC/B,EAAA,mC,GACIA,EAAA,oBAAe2B,EAAA,mCAAf,GACE3B,EAAA,oBAAc2B,GAAd,GACO3B,EAAA,oBAAc2B,EAAA,kCAAd,GACA5D,IAAkB,GAAfC,GAAH,CAIR,IAGIuG,EACAC,EAJJ,EAAgBxE,EAAA,cAAe+B,EAAA,eAAKJ,IACpC,EAAiB3B,EAAA,gBAAcsC,GAAf,cAA2BP,EAAA,eAAKJ,IAC5C8C,EAA0BC,EAIrB,4B,GAAT,sBAAcC,IAAd,E,GAAI,IAAAC,EAAK,wBAELL,EAAmBxF,GAAc0F,EAAoB9C,GACrD6C,EAAmBzF,GAAcwF,EAAkBxC,GAEpB,IlF/jBs4hC,EkF+jBt4hC,GAA/B/D,EAAA,cAAeD,GAAG,gBlF/jBm5hC,eAAiD,cAAqC,EAAU,GA1PzhiC,EAAK,WAAI,G,KkF0zB0C,IlFhkBkhiC,EkFgkBlhiC,GAA/BC,EAAA,cAAeD,GAAG,gBlFhkB+hiC,eAAiD,cAA2B,EAAK,GA1PtpiC,EAAK,WAAI,G,KkF2zBW0G,EAAmBD,SAPvB,SAAcG,I,GAYXrC,EAAA,0B,GAEMA,EAAA,oBAAUX,GAAV,GACFW,EAAA,oBAAUX,EAAA,kCAAV,GACA3D,EAAA,cAAeD,GAAf,OAAkC8G,EAAf7G,IAAnB,CAC4B,IlF3kBqmjC,EkF2kBrmjC,GAA/BA,EAAA,cAAeD,GAAG,gBlF3kBknjC,eAAiD,cAAqC,EAAU,GA1PxvjC,EAAK,WAAI,G,KkFs0BWwG,EAAmBxF,GAAc0F,EAAoB9C,GACrD,MAAeW,EAAA,gBAAUX,GlF7kB24jC,EkF8kBr4jC,GAA/B3D,EAAA,cAAeD,GAAG,gBlF9kBk5jC,eAAiD,cAAuC,EAAS,GA1PzhkC,EAAK,WAAI,G,akFy0BgBuE,EAAA,oBAAUX,EAAA,kCAAV,GAE0B,IlFjlBqokC,EkFilBrokC,GAA/B3D,EAAA,cAAeD,GAAG,gBlFjlBkpkC,eAAiD,cAAqC,EAAU,GA1PxxkC,EAAK,WAAI,G,UkF80B0C,IlFplBs3kC,EkFolBt3kC,GAA/BC,EAAA,cAAeD,GAAG,gBlFplBm4kC,eAAiD,cAAqC,EAAU,GA1PzglC,EAAK,WAAI,G,KkF+0BWwG,EAAmBxF,GAAc0F,EAAoB9C,GACrD,MAAeW,EAAA,gBAAUX,GlFtlB4plC,EkFulBtplC,GAA/B3D,EAAA,cAAeD,GAAG,gBlFvlBmqlC,eAAiD,cAA2B,EAAS,GA1P9xlC,EAAK,WAAI,G,WkFs1BsC,IlF5lBi2lC,EkF4lBj2lC,GAA/BC,EAAA,cAAeD,GAAG,gBlF5lB82lC,eAAiD,cAAqC,EAAc,GA1Pp/lC,EAAK,WAAI,G,ckF21BIC,EAAA,cAAeD,GAAG,QAAlB,cAA2DC,EAAA,cAAeD,GAAG,kBAAK,GAAvB,CAEhE,MAAkD,GAAjCC,EAAA,cAAeD,GAAG,kBAAkB,SlFnmB+umC,EkFqmBnwmC,GAAjCC,EAAA,cAAeD,GAAG,kBlFrmBkxmC,iBAAmD,cAA6B,EAAW,gBAAe,GAAG,YA1Pz5mC,EAAK,WAAI,G,KkFm2BD,MAA6BgB,GAAcf,EAAA,cAAeD,GAAG,WAAY0F,GACzE,GAAqD,GAAjCzF,EAAA,cAAeD,GAAG,kBAAkB,iBACpD,GAA6C,GAAjCC,EAAA,cAAeD,GAAG,kBAAkB,aAChD,GAA4C,GAAjCC,EAAA,cAAeD,GAAG,kBAAkB,Q,GAGhD,2BACC,qBAED,2BACC,qBAGD,sC,GACI,uBAAe,sCAAf,GACE,uBAAc,IAAd,GACO,uBAAc,qCAAd,GACAA,IAAoB,GAAfC,GAAL,CAIR,IAGI,GACA,GAJJ,GAAgB,iBAAe,kBAAS,KACxC,GAAiB,mBAAc,IAAf,cAA2B,kBAAS,KAChD,GAA0B,EAIrB,8B,GAAT,uBAAc,KAAd,E,GAAI,OAAK,4BAEL,GAAmBe,GAAc,GAAoB,IACrD,GAAmBA,GAAc,GAAkB,IAElB,IlFzoB0kqC,GkFyoB1kqC,GAAjCf,EAAA,cAAeD,GAAG,kBlFzoBylqC,iBAAmD,eAAqC,GAAU,IA1PjuqC,GAAK,WAAI,I,KkFo4B4C,IlF1oBwtqC,GkF0oBxtqC,GAAjCC,EAAA,cAAeD,GAAG,kBlF1oBuuqC,iBAAmD,eAA2B,GAAS,IA1Pp2qC,GAAK,WAAI,I,KkFq4BW,GAAmB,UAPvB,UAAc,K,GAUX,6B,GAEM,uBAAU,IAAV,GACF,uBAAU,qCAAV,GACAA,IAAkB,GAAfC,GAAH,CAC8B,IlFnpBkyrC,GkFmpBlyrC,GAAjCA,EAAA,cAAeD,GAAG,kBlFnpBizrC,iBAAmD,eAAqC,GAAU,IA1Pz7rC,GAAK,WAAI,I,KkF84BW,GAAmBgB,GAAc,GAAoB,IACrD,OAAe,mBAAU,IlFrpB4ksC,GkFspBpksC,GAAjCf,EAAA,cAAeD,GAAG,kBlFtpBmlsC,iBAAmD,eAAuC,GAAS,IA1P5tsC,GAAK,WAAI,I,akFi5BgB,uBAAU,qCAAV,GAE4B,IlFzpBs0sC,GkFypBt0sC,GAAjCC,EAAA,cAAeD,GAAG,kBlFzpBq1sC,iBAAmD,eAAqC,GAAU,IA1P79sC,GAAK,WAAI,I,UkFs5B4C,IlF5pByjtC,GkF4pBzjtC,GAAjCC,EAAA,cAAeD,GAAG,kBlF5pBwktC,iBAAmD,eAAqC,GAAU,IA1PhttC,GAAK,WAAI,I,KkFu5BW,GAAmBgB,GAAc,GAAoB,IACrD,OAAe,mBAAU,IlF9pBm2tC,GkF+pB31tC,GAAjCf,EAAA,cAAeD,GAAG,kBlF/pB02tC,iBAAmD,eAA2B,GAAS,IA1Pv+tC,GAAK,WAAI,I,WkF85BwC,IlFpqBwiuC,GkFoqBxiuC,GAAjCC,EAAA,cAAeD,GAAG,kBlFpqBujuC,iBAAmD,eAAqC,GAAc,GA1P/ruC,GAAK,WAAI,I,OkFo6BFC,EAAA,cAAeD,GAAG,QAAlB,cAAkDC,EAAA,cAAeD,GAAG,QAAlB,eAG9CC,EAAA,cAAeD,GAAG,eAAlB,qCACIC,EAAA,cAAeD,GAAG,QAAlB,aACCC,EAAA,cAAeD,GAAf,aACMC,EAAA,cAAeD,GAAG,QAAlB,eACNC,EAAA,cAAeD,GAAG,QAAlB,a,aA/KhB,GAAU,G,uBAwLV,ErF54BoD,KqF84B/B,EAAAC,EAAA,mCAAjB,IAAAwE,EAAiB,c,GACdA,EAAc,QAAd,cAAwCA,EAAc,mBAAO,GAArB,ClF7rBwnwC,aAAM,EAAc,WAAU,EAAc,sBAA1D,EA1PppwC,WAAI,G,akF07BIA,EAAc,QAAd,cAAwCA,EAAc,kBAAK,G,IAChD,MAA2B,GAA3BA,EAAc,gBAAgB,eAA9B,mCAAZ,IAAAsC,EAAY,c,GACTA,EAAS,QAAT,cACGA,EAAS,QAAT,clFnsBkgxC,aAAM,EAAS,aAAU,EAAS,sBAAhD,EA1PjgxC,WAAI,G,ckFi8BItC,EAAc,QAAd,cAAyDA,EAAc,mBAAM,GAApB,ClFvsBspxC,aAAM,EAAc,WAAU,EAAc,sBAA1D,EA1PzsxC,WAAI,G,akFm8BIA,EAAc,QAAd,cAAyDA,EAAc,kBAAK,G,IACjE,MAA6B,GAA7BA,EAAc,kBAAkB,iBAAhC,mCAAZ,MAAY,c,GACT,EAAS,QAAT,cACG,EAAS,QAAT,cACA,EAAS,QAAT,clF7sBqoyC,aAAM,EAAS,aAAU,EAAS,sBAAhD,EA1PpoyC,WAAI,G,OkF88BT,OAAOU,E,iBAIiB,UAAflF,EAAe,sB,GAAxB,GAAS,E,KAAL,IAAAD,EAAK,E,GAAA,IAAe,EAAf,EACFC,EAAA,cAAeD,GAAG,qBAAQJ,UAAUa,EAAU,WAAUb,WACnDK,EAAA,cAAeD,GAAG,QAAlB,c,IACJ,EAAuB,G,iBrF76BqB,K,YqF66BrB,UAA0ES,EAAU,WAApF,IACvBR,EAAe,cAAID,EAAEiB,GACrB,Q,GAEDjB,IAAkB,GAAfC,GAAe,C,IAEjB,EAAuB,G,iBrFn7BqB,K,YqFm7BrB,UAA0EQ,EAAU,WAApF,IACvBR,EAAe,cAAID,EAAE,EAAN,EAAQ,UAV/B,GAAS,G,iBAgBe,UAAfC,EAAe,sB,GAAxB,GAAS,E,KAAL,IAAAD,EAAK,E,GAAA,IAAe,EAAf,EACFC,EAAA,cAAeD,GAAG,qBAAQJ,UAAUa,EAAU,eAAcb,UAAA,C,IAC3D,EAAsB,G,iBrF57BsB,K,YqF47BtB,UAAiEa,EAAU,eAA3E,IACtBR,EAAe,cAAID,EAAEiB,GACrB,Q,GAEDjB,KAAGC,EAAe,kBAAK,EAAvB,I,IAEC,EAAsB,G,iBrFl8BsB,K,YqFk8BtB,UAAiEQ,EAAU,eAA3E,IACtBR,EAAe,cAAID,EAAE,UAT7B,GAAS,G,mBA0KT,MAAoBgH,EAAY,kBAGhC,ErFvmCoD,KqFymCvC,EAAAA,EAAA,kC,IAAR,IACW,EADH,cACG,mCAAR,IAAAxB,EAAQ,clFx5B4mhD,SAAa,EAAK,aAAlB,MAAhB,EA1PvmhD,WAAI,G,KA0P4rhD,aAAa,EAAK,Y,UAAlC,EA1PhrhD,WAAI,G,anB4uDD,EAxzBJ,kBAAO,I,EAwzBH,E,EsB1rDG,O,iB+EhCoD,O,qD/EgCpD,IpBoEX,GAAgB,EAAM,I,ImGuiCtB,IAAIyB,EAAU,EAId,EAAiBC,EAGjB,ErF5nCoD,KqF6nCpC,EAAAC,EAAA,mCAAZ,IAAAC,EAAY,c,GAETA,EAAS,MAAT,a,GACCH,EAAAA,EAAA,I,KAIGA,IAASI,EAAA,ClFl7BsojD,aAAa,EAAS,QAAtB,MAAZ,EA1PzojD,WAAI,G,UA0P4wjD,aAAa,EAAS,QAAtB,MAAZ,EA1PpwjD,WAAI,G,akFkrCDJ,EAAAA,EAAA,I,KAlBS,IAoBNA,EAAS,ClF17Bo/jD,aAAa,EAAS,QAAtB,MAAZ,EA1Pv/jD,WAAI,G,UA0PkmkD,aAAa,EAAS,QAAtB,MAAZ,EA1P1lkD,WAAI,G,UkF6rCT,IAAIK,EAAM,GACV,ErFtpCoD,KqFupChDtH,EAAE,EAECA,GAAEuH,EAAW,kBAAK,EAAlB,KACH,IlFx8B+9kD,SkFw8B/8kDA,EAAA,cAAWvH,GAAG,QAChBuH,EAAA,cAAWvH,EAAE,EAAb,GAAgB,QlFz8Bi+kD,gBAAW,GAAG,OAA/D,EA1P78kD,WAAI,G,KkFqsCLA,EAAAA,EAAA,I,KAwBJ,OAFAsH,E,gBC1eA,IAAIA,EAAM,GACW,EAAAE,EAAA,mCAAhB,IAAAC,EAAgB,cACbC,EAAO,GACPD,EAAa,QAAb,aAA2CC,EAAM,eAC5CD,EAAa,QAAb,aAA8CC,EAAM,kBACpDD,EAAa,QAAb,aAAqDC,EAAM,oBAC3DD,EAAa,QAAb,eAAqDC,EAAM,qBACpE,MAAcD,EAAa,aAC3B,EAAcA,EAAa,W,GAExBA,EAAa,QAAb,c,MACCH,E,KAAAA,EAAA,2BAAoDK,GAAUjG,GAAU,GAAM,OAAMiG,GAAUC,GAAQ,GAAM,OAAMF,EAAK,qB,GACjHD,EAAa,QAAb,c,MACNH,E,KAAAA,EAAA,mBAA4CK,GAAUjG,GAAU,GAAM,OAAMiG,GAAUC,GAAQ,GAAM,OAAMF,EAAK,Y,GACzGD,EAAa,QAAb,c,MACNH,E,KAAAA,EAAA,oBAA0CK,GAAUjG,GAAU,GAAM,OAAMiG,GAAUC,GAAQ,GAAM,OAAMF,EAAK,Y,GACvGD,EAAa,QAAb,c,MACNH,E,KAAAA,EAAA,2BAAmDK,GAAUjG,GAAU,GAAM,OAAMiG,GAAUC,GAAQ,GAAM,OAAMF,EAAK,iBAI9H,OAAOJ,EDqdAO,CAA4BL,G,2BAMnC,M,YAiMA,IAAIM,GAAsB,E,GAERhB,EAAf7G,GAAsB,QAAtB,a,GAEmB6G,EAAf7G,GAAsB,kBAAK,IAC1B,MAAmD,GAApB6G,EAAf7G,GAAsB,gBAAgB,WACtD,EAAkD,GAApB6G,EAAf7G,GAAsB,gBAAgB,WACrD,EAA2E6G,EAAjB,GAApBA,EAAf7G,GAAsB,gBAAgB,gBAAqB,QAClF,EAA2E6G,EAAjB,GAApBA,EAAf7G,GAAsB,gBAAgB,gBAAqB,oB,GAC/E8H,EAAA,aACCD,GAAY,O,GACPC,EAAA,aAEDD,IADDnE,EAAA,oBAASqE,GAAT,Q,GAKED,EAAA,a,GACFnE,EAAA,oBAAUoE,GAAV,GACC,MAA8C,GAApBlB,EAAf7G,GAAsB,gBAAgB,MACjD,EAAwD,GAApB6G,EAAf7G,GAAsB,gBAAgB,IAAtC,gBAA4E,GAApB6G,EAAf7G,GAAsB,gBAAgB,KAGhG6H,IAFDG,EAAA,cACCC,EAAA,oBAA+BpB,EAAf7G,GAAsB,wBAAtC,QAMJ6H,GAAY,OAIpBA,GAAY,O,GAEIhB,EAAf7G,GAAsB,QAAtB,c,GACa6G,EAAf7G,GAAsB,kBAAK,IAC1B,IAAI,EACA,EAA8C,GAApB6G,EAAf7G,GAAsB,gBAAgB,WACrD,EAA2E6G,EAAjB,GAApBA,EAAf7G,GAAsB,gBAAgB,gBAAqB,QAClF,EAA2E6G,EAAjB,GAApBA,EAAf7G,GAAsB,gBAAgB,gBAAqB,oBAC/E,0BACC,gBAEJ,EAAU,uBAAG,GACV,eACC6H,GAAY,EACP,eAEDA,IADD,sBAAS,GAAT,GAKE,iBAEDA,EADD,sBAAU,GAAV,S,GAOShB,EAAf7G,GAAsB,QAAtB,c,GACa6G,EAAf7G,GAAsB,kBAAK,IAC1B,IAAI,EAA+C,GAAtB6G,EAAf7G,GAAsB,kBAAkB,aAClD,EAAgD,GAAtB6G,EAAf7G,GAAsB,kBAAkB,aACvD,EAA6E6G,EAAjB,GAAtBA,EAAf7G,GAAsB,kBAAkB,kBAAqB,QACpF,EAA6E6G,EAAjB,GAAtBA,EAAf7G,GAAsB,kBAAkB,kBAAqB,oBACjF,eAEK6H,IADD,yBAEM,sBAAU,GAAV,EAKJ,eAGDA,IAFD,yBAGM,sBAAS,GAAT,GAKJ,iBACLA,GAAY,SAIpBA,GAAY,EAEhB,OAAOA,EA3RWK,CAAiBlI,GACnCqF,GAAS,gBACT,M,yBA4FkBwB,EAAf7G,GAAsB,QAAtB,cAA6D6G,EAAf7G,GAAsB,kBAAK,GAA3B,CAC7C,MAAsF6G,EAAjB,GAApBA,EAAf7G,GAAsB,gBAAgB,gB,OAE7DmI,EAA4B,QAA5B,aAEP,IAAArE,GACuC,GAApB+C,EAAf7G,GAAsB,gBAAgB,MACH,GAApB6G,EAAf7G,GAAsB,gBAAgB,YAEnCmI,EAA4B,QAA5B,cAEgC,GAApBtB,EAAf7G,GAAsB,gBAAgB,MAAtC,cACAqF,GAAS,wBACF,IAAAvB,GACgC,GAApB+C,EAAf7G,GAAsB,gBAAgB,IACH,GAApB6G,EAAf7G,GAAsB,gBAAgB,MASvC,IAAA8D,GACgC,GAApB+C,EAAf7G,GAAsB,gBAAgB,MACH,GAApB6G,EAAf7G,GAAsB,gBAAgB,Y,GAG1B6G,EAAf7G,GAAsB,QAAtB,cAAsE6G,EAAf7G,GAAsB,kBAAK,GAEvF,OAAO,IAAA8D,GACgC,GAApB+C,EAAf7G,GAAsB,gBAAgB,WACH,GAApB6G,EAAf7G,GAAsB,gBAAgB,Y,GAEtB6G,EAAf7G,GAAsB,kBAAK,IAAqB6G,EAAf7G,GAAsB,QAAtB,cACtC,MAAwF6G,EAAjB,GAAtBA,EAAf7G,GAAsB,kBAAkB,kBAE1E,OAAUoI,EAA4B,QAA5B,cAGDA,EAA4B,QAA5B,aADL,IAAAtE,GAAyD,GAAtB+C,EAAf7G,GAAsB,kBAAkB,QAA0C,GAAtB6G,EAAf7G,GAAsB,kBAAkB,c,GAQzF6G,EAAf7G,GAAsB,mBAAM,KACjB6G,EAAf7G,GAAsB,QAAtB,cAA6D6G,EAAf7G,GAAsB,QAAtB,cAA9C,CAED,MAA+B6G,EAAf7G,GAAsB,sB,OAEpB6G,EAAf7G,GAAsB,QAAtB,aAEQ,IAAA8D,GAAoBuE,EAD3B,gBAGJhD,GAAQ,GAAmBwB,EAAhBzG,GAAuB,QAClCiF,GAAQ,GAAmBwB,EAAhBxG,GAAuB,QAC3B,IAAAyD,GAAoC+C,EAAhBzG,GAAuB,OAAsByG,EAAhBxG,GAAuB,SAmCnF,OALwBwG,EAAf7G,GAAsB,mBAAM,IAAqB6G,EAAf7G,GAAsB,QAAtB,aAKpC,KA1LMsI,CAAYtI,EAAgBsC,EAAmBC,EAAsBC,EAAiBpC,EAAiBC,GACpHgF,GAAS,eAGT,M,eAYkBwB,EAAf7G,GAAsB,kBAAK,IAAmB6G,EAAf7G,GAAsB,QAAtB,cACQ,GAApB6G,EAAf7G,GAAsB,gBAAgB,MAAtC,cAIC,MAA4C,GAApB6G,EAAf7G,GAAsB,gBAAgB,IAC/C,EAA4C,GAApB6G,EAAf7G,GAAsB,gBAAgB,IAG3CuF,EAAOxE,GAA6B8F,EAAf7G,GAAsB,WAAW4F,EAAA,gBAAGD,I,GAC1DJ,EAAK5F,UAAyBkH,EAAf7G,GAAsB,qBAAQL,UAC5C,OAAO,IAAA4I,GAAehD,EAAf,M,GACFA,EAAK5F,WAA0BkH,EAAf7G,GAAsB,qBAAQL,UAEnD,OAAO,IAAA4I,GADPhD,EAAOxE,GAAcwE,EAAyC,GAApBsB,EAAf7G,GAAsB,gBAAgB,OAC1D,M,GAQD6G,EAAf7G,GAAsB,kBAAK,IAAmB6G,EAAf7G,GAAsB,QAAtB,c,GAEyB6G,EAAjB,GAApBA,EAAf7G,GAAsB,gBAAgB,gBAAqB,QAA3D,cACqD6G,EAAjB,GAApBA,EAAf7G,GAAsB,gBAAgB,gBAAqB,QAA3D,c,GAGsC,GAApB6G,EAAf7G,GAAsB,gBAAgB,iBAAtC,mCAIC,OAAO,IAAAuI,GAFIxH,GAAkE8F,EAAjB,GAApBA,EAAf7G,GAAsB,gBAAgB,gBAAqB,aAA6C,GAApB6G,EAAf7G,GAAsB,gBAAgB,OAE7H,M,GAI+B,GAApB6G,EAAf7G,GAAsB,gBAAgB,MAAtC,aAEC,OAAO,IAAAuI,GADIxH,GAAkE8F,EAAjB,GAApBA,EAAf7G,GAAsB,gBAAgB,gBAAqB,aAA6C,GAApB6G,EAAf7G,GAAsB,gBAAgB,YAC7H,M,GACiC,GAApB6G,EAAf7G,GAAsB,gBAAgB,MAAtC,aAEL,OAAO,IAAAuI,GADIxH,GAAkE8F,EAAjB,GAApBA,EAAf7G,GAAsB,gBAAgB,gBAAqB,aAA6C,GAApB6G,EAAf7G,GAAsB,gBAAgB,YAC7H,Y,GAIC6G,EAAf7G,GAAsB,kBAAK,IAAqB6G,EAAf7G,GAAsB,QAAtB,eACmB6G,EAAjB,GAAtBA,EAAf7G,GAAsB,kBAAkB,kBAAqB,QAA7D,cACuD6G,EAAjB,GAAtBA,EAAf7G,GAAsB,kBAAkB,kBAAqB,QAA7D,cAEA,OAAO,IAAAuI,GADIxH,GAAoE8F,EAAjB,GAAtBA,EAAf7G,GAAsB,kBAAkB,kBAAqB,aAA+C,GAAtB6G,EAAf7G,GAAsB,kBAAkB,SACjI,M,GAQG6G,EAAf7G,GAAsB,kBAAK,IAAmB6G,EAAf7G,GAAsB,QAAtB,c,GACyB6G,EAAjB,GAApBA,EAAf7G,GAAsB,gBAAgB,gBAAqB,QAA3D,aAGC,OAAO,IAAAuI,GAFIxH,GAAkE8F,EAAjB,GAApBA,EAAf7G,GAAsB,gBAAgB,gBAAqB,aAA8C,GAApB6G,EAAf7G,GAAsB,gBAAgB,YAE9H,W,GAGS6G,EAAf7G,GAAsB,kBAAK,IAAqB6G,EAAf7G,GAAsB,QAAtB,cACmB6G,EAAjB,GAAtBA,EAAf7G,GAAsB,kBAAkB,kBAAqB,QAA7D,aAGC,OAAO,IAAAuI,GAFIxH,GAAoE8F,EAAjB,GAAtBA,EAAf7G,GAAsB,kBAAkB,kBAAqB,aAAgD,GAAtB6G,EAAf7G,GAAsB,kBAAkB,cAElI,MAKf,OAAO,KArFWwI,CAAsBxI,G,OAC7B,MAARyI,IAAiBA,EAAO,aAAP,wBAAuBA,EAAO,aAAP,uBAA2BhF,EAG3D,IAAAtD,GAAmB0H,EAAYY,EADjChF,EACyC,KAEDiF,GAJtC,IAAAvI,GAAmB0H,EAAaY,EAAQ,M,eAvtCC,iB,sCClEpD,IAAI9D,EAAa,GACbK,EAAU,GACd,EAAmBJ,GAAiB5E,GAMpC,OALAgF,G,oBAoDA,MAAgBxE,EAAU,oBAE1B,EAAgBA,EAAU,WACtB6G,EAAyB,WAAK,Q,GAE/BsB,EAAA,CACI3I,EAAA,cAAe,GAAG,QAAlB,eACCqH,GAA0B,WAAK,mBAEP,UAAfrH,EAAe,sB,GAA5B,GAAa,E,GAAT,IAAA4I,EAAS,MAAe,EAAf,EACN7F,GACCsE,GAAOwB,GAAmC7I,EAAe4I,EAAO/F,GAChEwE,GAAOyB,GAA0C9I,EAAe4I,EAAO/F,GACvEwE,GAAO0B,GAAyC/I,EAAe4I,EAAO/F,GACnE7C,EAAA,cAAe4I,GAAO,QAAtB,eACCvB,GAA0B,WAAK,eAEhCrH,EAAA,cAAe4I,GAAO,QAAtB,eACCvB,GAA0B,WAAK,kBAInCA,GAAO2B,GAA2BhJ,EAAe4I,EAAO/F,GACxDwE,GAAO4B,GAAiCjJ,EAAe4I,EAAO/F,GAC9DwE,GAAO6B,GAAiClJ,EAAe4I,EAAO/F,GAC3D7C,EAAA,cAAe4I,GAAO,QAAtB,eACCvB,GAA0B,WAAK,OAEhCrH,EAAA,cAAe4I,GAAO,QAAtB,eACCvB,GAAqC,GAAX,WAAK,OAAe,Q,GAAW8B,GAAeC,EAAWvG,IAA9C,KAClC+F,GAAM5I,EAAe,kBAAK,EAA1B,KACCqH,GAA0B,WAAK,0BAtB/C,GAAa,GA6BbA,GAAOgC,GAA2BxG,EAAYiC,EAAoB/B,O,CAKlEsE,GAA0B,WAAK,YAEH,UAAfrH,EAAe,sB,GAA5B,GAAa,E,GAAT,MAAS,MAAe,EAAf,EACTqH,GAAO2B,GAA2BhJ,EAAe,EAAO6C,GACxDwE,GAAO4B,GAAiCjJ,EAAe,EAAO6C,GAC3D7C,EAAA,cAAe,GAAO,QAAtB,eACCqH,GAA0B,WAAK,OAEhCrH,EAAA,cAAe,GAAO,QAAtB,eACCqH,GAAgD,GAAtB,WAAK,kBAA0B,Q,GAAW8B,GAAeC,EAAWvG,IAA9C,KAC7C,GAAM7C,EAAe,kBAAK,EAA1B,KACCqH,GAA0B,WAAK,yBAT3C,GAAa,GAcbA,GAAOgC,GAA4BxG,EAAYiC,EAAoB/B,GAKvE,OAAOsE,EApHGiC,CAAkCtJ,EAAe6C,EAAWrC,EAAWsE,EAAoB/B,GACrG4B,EAAAA,EAAc,O,oBA88Bd,MAAgBnE,EAAU,oBAE1B,EAAgBA,EAAU,WACtB6G,EAAyB,cAAQ,Q,GAElCsB,EAAA,CACI3I,EAAA,cAAe,GAAG,QAAlB,eACCqH,GAA0B,cAAQ,mBAEV,UAAfrH,EAAe,sB,GAA5B,GAAa,E,GAAT,IAAA4I,EAAS,MAAe,EAAf,EACN7F,GACCsE,GAAOkC,GAAsCvJ,EAAe4I,EAAO/F,GACnEwE,GAAOmC,GAA6CxJ,EAAe4I,EAAO/F,GAC1EwE,GAAOoC,GAA4CzJ,EAAe4I,EAAO/F,GACtE7C,EAAA,cAAe4I,GAAO,QAAtB,eACCvB,GAA0B,cAAQ,eAEnCrH,EAAA,cAAe4I,GAAO,QAAtB,eACCvB,GAA0B,cAAQ,kBAItCA,GAAOqC,GAA8B1J,EAAe4I,EAAO/F,GAC3DwE,GAAOsC,GAAoC3J,EAAe4I,EAAO/F,GACjEwE,GAAOuC,GAAoC5J,EAAe4I,EAAO/F,GAC9D7C,EAAA,cAAe4I,GAAO,QAAtB,eACCvB,GAA0B,cAAQ,OAEnCrH,EAAA,cAAe4I,GAAO,QAAtB,eACCvB,GAAwC,GAAd,cAAQ,OAAe,Q,GAAW8B,GAAeC,EAAWvG,IAA9C,KACrC+F,GAAM5I,EAAe,kBAAK,EAA1B,KACCqH,GAA0B,cAAQ,0BAtBlD,GAAa,GA6BbA,GAAOwC,GAA8BhH,EAAYiC,EAAoB/B,O,CAKrEsE,GAA0B,WAAK,YAEH,UAAfrH,EAAe,sB,GAA5B,GAAa,E,GAAT,MAAS,MAAe,EAAf,EACTqH,GAAO2B,GAA2BhJ,EAAe,EAAO6C,GACxDwE,GAAO4B,GAAiCjJ,EAAe,EAAO6C,GAC3D7C,EAAA,cAAe,GAAO,QAAtB,eACCqH,GAA0B,WAAK,OAEhCrH,EAAA,cAAe,GAAO,QAAtB,eACCqH,GAAgD,GAAtB,WAAK,kBAA0B,Q,GAAW8B,GAAeC,EAAWvG,IAA9C,KAC7C,GAAM7C,EAAe,kBAAK,EAA1B,KACCqH,GAA0B,WAAK,yBAT3C,GAAa,GAcbA,GAAOgC,GAA4BxG,EAAYiC,EAAoB/B,GAKvE,OAAOsE,EA9gCayC,CAAqC9J,EAAe6C,EAAWrC,EAAWsE,EAAoB/B,GAEhGkC,GAAoBC,EAAarC,GAE5C,IAAA3C,GAAYyE,EAAWK,EAAS,GAAGE,EAAaJ,EAAoB9E,G,qBAuC3E,IAAIqH,EAAM,GACG,EAAAnC,EAAA,mCAAT,IAAA6E,EAAS,cACT1C,EAAAA,EAAM,QAAOK,GAAUqC,EAAM,aAAUlH,GAAY,OAAM6E,GAAUqC,EAAM,WAAQlH,GAAY,OAEjG,OAAOwE,E,qBAyEP,IAAIA,EAAyB,WAAK,QAClCA,GAA0B,WAAK,Y,IAC/B,IAAIuB,EAAQ,EACLA,EAAM5I,EAAe,mBACrB+C,GACCsE,GAAOwB,GAAmC7I,EAAe4I,EAAO/F,GAChEwE,GAAOyB,GAA0C9I,EAAe4I,EAAO/F,GACpE+F,KAAO5I,EAAe,kBAAK,EAA3B,KACCqH,GAAOgC,GAA2BxG,EAAYiC,EAAoB/B,MAGtEsE,GAAO2B,GAA2BhJ,EAAe4I,EAAO/F,GACxDwE,GAAO4B,GAAiCjJ,EAAe4I,EAAO/F,GAC3D+F,KAAO5I,EAAe,kBAAK,EAA3B,KACCqH,GAAOgC,GAA2BxG,EAAYiC,EAAoB/B,KAG1E6F,EAAAA,EAAA,I,KAEJ,OAAOvB,E,mBAoBP,I,EAkBA,EACA,EAnBI2C,EAAU,G,OAEdA,G,cAwGA,I,EAAIA,EAAU,G,GAEI,MAARtF,EACNW,GAAS,oB,EACT,O,CAEA,MAAgBX,EAAO,aACvB,EAAgBA,EAAO,a,GACpB2D,EAAA,uBAAkB1E,EAAA,sBACjBqG,GAA6B,WAAK,qB,IAC7B3B,EAAA,uBAAkB1E,EAAA,sBACvB0B,GAAS,oBAAmB4E,GAAwB5B,EAAUxF,IAC9DmH,GAAkD,GAArB,WAAK,iBAAyB,Y,GAAeE,GAA4B7B,EAAWxF,IAA/D,S,OAElDmH,E,EAAwC,GAAX,WAAK,OAAe,Y,GAAeE,GAA4B7B,EAAWxF,IAA/D,KAAxCmH,EAAA,EAAsH,KAAS,Y,GAAeE,GAA4BvG,EAAWd,IAA/D,K,EAE1HmH,EAdJ,OAAO,EA1GEG,CAA0BtH,EADtBiC,EAAmB,SAE7B/B,EAAmBiH,GAEtBA,I,EADclF,EAAmB,aAcjC,EAAwC,WAAK,aAC7C,EAAwC,WAAK,aACnC+C,EACNuC,EAEAC,GAhBJL,G,cA6CA,IAAIA,EAAU,G,GACM,MAAhBM,EACA,MAAO,GAEX,MAAgBA,EAAe,MAC/B,EAAsBA,EAAe,aAYrC,OAXGC,EAAA,aACCP,GAAsD,GAAxB,WAAK,oBAA4B,Q,GAAWb,GAAeqB,EAAY3H,IAA/C,KACjD0H,EAAA,aAILP,GAFAA,GADAA,GAA2C,GAAb,WAAK,SAAiB,Q,GAAWb,GAAeqB,EAAY3H,IAA/C,MACM,GAAnB,WAAK,eAAuB,Q,GAAWsG,GAAeqB,EAAY3H,IAA/C,MAEA,GAAnB,WAAK,eAAuB,Q,GAAWsG,GAAeqB,EAAY3H,IAA/C,KAC5C0H,EAAA,eACLP,GAA6C,GAAf,WAAK,WAAmB,Q,GAAWb,GAAeqB,EAAY3H,IAA/C,MAG1CmH,EA9DES,CAA6B5H,EADpBiC,EAAmB,iBAIrCkF,GAA4B,WAAK,WAGjCA,GAA4B,WAAK,a,mBAsIjC,IAAIA,EAAU,G,GAEVhK,EAAA,cAAe4I,GAAO,kBAAK,KAClB5I,EAAA,cAAe4I,GAAO,QAAtB,cACO5I,EAAA,cAAe4I,GAAO,QAAtB,cADP,CAGPoB,GA1TgB,uC,IA4TF,MAAmC,GAAnChK,EAAA,cAAe4I,GAAO,gBAAgB,eAAtC,mCAAZ,IAAA9B,EAAY,cACTA,EAAS,QAAT,aACCkD,GAAuD,GAA1B,WAAK,sBAA8B,Y,GAAeE,GAA4BpD,EAAS,oBAAoBjE,IAAjF,KAElDiE,EAAS,QAAT,aACFA,EAAA,OAA6C,GAAnC9G,EAAA,cAAe4I,GAAO,gBAAgB,eAAtC,cAAoD,IAC7DoB,GAAmD,GAAtB,WAAK,kBAA0B,Y,GAAeE,GAA4BpD,EAAS,oBAAoBjE,IAAjF,KAEnDmH,GAAsD,GAAzB,WAAK,qBAA6B,Y,GAAeE,GAA4BpD,EAAS,oBAAoBjE,IAAjF,KAErDiE,EAAS,QAAT,aACLkD,GAA0D,GAA7B,WAAK,yBAAiC,Y,GAAeE,GAA4BpD,EAAS,oBAAoBjE,IAAjF,KAErDiE,EAAS,QAAT,aACLkD,GAAsD,GAAzB,WAAK,qBAA6B,Y,GAAeE,GAA4BpD,EAAS,oBAAoBjE,IAAjF,KAEjDiE,EAAS,QAAT,eACLkD,GAA6B,WAAK,qBAQ9C,MAJY,KAATA,IACCA,GAA4B,WAAK,qBAG9BA,E,mBAGP,IAAIU,EAAa,G,GAEb1K,EAAA,cAAe4I,GAAO,kBAAK,KAClB5I,EAAA,cAAe4I,GAAO,QAAtB,cACO5I,EAAA,cAAe4I,GAAO,QAAtB,cADP,CAGT8B,GA9VkB,uC,IAgWF,MAAmC,GAAnC1K,EAAA,cAAe4I,GAAO,gBAAgB,eAAtC,mCAAZ,IAAA9B,EAAY,cACTA,EAAS,QAAT,aACC4D,GAA6D,GAA7B,cAAQ,sBAA8B,Y,GAAeT,GAAwBnD,EAAS,oBAAoBjE,IAA7E,KAExDiE,EAAS,QAAT,aACFA,EAAA,OAA6C,GAAnC9G,EAAA,cAAe4I,GAAO,gBAAgB,eAAtC,cAAoD,IAC7D8B,GAAyD,GAAzB,cAAQ,kBAA0B,Y,GAAeT,GAAwBnD,EAAS,oBAAoBjE,IAA7E,KAEzD6H,GAA4D,GAA5B,cAAQ,qBAA6B,Y,GAAeT,GAAwBnD,EAAS,oBAAoBjE,IAA7E,KAE3DiE,EAAS,QAAT,aACL4D,GAAgE,GAAhC,cAAQ,yBAAiC,Y,GAAeT,GAAwBnD,EAAS,oBAAoBjE,IAA7E,KAE3DiE,EAAS,QAAT,aACL4D,GAA4D,GAA5B,cAAQ,qBAA6B,Y,GAAeT,GAAwBnD,EAAS,oBAAoBjE,IAA7E,KAEvDiE,EAAS,QAAT,eACL4D,GAAgC,cAAQ,qBAQpD,MAJe,KAAZA,IACCA,GAA+B,cAAQ,qBAGpCA,E,mBAIP,IAAIV,EAAU,G,GASVhK,EAAA,cAAe4I,GAAO,kBAAK,KAC1B5I,EAAA,cAAe4I,GAAO,QAAtB,cACD5I,EAAA,cAAe4I,GAAO,QAAtB,cADC,CAGDoB,GAA8B,WAAK,YACnCA,GAA8B,WAAK,U,IAEnB,MAAmC,GAAnChK,EAAA,cAAe4I,GAAO,gBAAgB,eAAtC,mCAAZ,IAAA9B,EAAY,cACTA,EAAS,QAAT,cACCkD,GAAU,GAAiBlD,EAAS,aAAUA,EAAS,qBAAQjE,GAC/DmH,GAA6B,WAAK,yBAE7BlD,EAAS,QAAT,aACLkD,GAAU,GAAalD,EAAS,aAAUA,EAAS,qBAAQjE,GAEtDiE,EAAS,QAAT,cAELkD,GADAA,GAAU,GAAiBlD,EAAS,aAAUA,EAAS,qBAAQjE,IACN,GAA5B,WAAK,wBAAgC,Q,GAAWsG,GAAerC,EAAS,aAAUjE,IAAtD,KACzDmH,GAA6B,WAAK,yBAE7BlD,EAAS,QAAT,eACLkD,GAAU,GAAalD,EAAS,aAAUA,EAAS,qBAAQjE,IAKnEmH,GAA8B,WAAK,YAGvC,OAAOA,E,mBAIP,IAAIU,EAAa,G,GACd1K,EAAA,cAAe4I,GAAO,kBAAK,IAAI5I,EAAA,cAAe4I,GAAO,QAAtB,cAC9B8B,GAzakB,uC,IA0aF,MAAqC,GAArC1K,EAAA,cAAe4I,GAAO,kBAAkB,iBAAxC,mCAAZ,IAAA9B,EAAY,cACTA,EAAS,QAAT,aACC4D,GAA0D,GAA1B,cAAQ,mBAA2B,Y,GAAeT,GAAwBnD,EAAS,oBAAoBjE,IAA7E,KACrDiE,EAAS,QAAT,aACL4D,GAAgE,GAAhC,cAAQ,yBAAiC,Y,GAAeT,GAAwBnD,EAAS,oBAAoBjE,IAA7E,MAC3DiE,EAAS,QAAT,cAEAA,EAAS,QAAT,gBADL4D,GAA4D,GAA5B,cAAQ,qBAA6B,Y,GAAeT,GAAwBnD,EAAS,oBAAoBjE,IAA7E,OAUxE,MAHe,KAAZ6H,IACCA,GAA+B,cAAQ,qBAEpCA,E,mBAIP,IAAIV,EAAU,G,GACXhK,EAAA,cAAe4I,GAAO,kBAAK,IAAI5I,EAAA,cAAe4I,GAAO,QAAtB,cAC9BoB,GAhckB,uC,IAicF,MAAqC,GAArChK,EAAA,cAAe4I,GAAO,kBAAkB,iBAAxC,mCAAZ,IAAA9B,EAAY,cACTA,EAAS,QAAT,aACCkD,GAAoD,GAAvB,WAAK,mBAA2B,Y,GAAeE,GAA4BpD,EAAS,oBAAoBjE,IAAjF,KAC/CiE,EAAS,QAAT,aACLkD,GAA0D,GAA7B,WAAK,yBAAiC,Y,GAAeE,GAA4BpD,EAAS,oBAAoBjE,IAAjF,MACrDiE,EAAS,QAAT,cAEAA,EAAS,QAAT,gBADLkD,GAAsD,GAAzB,WAAK,qBAA6B,Y,GAAeE,GAA4BpD,EAAS,oBAAoBjE,IAAjF,OAUlE,MAHY,KAATmH,IACCA,GAA4B,WAAK,qBAE9BA,E,mBAIP,IAAIA,EAAU,G,GAYXhK,EAAA,cAAe4I,GAAO,kBAAK,IAAI5I,EAAA,cAAe4I,GAAO,QAAtB,cAC9BoB,GAA8B,WAAK,YACnCA,GAA8B,WAAK,U,IAEnB,MAAqC,GAArChK,EAAA,cAAe4I,GAAO,kBAAkB,iBAAxC,mCAAZ,IAAA9B,EAAY,cACTA,EAAS,QAAT,aACCkD,GAAU,GAAclD,EAAS,aAAUA,EAAS,qBAASjE,GACxDiE,EAAS,QAAT,cAELkD,GADAA,GAAU,GAAiBlD,EAAS,aAAUA,EAAS,qBAASjE,IACP,GAA5B,WAAK,wBAAgC,Q,GAAWsG,GAAerC,EAAS,aAAUjE,IAAtD,KACzDmH,GAA6B,WAAK,0BAE7BlD,EAAS,QAAT,cAGAA,EAAS,QAAT,gBAFLkD,GAAU,GAAalD,EAAS,aAAUA,EAAS,qBAASjE,IAOpEmH,GAA8B,WAAK,YAGvC,OAAOA,E,mBAIP,IAAIW,EAAe,G,GACf3K,EAAA,cAAe4I,GAAO,QAAtB,cACA5I,EAAA,cAAe4I,GAAO,QAAtB,cACA,MAAc5I,EAAA,cAAe4I,GAAO,WACpC,EAAS5I,EAAA,cAAe4I,GAAO,qBACN,EAAtB5I,EAAA,cAAe4I,GAAO,kBACrB+B,EAAoD,GADvB,GAA9B,MAAmC,GACA,WAAK,cAEL,WAAK,aAFsB,Y,GAAeT,GAA6BU,GAAWC,EAAGC,GAAMjI,IAAzE,U,GAKlD7C,EAAA,cAAe4I,GAAO,QAAtB,cACN5I,EAAA,cAAe4I,GAAO,QAAtB,cACA5I,EAAA,cAAe4I,GAAO,QAAtB,cACA,MAAW5I,EAAA,cAAe4I,GAAO,sBACjC+B,EAAqD,GAAlB,WAAK,cAAsB,Y,GAAeT,GAA4Ba,EAAMlI,IAA1D,KAClD7C,EAAA,cAAe4I,GAAO,QAAtB,eACC+B,GAAiC,WAAK,qB,GAGpC3K,EAAA,cAAe4I,GAAO,QAAtB,cAAwD5I,EAAA,cAAe4I,GAAO,QAAtB,aAC9D+B,EAA2D,GAAxB,WAAK,oBAA4B,Y,GAAeT,GAA4BlK,EAAA,cAAe4I,GAAO,sBAAoB/F,IAA9F,U,GACrD7C,EAAA,cAAe4I,GAAO,QAAtB,cACN5I,EAAA,cAAe4I,GAAO,QAAtB,c,MACuE,GAApC,WAAK,gCAAwC,Y,GAAesB,GAA4BlK,EAAA,cAAe4I,GAAO,eAAe/F,IAAzF,K,EAAwG,KAAS,Y,GAAeqH,GAA4BlK,EAAA,cAAe4I,GAAO,sBAAoB/F,IAA9F,KAA/K8H,EAA4R,KAAS,Y,GAAeT,GAA6BlK,EAAA,cAAe4I,GAAO,eAAtB,eAAoC5I,EAAA,cAAe4I,GAAO,uBAAqB/F,IAApI,U,GACtR7C,EAAA,cAAe4I,GAAO,QAAtB,cACN,MAAS5I,EAAA,cAAe4I,GAAO,WAC/B,EAAS5I,EAAA,cAAe4I,GAAO,qBAE3B+B,EADD3K,EAAA,cAAe4I,GAAO,mBAAM,GAC0B,GAAnB,WAAK,eAAuB,Y,GAAesB,GAA6BU,GAAW,EAAG,GAAM/H,IAAzE,KAEF,GAAjB,WAAK,aAAqB,Y,GAAeqH,GAA4BlK,EAAA,cAAe4I,GAAO,sBAAmB/F,IAA7F,UAEjD7C,EAAA,cAAe4I,GAAO,QAAtB,cAEA5I,EAAA,cAAe4I,GAAO,QAAtB,cAEA5I,EAAA,cAAe4I,GAAO,QAAtB,eACN+B,EAAqD,GAAnB,WAAK,eAAuB,Y,GAAeT,GAA4BlK,EAAA,cAAe4I,GAAO,sBAAmB/F,IAA7F,MAEzD,OAAO8H,E,mBAIP,IAAIA,EAAe,G,GACf3K,EAAA,cAAe4I,GAAO,QAAtB,cACA5I,EAAA,cAAe4I,GAAO,QAAtB,cACA,MAAc5I,EAAA,cAAe4I,GAAO,WACpC,EAAS5I,EAAA,cAAe4I,GAAO,qBACN,EAAtB5I,EAAA,cAAe4I,GAAO,kBACrB+B,EAAuD,GAD1B,GAA9B,MAAmC,GACA,cAAQ,cAER,cAAQ,aAFsB,Y,GAAeV,GAAyBW,GAAWC,EAAGC,GAAMjI,IAArE,U,GAKrD7C,EAAA,cAAe4I,GAAO,QAAtB,cACN5I,EAAA,cAAe4I,GAAO,QAAtB,cACA5I,EAAA,cAAe4I,GAAO,QAAtB,cACA,MAAW5I,EAAA,cAAe4I,GAAO,sBACjC+B,EAAwD,GAArB,cAAQ,cAAsB,Y,GAAeV,GAAwBc,EAAMlI,IAAtD,KACrD7C,EAAA,cAAe4I,GAAO,QAAtB,eACC+B,GAAiC,cAAQ,qB,GAGvC3K,EAAA,cAAe4I,GAAO,QAAtB,cAAwD5I,EAAA,cAAe4I,GAAO,QAAtB,aAC9D+B,EAA8D,GAA3B,cAAQ,oBAA4B,Y,GAAeV,GAAwBjK,EAAA,cAAe4I,GAAO,sBAAoB/F,IAA1F,U,GACxD7C,EAAA,cAAe4I,GAAO,QAAtB,cACN5I,EAAA,cAAe4I,GAAO,QAAtB,c,MAC0E,GAAvC,cAAQ,gCAAwC,Y,GAAeqB,GAAwBjK,EAAA,cAAe4I,GAAO,eAAe/F,IAArF,K,EAAoG,KAAS,Y,GAAeoH,GAAwBjK,EAAA,cAAe4I,GAAO,sBAAoB/F,IAA1F,KAA9K8H,EAAuR,KAAS,Y,GAAeV,GAAyBjK,EAAA,cAAe4I,GAAO,eAAtB,eAAoC5I,EAAA,cAAe4I,GAAO,uBAAqB/F,IAAhI,U,GACjR7C,EAAA,cAAe4I,GAAO,QAAtB,cACN,MAAS5I,EAAA,cAAe4I,GAAO,WAC/B,EAAS5I,EAAA,cAAe4I,GAAO,qBAE3B+B,EADD3K,EAAA,cAAe4I,GAAO,mBAAM,GAC6B,GAAtB,cAAQ,eAAuB,Y,GAAeqB,GAAyBW,GAAW,EAAG,GAAM/H,IAArE,KAEF,GAApB,cAAQ,aAAqB,Y,GAAeoH,GAAwBjK,EAAA,cAAe4I,GAAO,sBAAmB/F,IAAzF,UAEpD7C,EAAA,cAAe4I,GAAO,QAAtB,cAEA5I,EAAA,cAAe4I,GAAO,QAAtB,cAEA5I,EAAA,cAAe4I,GAAO,QAAtB,eACN+B,EAAwD,GAAtB,cAAQ,eAAuB,Y,GAAeV,GAAwBjK,EAAA,cAAe4I,GAAO,sBAAmB/F,IAAzF,MAE5D,OAAO8H,E,mBAGP,IAAIA,EAAe,G,GACf3K,EAAA,cAAe4I,GAAO,QAAtB,cACA5I,EAAA,cAAe4I,GAAO,QAAtB,cACA,MAAc5I,EAAA,cAAe4I,GAAO,WACpC,EAAS5I,EAAA,cAAe4I,GAAO,qBACN,EAAtB5I,EAAA,cAAe4I,GAAO,kB,GAAQ,GAA9B,MAAmC,GAAnC,C,MACiD,GAAd,WAAK,UAAkB,Q,GAAWO,GAAe0B,EAAIhI,IAAvC,K,EAAsD,KAAS,Q,GAAWsG,GAAe2B,EAAGjI,IAAtC,KAAtG8H,EAA2J,KAAS,Y,GAAeT,GAA6BU,GAAWC,EAAGC,GAAMjI,IAAzE,U,GAEvJ7C,EAAA,cAAe4I,GAAO,SAAQ,kBAAK,G,MACsB,GAAvB,WAAK,mBAA2B,Q,GAAWO,GAAe0B,EAAIhI,IAAvC,K,EAAsD,KAAS,Q,GAAWsG,GAAe2B,EAAIjI,IAAvC,KAA/G8H,EAAqK,KAAS,Y,GAAeT,GAA4BlK,EAAA,cAAe4I,GAAO,sBAAmB/F,IAA7F,S,OAEpH,GAAf,WAAK,WAAmB,Q,GAAWsG,GAAe0B,EAAIhI,IAAvC,K,EAAsD,KAAS,Q,GAAWsG,GAAe2B,EAAIjI,IAAvC,KAAvG8H,EAA6J,KAAS,Y,GAAeT,GAA4BlK,EAAA,cAAe4I,GAAO,sBAAmB/F,IAA7F,W,GAI/J7C,EAAA,cAAe4I,GAAO,QAAtB,cACN5I,EAAA,cAAe4I,GAAO,QAAtB,cACA5I,EAAA,cAAe4I,GAAO,QAAtB,cACA,MAAW5I,EAAA,cAAe4I,GAAO,sBACjC+B,EAAiD,GAAd,WAAK,UAAkB,Y,GAAeT,GAA4Ba,EAAMlI,IAA1D,KAC9C7C,EAAA,cAAe4I,GAAO,QAAtB,eACC+B,GAAiC,WAAK,qB,GAGpC3K,EAAA,cAAe4I,GAAO,QAAtB,cAAwD5I,EAAA,cAAe4I,GAAO,QAAtB,aAC9D+B,EAAkD,GAAf,WAAK,WAAmB,Y,GAAeT,GAA4BlK,EAAA,cAAe4I,GAAO,sBAAoB/F,IAA9F,U,GAC5C7C,EAAA,cAAe4I,GAAO,QAAtB,cACN5I,EAAA,cAAe4I,GAAO,QAAtB,c,MAC8D,GAA3B,WAAK,uBAA+B,Y,GAAesB,GAA4BlK,EAAA,cAAe4I,GAAO,eAAe/F,IAAzF,K,EAAwG,KAAS,Y,GAAeqH,GAA4BlK,EAAA,cAAe4I,GAAO,sBAAoB/F,IAA9F,KAAtK8H,EAAmR,KAAS,Y,GAAeT,GAA6BlK,EAAA,cAAe4I,GAAO,eAAtB,eAAoC5I,EAAA,cAAe4I,GAAO,uBAAqB/F,IAApI,U,GAC7Q7C,EAAA,cAAe4I,GAAO,QAAtB,cACN,MAAS5I,EAAA,cAAe4I,GAAO,WAC/B,EAAS5I,EAAA,cAAe4I,GAAO,qB,GAC5B5I,EAAA,cAAe4I,GAAO,mBAAM,I,MACsB,GAAf,WAAK,WAAmB,Q,GAAWO,GAAe,EAAItG,IAAvC,K,EAAsD,KAAS,Q,GAAWsG,GAAe,EAAGtG,IAAtC,KAAvG8H,EAA4J,KAAS,Y,GAAeT,GAA6BU,GAAW,EAAG,GAAM/H,IAAzE,S,OAE3G,GAAf,WAAK,WAAmB,Q,GAAWsG,GAAe,EAAItG,IAAvC,K,EAAsD,KAAS,Q,GAAWsG,GAAe,EAAItG,IAAvC,KAAvG8H,EAA6J,KAAS,Y,GAAeT,GAA4BlK,EAAA,cAAe4I,GAAO,sBAAmB/F,IAA7F,WAE3J7C,EAAA,cAAe4I,GAAO,QAAtB,cAEA5I,EAAA,cAAe4I,GAAO,QAAtB,cAEA5I,EAAA,cAAe4I,GAAO,QAAtB,eACN+B,EAAqD,GAAnB,WAAK,eAAuB,Y,GAAeT,GAA4BlK,EAAA,cAAe4I,GAAO,sBAAmB/F,IAA7F,MAEzD,OAAO8H,E,qBA6LP,IAAItD,EAAyB,cAAQ,QACrCA,GAA0B,cAAQ,Y,IAClC,IAAIuB,EAAQ,EACLA,EAAM5I,EAAe,mBACrB+C,GACCsE,GAAOkC,GAAsCvJ,EAAe4I,EAAO/F,GACnEwE,GAAOmC,GAA6CxJ,EAAe4I,EAAO/F,GACvE+F,KAAO5I,EAAe,kBAAK,EAA3B,KACCqH,GAAOwC,GAA8BhH,EAAYiC,EAAoB/B,MAGzEsE,GAAOqC,GAA8B1J,EAAe4I,EAAO/F,GAC3DwE,GAAOsC,GAAoC3J,EAAe4I,EAAO/F,GAC9D+F,KAAO5I,EAAe,kBAAK,EAA3B,KACCqH,GAAOwC,GAA8BhH,EAAYiC,EAAoB/B,KAG7E6F,EAAAA,EAAA,I,KAEJ,OAAOvB,E,mBAIP,IAAIsD,EAAe,G,GACf3K,EAAA,cAAe4I,GAAO,QAAtB,cACA5I,EAAA,cAAe4I,GAAO,QAAtB,cACA,MAAc5I,EAAA,cAAe4I,GAAO,WACpC,EAAS5I,EAAA,cAAe4I,GAAO,qBACN,EAAtB5I,EAAA,cAAe4I,GAAO,kB,GAAQ,GAA9B,MAAmC,GAAnC,C,MACoD,GAAjB,cAAQ,UAAkB,Q,GAAWlB,GAAUmD,EAAIhI,IAAlC,K,EAAiD,KAAS,Q,GAAW6E,GAAUoD,EAAGjI,IAAjC,KAApG8H,EAAoJ,KAAS,Y,GAAeV,GAAyBW,GAAWC,EAAGC,GAAMjI,IAArE,U,GAEhJ7C,EAAA,cAAe4I,GAAO,SAAQ,kBAAK,G,MACyB,GAA1B,cAAQ,mBAA2B,Q,GAAWlB,GAAUmD,EAAIhI,IAAlC,K,EAAiD,KAAS,Q,GAAW6E,GAAUoD,EAAIjI,IAAlC,KAA7G8H,EAA8J,KAAS,Y,GAAeV,GAAwBjK,EAAA,cAAe4I,GAAO,sBAAmB/F,IAAzF,S,OAE1G,GAAlB,cAAQ,WAAmB,Q,GAAW6E,GAAUmD,EAAIhI,IAAlC,K,EAAiD,KAAS,Q,GAAW6E,GAAUoD,EAAIjI,IAAlC,KAArG8H,EAAsJ,KAAS,Y,GAAeV,GAAwBjK,EAAA,cAAe4I,GAAO,sBAAmB/F,IAAzF,W,GAIxJ7C,EAAA,cAAe4I,GAAO,QAAtB,cACN5I,EAAA,cAAe4I,GAAO,QAAtB,cACA5I,EAAA,cAAe4I,GAAO,QAAtB,cACA,MAAW5I,EAAA,cAAe4I,GAAO,sBACjC+B,EAAoD,GAAjB,cAAQ,UAAkB,Y,GAAeV,GAAwBc,EAAMlI,IAAtD,KACjD7C,EAAA,cAAe4I,GAAO,QAAtB,eACC+B,GAAkC,cAAQ,qB,GAExC3K,EAAA,cAAe4I,GAAO,QAAtB,cACN5I,EAAA,cAAe4I,GAAO,QAAtB,aACA+B,EAAqD,GAAlB,cAAQ,WAAmB,Y,GAAeV,GAAwBjK,EAAA,cAAe4I,GAAO,sBAAoB/F,IAA1F,U,GAC/C7C,EAAA,cAAe4I,GAAO,QAAtB,cACF5I,EAAA,cAAe4I,GAAO,QAAtB,c,MAC6D,GAA9B,cAAQ,uBAA+B,Y,GAAeqB,GAAwBjK,EAAA,cAAe4I,GAAO,eAAe/F,IAArF,K,EAAoG,KAAS,Y,GAAeoH,GAAwBjK,EAAA,cAAe4I,GAAO,sBAAoB/F,IAA1F,KAArK8H,EAA8Q,KAAS,Y,GAAeV,GAAyBjK,EAAA,cAAe4I,GAAO,eAAtB,eAAoC5I,EAAA,cAAe4I,GAAO,uBAAqB/F,IAAhI,U,GACxQ7C,EAAA,cAAe4I,GAAO,QAAtB,cACN,MAAS5I,EAAA,cAAe4I,GAAO,WAC/B,EAAS5I,EAAA,cAAe4I,GAAO,qB,GAC5B5I,EAAA,cAAe4I,GAAO,mBAAM,I,MACyB,GAAlB,cAAQ,WAAmB,Q,GAAWlB,GAAU,EAAI7E,IAAlC,K,EAAiD,KAAS,Q,GAAW6E,GAAU,EAAG7E,IAAjC,KAArG8H,EAAqJ,KAAS,Y,GAAeV,GAAyBW,GAAW,EAAG,GAAM/H,IAArE,S,OAEjG,GAAlB,cAAQ,WAAmB,Q,GAAW6E,GAAU,EAAI7E,IAAlC,K,EAAiD,KAAS,Q,GAAW6E,GAAU,EAAI7E,IAAlC,KAArG8H,EAAsJ,KAAS,Y,GAAeV,GAAwBjK,EAAA,cAAe4I,GAAO,sBAAmB/F,IAAzF,WAEpJ7C,EAAA,cAAe4I,GAAO,QAAtB,cAEA5I,EAAA,cAAe4I,GAAO,QAAtB,cAEA5I,EAAA,cAAe4I,GAAO,QAAtB,eACN+B,EAAwD,GAAtB,cAAQ,eAAuB,Y,GAAeV,GAAwBjK,EAAA,cAAe4I,GAAO,sBAAmB/F,IAAzF,MAE5D,OAAO8H,E,mBAIP,IAAID,EAAa,G,GASb1K,EAAA,cAAe4I,GAAO,kBAAK,IAAI5I,EAAA,cAAe4I,GAAO,QAAtB,cAC/B8B,GAAiC,cAAQ,YACzCA,GAAiC,cAAQ,U,IAEzB,MAAmC,GAAnC1K,EAAA,cAAe4I,GAAO,gBAAgB,eAAtC,mCAAZ,IAAA9B,EAAY,cACTA,EAAS,QAAT,cACC4D,GAAa,GAAoB5D,EAAS,aAAUA,EAAS,qBAAQjE,GACrE6H,GAAgC,cAAQ,yBAEnC5D,EAAS,QAAT,aACL4D,GAAa,GAAgB5D,EAAS,aAAUA,EAAS,qBAAQjE,GAE5DiE,EAAS,QAAT,cAEL4D,GADAA,GAAa,GAAoB5D,EAAS,aAAUA,EAAS,qBAAQjE,IACN,GAA/B,cAAQ,wBAAgC,Q,GAAW6E,GAAUZ,EAAS,aAAUjE,IAAjD,KAC/D6H,GAAgC,cAAQ,yBAEnC5D,EAAS,QAAT,eACL4D,GAAa,GAAgB5D,EAAS,aAAUA,EAAS,qBAAQjE,IAKzE6H,GAAiC,cAAQ,YAG7C,OAAOA,E,mBAIP,IAAIA,EAAa,G,GAYd1K,EAAA,cAAe4I,GAAO,kBAAK,IAAI5I,EAAA,cAAe4I,GAAO,QAAtB,cAC9B8B,GAAiC,cAAQ,YACzCA,GAAiC,cAAQ,U,IAEzB,MAAqC,GAArC1K,EAAA,cAAe4I,GAAO,kBAAkB,iBAAxC,mCAAZ,IAAA9B,EAAY,cACTA,EAAS,QAAT,aACC4D,GAAa,GAAiB5D,EAAS,aAAUA,EAAS,qBAASjE,GAC9DiE,EAAS,QAAT,cAEL4D,GADAA,GAAa,GAAoB5D,EAAS,aAAUA,EAAS,qBAASjE,IACP,GAA/B,cAAQ,wBAAgC,Q,GAAW6E,GAAUZ,EAAS,aAAUjE,IAAjD,KAC/D6H,GAAgC,cAAQ,0BAEnC5D,EAAS,QAAT,cAGAA,EAAS,QAAT,gBAFL4D,GAAa,GAAgB5D,EAAS,aAAUA,EAAS,qBAASjE,IAO1E6H,GAAiC,cAAQ,YAG7C,OAAOA,E,mBAsEP,I,EAkBA,EACA,EAnBIA,EAAa,GACjB,EAAa5F,EAAmB,Q,OAC7B/B,EAAmB2H,GACtBA,G,cA8CA,I,EAAIA,EAAa,G,GAEC,MAARhG,E,EACN,O,CAEA,MAAgBA,EAAO,aACvB,EAAgBA,EAAO,a,GACpBf,EAAA,uBAAgB0E,EAAA,sBACfqC,GAAgC,cAAQ,qB,GACnC/G,EAAA,wBAAgB0E,EAAA,sBACrBqC,GAAwD,GAAxB,cAAQ,iBAAyB,Y,GAAeT,GAAwB5B,EAAWxF,IAA3D,S,OAExD6H,E,EAA8C,GAAd,cAAQ,OAAe,Y,GAAeT,GAAwB5B,EAAWxF,IAA3D,KAA9C6H,EAAA,EAAwH,KAAS,Y,GAAeT,GAAwBtG,EAAWd,IAA3D,K,EAE5H6H,EAZJ,OAAO,EAhDKM,CAA6BnI,EAAY6B,GAErDgG,I,EADc5F,EAAmB,aAcjC,EAAwC,cAAQ,aAChD,EAAwC,cAAQ,aACtC+C,EACNuC,EAEAC,GAhBJK,G,cAqBA,IAAIA,EAAa,G,GACG,MAAhBJ,EACA,MAAO,GAEX,MAAgBA,EAAe,MAC/B,EAAsBA,EAAe,aAYrC,OAXGC,EAAA,aACCG,GAA4D,GAA3B,cAAQ,oBAA4B,Q,GAAWhD,GAAU8C,EAAY3H,IAA1C,KACvD0H,EAAA,aAILG,GAFAA,GADAA,GAAiD,GAAhB,cAAQ,SAAiB,Q,GAAWhD,GAAU8C,EAAY3H,IAA1C,MACM,GAAtB,cAAQ,eAAuB,Q,GAAW6E,GAAU8C,EAAY3H,IAA1C,MAEA,GAAtB,cAAQ,eAAuB,Q,GAAW6E,GAAU8C,EAAY3H,IAA1C,KAClD0H,EAAA,eACLG,GAAmD,GAAlB,cAAQ,WAAmB,Q,GAAWhD,GAAU8C,EAAY3H,IAA1C,MAGhD6H,EAtCKO,CAAgCpI,EAD1BiC,EAAmB,iBAIrC4F,GAA+B,cAAQ,WAGvCA,GAA+B,cAAQ,a,yBAhqBe,GAAxB,WAAK,oBAA4B,Q,GAAWvB,GAAe0B,EAAIhI,IAAvC,K,EAAsD,KAAS,Q,GAAWsG,GAAe+B,EAAGrI,IAAtC,KAAxG,OAA6J,KAAS,Y,GAAeqH,GAA6BU,GAAWC,EAAGK,GAAMrI,IAAzE,K,yBAGjH,GAAlB,WAAK,cAAsB,Q,GAAWsG,GAAe0B,EAAIhI,IAAvC,K,EAAsD,KAAS,Q,GAAWsG,GAAe+B,EAAGrI,IAAtC,KAAlG,OAAuJ,KAAS,Y,GAAeqH,GAA4BU,GAAWC,EAAGK,GAAKrI,IAAvE,K,yBAqFpG,GAAzB,WAAK,qBAA6B,Q,GAAWsG,GAAe0B,EAAIhI,IAAvC,K,EAAsD,KAAS,Q,GAAWsG,GAAe+B,EAAGrI,IAAtC,KAAzG,OAA8J,KAAS,Y,GAAeqH,GAA6BU,GAAWC,EAAGK,GAAMrI,IAAzE,K,yBAG5G,GAAxB,WAAK,oBAA4B,Q,GAAUsG,GAAe0B,EAAIhI,IAAtC,K,EAAqD,KAAS,Q,GAAWsG,GAAe+B,EAAIrI,IAAvC,KAAvG,OAA6J,KAAS,Y,GAAeqH,GAA6BU,GAAWC,EAAGK,GAAMrI,IAAzE,K,yBAGjH,GAAlB,WAAK,cAAsB,Q,GAAWsG,GAAe0B,EAAIhI,IAAvC,K,EAAsD,KAAS,Q,GAAWsG,GAAe+B,EAAGrI,IAAtC,KAAlG,OAAuJ,KAAS,Y,GAAeqH,GAA4BU,GAAWC,EAAGK,GAAKrI,IAAvE,K,yBAwalG,GAA3B,cAAQ,oBAA4B,Q,GAAW6E,GAAUmD,EAAIhI,IAAlC,K,EAAiD,KAAS,Q,GAAW6E,GAAUwD,EAAGrI,IAAjC,KAAtG,OAAsJ,KAAS,Y,GAAeoH,GAAyBW,GAAWC,EAAGK,GAAMrI,IAArE,K,yBAGvG,GAArB,cAAQ,cAAsB,Q,GAAW6E,GAAUmD,EAAIhI,IAAlC,K,EAAiD,KAAS,Q,GAAW6E,GAAUwD,EAAGrI,IAAjC,KAAhG,OAAgJ,KAAS,Y,GAAeoH,GAAwBW,GAAWC,EAAGK,GAAKrI,IAAnE,K,yBAoC1F,GAA5B,cAAQ,qBAA6B,Q,GAAW6E,GAAUmD,EAAIhI,IAAlC,K,EAAiD,KAAS,Q,GAAW6E,GAAUwD,EAAGrI,IAAjC,KAAvG,OAAuJ,KAAS,Y,GAAeoH,GAAyBW,GAAWC,EAAGK,GAAMrI,IAArE,K,yBAGlG,GAA3B,cAAQ,oBAA4B,Q,GAAU6E,GAAUmD,EAAIhI,IAAjC,K,EAAgD,KAAS,Q,GAAW6E,GAAUwD,EAAIrI,IAAlC,KAArG,OAAsJ,KAAS,Y,GAAeoH,GAAyBW,GAAWC,EAAGK,GAAMrI,IAArE,K,yBAGvG,GAArB,cAAQ,cAAsB,Q,GAAW6E,GAAUmD,EAAIhI,IAAlC,K,EAAiD,KAAS,Q,GAAW6E,GAAUwD,EAAGrI,IAAjC,KAAhG,OAAgJ,KAAS,Y,GAAeoH,GAAwBW,GAAWC,EAAGK,GAAKrI,IAAnE,K,sBCj6BtH,2C,sBAIP,6BACE,8BACC,gCACD,+BACA,6BACJ,0BACJ,uBACG,0B,+DAKQ,qCACC,qGACO,qIACP,oCACA,oCACT,2BACE,0EACO,yHACK,mEACd,wCACO,kD,kEpGawE,OoGKtG,OADKsI,EALyBC,GAAbC,GAAdC,I,EAAsC,Y,sDpGqC/B,E,uBoG7BH,kB,EAAmG,OAAnG,E,+DAC0C,OAA9CC,GAA4B,GAAb,EAAAD,eAAiBH,EAAOK,GADnC,Q,uBAYuG,O,gBAP9C,OAA7DD,GAA2C,IAA3B,aAAc,KAAd,EAAc,MAAAD,eAAiBH,EAAOK,GAOQ,GAAeL,G,EAAO,U,wEAEzB,OAArB,EAAAM,cAAe,IAAEC,G,iBAmBxC,EAAAC,UAAUC,OAAQ,aAAaC,G,0BAG7C,EAAAC,cAAyE,OAAtBC,IAAT,qCAA1C,EAA0C,MAAAC,UAAkB,eAAQ,G,yBvBhCrD,GAsEg4oB,OAAM,GAAiB,QAA+B,kBAAW,cAA2B,KAAc,aAAyB,KAAc,OAArO,KAAkP,QAArjoB,IAA7B,EAAomoB,wB,EuBhG/jpB,OvB2BH,G,yEuBoDMnJ,EAAY,CvBrDA,GAsE+/mB,OAAM,GAAiB,QAAsB,kBAAW,cAA2B,KAAc,aAAyB,KAAc,OAA5N,KAAyO,QAAr0lB,IAApB,EAA22lB,wB,EuBhGrrnB,OvB2BH,G,sDuBuDMoJ,GAAyC,EAAUC,EAAiBf,G,+BAR5E,oBAEuB,MAFvB,W,EAG8B,OAH9B,E,gDAAA,Y,qBAoB8F,OAA1F,IAAA5L,KAAK,EAAAI,W,EAAgCwM,GAApB,EAAAC,qB,UvEtG+B,IAFuB,EAozBpD,EApzBwC,eAozBxB,MAAY,MAAW,YuE5sBrD,iB,uBAYL,I,EAAA,SAA2BvJ,EAA3B,O,G3FKmG,sBAmerF,IAAQ,W,GAAtB,EAAc,E,GAAT,MAAS,E,GAAA,Q2F5Os7Q,KAAI,GA3Pj6Q,OAAMwJ,G3FwepC,CACD,ENplBm0mB,EOqL/umB,UAqF0kR,EAAG,G,eDwUzqR,EAAc,GAId,EAAO,E2F1eP,OAAWxJ,EADgB,EAKhB,EALgB,EAKX,I,wB1EwI0C,IAAV,GApI3C,G0ECuB,GAEvByJ,G,cAtBL,MAAW,IAAA/M,KAAKgN,GAChB,OAAW1J,EACP0C,EAEKiH,GAALjH,GAiBGkH,CAAiBC,GAAQ7J,GACTA,G,iBAOvB,OAAO,IAAAtD,KAAKgG,EAAK5F,UAAYgN,EAAjB,iB,kB1E0H8C,IAAV,GAxHa,G0EIxC,OAAO,K,cAC5B,G,EAAeC,E,EAAY,iB,GAAN,E,EAAA,E1E4nClB,O,E0E5nCkB,M1E4nClB,GAAsE,GAAtE,aAA0F,GAA1F,a0E3nCCC,EAAmBC,GAAZC,EAAA,cAAS,IACC,EAAAC,EAATD,EAAmB,G,EAAI,MAAd,EAAc,KAAAD,GAAd,G,GAAT,QAAkC,OAAoC,GAA5BD,EAAA,iCAAtD,MAAY,E,KhGvCohF,GAAT,KAAiB,IA1GpiF,MAAM,GAAiC,GgGkJX,wBAChCA,GAAQI,EAAW,GACI,MAAAD,EAATD,EAAmB,G,EAAI,MAAd,EAAc,KAAAD,GAAd,G,GAAT,QAAkC,OAAoC,GAA5BD,EAAA,iCAAxD,MAAc,E,KhG1CktF,GAAX,KAAmB,IA1GpuF,MAAM,GAAiC,GgGqJT,0BAClCA,GAAQK,EAAoB,KACL,MAAAF,EAATD,EAAmB,G,EAAI,MAAd,EAAc,KAAAD,GAAd,G,GAAT,QAAkC,OAAoC,GAA5BD,EAAA,iCAAxD,MAAc,E,KhG7C65F,GAAX,KAAmB,IA1G/6F,MAAM,GAAiC,GgGwJT,0B,OAClCA,GAAQM,EAAyB,MACvB,MAAPF,GAAsB,MAATC,EACyB,GAA5BL,EAAA,iCAAD,eAC6BO,GAA5B,GAAAH,EAhBc,QAef,eAEgCG,GAA/B,GAAAF,EAhBe,OAkBQ,GAA5BL,EAAA,iC,uBC0ES,EAH+B,iCAG/B,gBDtEjB,EC6GgD,KAAW,MAAM,GvEpIxD,oCsEwBLQ,EtEzBM,EA3DgD,gBAAa,EuE8J9D,IAAc,KDzEvB,EC2GgD,KAAW,MAAM,GA/BhE,GD3EDA,GAAoB,KAANJ,GC2EA,IDpDVK,GCmF+D,EAAnB,KAAW,MAAM,GDnFhDL,EAAK,WAClBM,EAvBsB,EAuBA,QACtBC,EAAYX,EAAI,OAEV,IAAPI,IACCK,EAAaL,EAAK,WAGZ,IAAPA,IACCK,EAAW,IAEN,IAANT,IACCW,EAAU,IAEA,IApCY,IAqCtBD,EAAa,IAQjB,IAAIE,EAAkB,GAAGD,EAAUF,EAAWC,EAK9C,OAHG1K,IACC4K,EAAkBD,GAEfC,E,qBCkEL,EAHkF,iCAGlF,gBD9DF,ECmDgD,KAAW,MAAM,GvEzF/C,oCsEwCdJ,EtEzCR,EAtG8D,gBAAa,EuE+Md,IAAc,KD/DvE,ECgDgD,KAAW,MAAM,GAkBb,GDhEpDA,GAAoB,KAANJ,GCgEmD,ID/DjE,EC6CgD,KAAW,MAAM,GDzC7DK,EAAWL,EAAMS,WACjBH,EAAaL,EAAQQ,WACzB,EAAcb,EAAKa,WAChBT,EAAM,KACLK,EAAY,IAAGL,GAEhBC,EAAQ,KACPK,EAAc,IAAGL,GAErB,IAAIO,EAAqBD,EAAQ,KAAIF,EAAS,KAAIC,EAAW,IAQ7D,OAPG1K,IAEK4K,EADK,IAANZ,EACoB,QAECW,EAAO,SAG5BC,E,iBAIN,MAAgD,EAAbE,EAApBpI,EAAKqI,cAAwB,IAAS,GAC1C,GAARC,EAAoB,KAAZ,O1ElGkE,G,qBAhF3D,aA0E6B,GA1E7B,I,GAAnB,GAAc,E,GAAT,MAAS,E,GAAA,IAAK,EAAL,GACL,GAAU,GAyE6B,EAzExB,IAAf,CACD,EAAO,GAwEiC,EAxErB,EAAO,GAwEc,I,eA1EhD,GAAc,GAId,EAAO,GAsEsE,OAA7B,EAMkB,IA2E5B,GA3EM,EAAsB,O,M0EqGjE,I,EAAIZ,EAAmDH,GAAT,EAAba,EAApBpI,EAAKqI,cAAwB,IAAS,KACnD,EAAkD,EAAZD,EAApBpI,EAAKqI,cAAwB,GAAQ,IACnDE,EAAQ,KAeZ,OAdIb,GAAQ,KACRA,EAAAA,EAAO,GAAP,EACAa,EAAQ,MAEA,IAATb,IACCA,EAAQ,I,EAEaA,EAAM,GAC1B,IAAGA,EAEJA,EAAMS,WAIA7K,EACNgL,EARJ,EAYc,IAAEE,EAAU,IAAED,EAAI,QAAMD,E,iBAIvC,OAAyC,GAAjCG,EAAMrO,UAAUsO,EAAMtO,W,iBAK7B,MAAU4F,EAAK2I,aAAaR,WAExBS,EAAY,G,OADJ5I,EAAK6I,e,KAGb,EACID,EAAa,Q,WAEjB,EACIA,EAAa,Q,WAEjB,EACIA,EAAa,O,WAEjB,EACIA,EAAa,Q,WAEjB,EACIA,EAAa,M,WAEjB,EACIA,EAAa,M,WAEjB,EACIA,EAAa,Q,WAEjB,EACIA,EAAa,O,WAEjB,EACIA,EAAa,Q,WAEjB,EACIA,EAAa,S,WAEjB,GACIA,EAAa,Q,WAEjB,GACIA,EAAa,QAGrB,MAA8B,MAANE,EACnB,MAEDA,E,GAEDxL,EACC,OAAUyL,EAAO,IAAEH,EAEnB,IAOA,EAPIlB,EAAQ1H,EAAKgJ,cACjB,EAAchJ,EAAKiJ,gBAyBnB,OAlBa,IAATvB,GACAa,EAAQ,MACRb,EAAQ,IACM,GAATA,GAAAA,GAAY,EACjBa,EAAQ,MACM,GAATb,GAAAA,GAAY,GACjBa,EAAQ,MACM,IAATb,GAAAA,GAAa,IAClBa,EAAQ,QAEI,IADZb,EAAAA,EAAS,GAAT,KACeA,EAAAA,EAAO,GAAP,IACD,IAATA,GAAAA,GAAa,IAClBa,EAAQ,MACRb,EAAAA,EAAS,GAAT,IAEAa,EAAQ,MACRb,EAAAA,EAAO,GAAP,GAEMqB,EAAO,IAAEH,EAAS,IAAEL,EAAI,IAAEb,EAAK,KAxBdC,EAAS,GAC/B,IAAGA,EAEJA,EAAQQ,YAqByC,O,6ME1XzB,0CACF,sCACG,sDACJ,oCACI,4C,+DAIH,sCACQ,mDACI,wEACJ,sDACI,8D,+DAhBd,0CACS,4DAmBR,4CACV,wBACK,kCACG,wCACF,oCACW,0DACF,sDACI,8DACX,wCACK,kDACF,8CACD,4CACC,8CACG,oDACF,gDACH,0CACA,0CACG,gDACI,wDACN,4CACF,wCACA,wCACE,2CAEa,sEAEjB,0BAAAhO,GAbQ,yBACF,sBAFD,qBAOD,sB,6DAeY+O,S,WAAS,EAAAC,eA3BZ,8BA2ByE,gCAAtE,EAAsE,K,oBAE5C3C,GAAnC,KAA0BC,UAAsC,gBAAhE,EAAgE,K,oBAC7DyC,S,WAAS,EAAAC,eA5BZ,wBA4BoE,yCAAjE,EAAiE,K,oBAK9DD,SAASC,eAAgB,YAAsC,OAAL,+BAA1D,EAA0D,MAAAhC,M,0BAEtDiC,GAAa,EAhE3B,oBAgEoE,qCAAtD,EAAsD,K,0BAC9CA,GAAa,EAhE1B,6BAgE4E,qCAA/D,EAA+D,K,qBAI1EA,GAAa,EAAC,cAAsD,MAAT,cAAV,+BAAjD,EAAiD,MAAAjC,M,qBACjDiC,GAAa,EAAC,cAAsD,MAAT,cAAV,+BAAjD,EAAiD,MAAAjC,M,0BAEhDiC,GAAa,EA1CvB,sBA0C2E,OAAP,8BAA1D,EAA0D,MAAAC,Q,0BAC5DD,GAAa,EAzCrB,sBAyCyE,OAAP,8BAA1D,EAA0D,MAAAC,Q,0BACvDD,GAAa,EAzCrB,yBAyCmE,qCAA3D,EAA2D,K,0BAC7DA,GAAa,EAzCrB,uBAyCiE,qCAAzD,EAAyD,K,0BAC5DA,GAAa,EAzCrB,oBAyC8D,qCAAtD,EAAsD,K,0BACrDA,GAAa,EAzCtB,oBAyC+D,qCAAtD,EAAsD,K,0BACnDA,GAAa,EAzCtB,uBAyCkE,qCAAzD,EAAyD,K,0BAE3DA,GAAa,EAzCtB,qBAyCgE,qCAAvD,EAAuD,K,0BAI9CA,GAAa,EA5DnC,iBA4D6E,yCAAvD,EAAuD,K,qBnGtD86I,MmG6D5+IE,cAAhC,2BAA0F,OAA1B,MAAhE,GAAyE,GAAzE,OAA+EC,GAAf,KtGiDm6B,E,4BsGrCl9BH,GAAa,EAvGV,oBAwGzB,OCo9IgF,GDr9IhF,8BAAsB,EAAtB,MCsEL,QAAQ,cDrEH,wBAAO,EAAP,K,4BAIsBA,GAAa,EA3GD,6BA4GlC,OC+8IgF,GDh9IhF,8BAAsB,EAAtB,MCwEA,QAAQ,cDvER,wBAAO,EAAP,K,qBAM8B5C,GAAvB,MAAkBgD,MAAzB,OAAO,GAAP,MAAO,EAAP,K,qBAKsChD,GAA/B,MAA0BgD,MAAjC,OAAO,GAAP,MAAO,EAAP,K,0BAG+CJ,GAAa,EAvH/B,oBAuH4E,qCAA1D,EAA0D,K,0BAC5DA,GAAa,EAvH/B,kBAuH0E,qCAAxD,EAAwD,K,0BACvDA,GAAa,EAjHhC,kBAiHmF,qCAAhE,EAAgE,K,0BAC5DA,GAAa,EAjH5B,uBAiHwF,sCAAzE,EAAyE,K,0BAE9EA,GAAa,EAzHhC,iBAyH2E,sCAAxD,EAAwD,K,0BAChDA,GAAa,EAlH/B,0BAkH2F,sCAAzE,EAAyE,K,0BAEnFA,GAAa,EAtHrB,uBAsHQ,iDAAkF,OAAL,MAA7E,EAA6E,KAA7E,EAA6EjC,M,0BAC9EiC,GAAa,EAxH5B,kBAwH+E,qCAAhE,EAAgE,K,uBzG+IhG,QAyiCG,OAsFD,EAtFT,EAsFS,mCAAX,MAAW,cAEA,GAAZ,EyG7wCJjP,GAAW,IAghCW,GAhhCS,GAghCT,M,KA/gCzB,OzG8wCU,E,eyGzwCgG,OAA1DA,GAAO,CAAAA,GAAO,OAAe,QAAc,Q,eACb,OAA1B,G,oBzGuIR,QAuiCxB,OAsFD,EAtFT,EAsFS,mCAAX,MAAW,cAEA,GAAZ,EyG1wCJA,GAAW,IA6gCW,GA7gCQ,GA6gCR,M,KA5gCzB,OzG2wCU,EyGxwCiD,K,oBAqC3C,QACEmC,OAAOmN,OAA6B,cAAQ,gCAA+B,OAC5D,WAAK,gCAA+B,OACpC,WAAK,kBAAiB,OAAO,KAI/CC,K,qBAIZC,GAAA,G,EAAO,O,qEAYPC,EAAgBC,SAChB,WAAqB,MAArB,MAAqBA,S,WACJ,I,EAAA,EzG8aE,K,EyG9anB,MzG8aW,kBAAW,gBAAK,GAAQ,KyG9aF,QAAhB,EAAgB,K,uBApHjCT,GAAa,EA5C8B,kCA4C0B,sCAArE,EAAqE,KAoHpC,CAAhB,GAA6C,MAA7B,MAA6BS,S,oCA4BnC,MAAvB,MACA,KAAiB,kBAAO,E,GADxB,M,UzG6KgB,W,MAsyChB,OAAsB,iBAAW,GAAO,M,KAC5B,0C,GyGl9C+B,MAAjB,GzGk9Cd,eAAU,CAAoB,GAAO,E,QACrD,GAAO,G,EyGn9Cc,E,KACnB,YAEwBC,GAA1B,M,EAAgC,O,6EzBhLC,GAiEi8J,OAAI,GAAiB,QAAvF,MAA4xI,M,EyBhGrqS,OzB+BwC,K,2D2B4G5B,qB,6CAgHO,O3B3Jq0B,EAAjO,KAAyQ,EAAlO,KAjEppB,GAiEwyB,OAAO,GAAiB,eAA2B,MAAb,EAAa,QAAb,GAA2B,aAAyB,MAAZ,EAAY,QAAZ,GAA0B,OAArO,KAAkP,OAAa,MAAN,EAAM,QAAN,GAAoB,QAAxN,OAAg/S,K,kByBhG1tU,U,sDzB+BwC,e2BsBmU,wB,KFqMlYC,CAAA,G,EAA+B,O,sEzB3NE,GAiEi8J,OAAI,GAAiB,QAAy5K,aAAf,M,EyBhG12U,OzB+BwC,G,2D2B4G5B,qB,sCJ2Ny5F,EAAM,cAzT97F,GAyTw7F,iCAzTr6FxD,gBACV,C,GACK,MAAV,EAAgB,GAAO,K,WACvB,6BEqQ2E,GAnRG,EAmRNJ,GAAW,mB,CFrQjD,EAAO,E,QAC7C,EAAS,EAAOI,cEoQpB,I,EAAA,EAA+C,EAC/C,EAAgB,MAALyD,EAAK,KAALA,EAAK9D,cAAe,KAC/B,EAAiB,MAAL8D,EAAK,KAALA,EAAK9D,cAAe,SAC1B,QAAN+D,EAAM,KAANA,EAAMC,YAAa,MAAb,GAAmB5N,OAAO6N,UAAUC,UAAUC,UAA9C,G,KACY,OAAX,MAAPC,EAAO,KAAPA,EAAOC,atG3M4gV,YAAmB,U,WsG4MtiVjO,OAAOkO,Y,EAAW,U,8CAIf,K,4BzB/R8B,GAiEixM,OAAK,GAAiB,UAAsvL,sBAAruL,UAAmB,KAAc,SAAiB,KAAc,QAA7J,OAAmzL,M,EyBhGxhY,OzB+BwC,K,6EyB0TpB,MAA1BC,GAA0B,GAA1BA,GzB/TD,GAK4D,OAAI,GAAiB,QAiE09Z,OAAf,EAhEnia,wB,EyBnCsC,O,wEzB6B/B,GAK4D,OAAI,GAAiB,QAiEkuf,oBAAf,EAhE3yf,wB,EyBnCsC,OzB8BjD,G,iDADkB,GAK4D,OAAI,GAAiB,QAiE0zgB,oBAAf,EAhEn4gB,uB,kByBnCsC,U,sDzB8BjD,KADkB,GAK4D,OAAI,GAAiB,QAiEw5hB,oBAAf,EAhEj+hB,uB,kByBnCsC,U,sDzB8BjD,K,cADkB,GAK4D,OAAI,GAAiB,QAiEgooB,OAAf,EAhEzsoB,uB,kByBnCsC,U,sDzB8BjD,KyBwcEC,CAAkB,EAAAD,GzBzcF,GAK4D,OAAI,GAAiB,QAiEwokB,8BAAf,EAhEjtkB,uB,kByBnCsC,U,sDzB8BjD,K,uByB8eE,EAA8C,YAAxB,KAAqD,cAAQ,gBAAyC,WAAK,gB5E0DxG,UA+HuF,E+EnuBxE,GAa29sB,W/EstB76sB,kBAAQ,EA7H5F,I4E3DF,EAAAtD,MAAc,EACd,I,EAAA,E,clF1d8G,OAA7B,OAAkB,EAAM,GkF0d/E,CAAAwD,EAAc,mBAAkBA,EAAc,2B,IAExD,MAAAC,GAAU,EAAAzD,OAAQ,QAAlB,EAAkB,KAAlB,EAAkB,+BAA9B,EAA2D,MAA7B,EAA6B,KAA7B,EAA6B,gB,GlG7a6tnB,MAAR,IAAwB,EAAR,mBA1GhynB,MAAM,GAAiC,GkGwhBgB0D,I,EACvD,G,6CAEE,EAAAC,Q,EAAF,QAAaD,EAAb,EALJ,EAAAE,kBAAA,G,uBzBlfgB,GAK4D,OAAI,GAAiB,QAiEourB,8BAAf,EAhE7yrB,wB,EyBnCsC,OzB8BjD,G,wEADkB,GAK4D,OAAI,GAAiB,QAiE2ouB,2CAAf,EAhEptuB,wB,EyBnCsC,OzB8BjD,G,wEADkB,GAK4D,OAAI,GAAiB,QAiEsixB,2CAAf,EAhE/mxB,wB,EyBnCsC,OzB8BjD,G,0EyBgpBkC,MAA5BN,E,sBA2PA,aAEqC,MAFrC,a,iBAGsB,O,sDAAA,IAHtB,YA1PA,GAAUA,EAAV,M,EAAoC,Y,gDAApC,GAKA,MAltB4C,E,kBAktBD,U,sDAAA,K,qBzBvpB/B,GAsEq/Y,OAAO,GAAiB,eAA2B,KAAc,aAAyB,KAAc,OAAxN,KAAqO,OAAa,KAAc,QAA01b,oCAAlB,EAAtzb,wB,EyBnGxnZ,O,iDzB6B/B,GAsEq/Y,OAAO,GAAiB,eAA2B,KAAc,aAAyB,KAAc,OAAxN,KAAqO,OAAa,KAAc,QAA2ic,kBAAlB,EAAvgc,uB,iByBnGxnZ,O,sDzB8BjD,I,uBAImC,GAiEgkmB,OAAE,GAAiB,QAAzF,MAA45P,M,EyBhGh61B,OzB+BwC,G,2D2B2Y/B,2B,4B3B3YC,GAiE0+yB,OAAM,GAAiB,QAA7F,MAAsrD,M,EyBhGpm2B,OzB+BwC,K,2D2BohBT,uB,4B3BphBrB,GAiE0+yB,OAAM,GAAiB,QAAwvF,aAAjB,M,EyBhGlv4B,OzB+BwC,G,2D2BohBT,uB,gC3BphBrB,GAiEutyB,OAAG,GAAiB,QAAxE,MAAuxH,M,EyBhGp85B,OzB+BwC,O,2EyB4uB/D,I,EAAA,EAAqC,SAA1B,KzB5uBsB,GAiEutyB,OAAG,GAAiB,QAAxE,MAA00I,M,EyBhGv/6B,OzB+BwC,S,iFAA9B,GAiEutyB,OAAG,GAAiB,QAAxE,MAAm6O,M,EyBhGhlhC,OzB+BwC,O,2EAL/C,GAsEg7K,OAAG,GAAiB,QAA3E,MAAmq3B,EAAtk3B,wB,EyBnGv7K,O,sEzB6B/B,GAsEg7K,OAAG,GAAiB,QAA3E,MAAuz3B,EAA1t3B,wB,EyBnGv7K,O,yGAk6B/C,KAAUO,E,sBAAkB,c,sDAAA,SAxB5B,GAAUA,EAAkBC,EAAcC,G,EAAc,E,EAAA,E,EAAA,Y,8EAYxD,KAAUT,EAA0BU,G,EAAqB,Y,4EAwBzD,KAAmC,GAAzBV,I,EAAqC,c,0EAc/C,KAAoBO,EAApB,M,EAAsC,U,gDAAtC,G,qBIvcsuG,O7BxdttG,GAsEq/Y,OAAO,GAAiB,eAA2B,KAAc,aAAyB,KAAc,OAAxN,KAAqO,OAAa,MAAN,EAAM,QAAN,GAAoB,QAAqitB,UAA5C,EAAv+sB,wB,EyBnGxnZ,O,sEIqf+qH,O7Bxd9sH,GAsEq/Y,OAAO,GAAiB,eAA2B,KAAc,aAAyB,KAAc,OAAxN,KAAqO,OAAa,MAAN,EAAM,QAAN,GAAoB,QAA6huB,UAA5C,EAA/9tB,wB,EyBnGxnZ,O,sEIqfilI,O7BxdhnI,GAsEq/Y,OAAO,GAAiB,eAA2B,KAAc,aAAyB,KAAc,OAAxN,KAAqO,OAAa,MAAN,EAAM,QAAN,GAAoB,QAA+7uB,SAA5C,EAAj4uB,wB,EyBnGxnZ,O,sEIqf6rJ,O7Bxd5tJ,GAsEq/Y,OAAO,GAAiB,eAA2B,KAAc,aAAyB,KAAc,OAAxN,KAAqO,OAAa,MAAN,EAAM,QAAN,GAAoB,QAA2iwB,SAA5C,EAA7+vB,wB,EyBnGxnZ,O,sEEkpB82N,O3BhnB53N,GAiEwyB,OAAO,GAAiB,eAA2B,KAAc,aAAyB,KAAc,OAArO,KAAkP,OAAa,MAAN,EAAM,QAAN,GAAoB,QAAwwoC,SAA5C,M,EyBhG9pqC,O,2DEqD2W,wB,0BA0lBurO,O3BhnBxhP,GAiEwyB,OAAO,GAAiB,eAA2B,KAAc,aAAyB,KAAc,OAArO,KAAkP,OAAa,MAAN,EAAM,QAAN,GAAoB,QAAo6pC,SAA5C,M,EyBhG1zrC,O,2DEqD2W,wB,sCJiTgj7B,EAAM,cAzTp77B,GAyT867B,6BAzT357BzE,gBACV,C,GACK,MAAV,EAAgB,GAAO,K,iBACvB,0B,MEd8E,EAogCvBJ,G,OAAG,KAxiCtC,mBAwiCsC,U,GFt/B3C,E,MAAmB,EAAO,E,QAC7C,EAAS,EAAOI,cEq/BgF,OAAF,GAAjE,G,iCFhsB0h8B,EAAM,cAzT7j8B,GAyTuj8B,6BAzTpi8BA,gBACV,C,GACK,MAAV,EAAgB,GAAO,K,WACvB,iC,CAAkC,EAAO,E,QAC7C,EAAS,EAAOA,cEs/BiF,OAAF,GAAlC,G,eAGjE6E,GAAiCC,GACjCC,GAAcD,G,eASd,MAAoC,GAAfA,GACrB,GAAuB,GAAR1N,EAAf4N,MAAwE,IAAvBA,EAAe,oBACjD,MAAA9D,EAAf8D,EAAyB,GAAI,QAAd,EAAc,QAAd,GAAf,MAA6B,E,KAA7B,GAA6B,GAA2B,G,eAIxD,MAAoC,GAAfF,GACrB,GAAuB,GAAR1N,EAAf4N,MAAgF,IAAvBA,EAAe,oBACzD,MAAA9D,EAAf8D,EAAyB,GAAI,QAAd,EAAc,QAAd,GAAf,MAA6B,E,KAA7B,GAA6B,GAAmC,G,uBAeb,GAAfF,GFj9BmCtE,GAAvBE,GAAP,IAAAjN,MAAgDsD,G,IEi9BzF,IACwB,EAAe,GAAf+N,GAAA,kC,IAAnB,IACiB,EAAgBG,GADd,eACF,oC5E70B6B,G4E60B7B,c5EvDV,OAtxBgD,M,gC4E41B5D,IAEA,EACA,EACA,EACA,EALA,EAAgC,GAAfH,GACjB,EAAgBI,EAAA,cAAWpI,GAK3B,EAAY,EAAU8D,M5E12BoC,IAAV,GA6yB7C,I4E+DCuE,EAAM,EAAUA,IAChBC,EAAM,EAAUA,IAChBC,EAAgCC,EAAXJ,EAAgBpI,EAAQ,EAAb,GAChCyI,EAA4BC,EAAXN,EAAgBpI,KAEjCqI,EAAMvE,EACNwE,EAAMxE,EACNyE,EAAgCC,EAAXJ,EAAgBpI,GACrCyI,EAA4BC,EAAXN,EAAgBpI,EAAQ,EAAb,IAEN,MAAmBmI,GAAnBI,GAAA,gB,OAAA,mBAArB,IAAAI,EAAqB,c,GACtBA,EAAkBL,IAAMA,E5E/2BuB,GA4yBpD,EAAkB,OA5yB2C,E4Eg3Bd,QAExB,MAAAG,EAAA,gB,OAAA,mBAAjB,IAAAG,EAAiB,c,GAClBA,EAAcP,IAAMA,E5En3B2B,GA6yB3B,EAAc,OA7yBsB,E4Eo3BlB,SA/B1C,CACIQ,GAAmBC,GAClB,GAAe,GAAfC,GAAQD,IAAiC,GAAKE,EAFnD,G,eAsDA,I,EAAA,EAAgC,GAAfhB,GACjB,EAtmCmG,e,EAA3DjC,GAsmCvBiC,EAtmCqC,yBAAmC,kBAAjD,EAAiD,MAAAlE,MAumCzF,EAAgC,GAAfkE,G,GACb/N,GAAcgP,EAAY,CAC1BC,GAAiBlB,GAAgB,GACjC,GAAe,GAAfA,IAA2C,GAC3C,GAAe,GAAfA,IAAmD,G,IACjC,MAAgCmB,GAAjB,GAAfnB,IAAA,mCAAb,MAAa,cACd,EAAeoB,GAAkB,EAAUtF,MAAO7J,GAClD,EAAamP,GAAkB,EAAUf,IAAKpO,GAC9C,EAAamP,GAAkB,EAAUd,IAAKrO,GAE9C,EAAwBA,EAAxB,UACA,OAAiBoP,EAAc,aAE/B,QAAkBC,EAClB,MAAgBC,EAChB,MAAgBC,EAGpBxB,EAAejF,UAAUC,OAAQ,YAAY/I,G,KAC7C+N,EAAejF,UAAUC,OAAQ,iBAAiB/I,G,KAClD+N,EAAejF,UAAUC,OAAQ,YAAW,G,KAExCiG,GACAlB,GAAiCC,Q,GAE9B7N,EAAY,C,IACD,MAAgCgP,GAAjB,GAAfnB,IAAA,mCAAb,MAAa,cACd,EAAeoB,GAAkB,EAAUtF,MAAO7J,GAClD,EAAamP,GAAkB,EAAUf,IAAKpO,GAC9C,EAAamP,GAAkB,EAAUd,IAAKrO,GAE9C,EAAwBA,EAAxB,UACA,OAAiB,EAAc,aAE/B,QAAkB,EAClB,MAAgB,EAChB,MAAgB,EAEpB+N,EAAejF,UAAUC,OAAQ,aAAY,G,KAC7CgF,EAAejF,UAAUC,OAAQ,iBAAgB,G,KACjDgF,EAAejF,UAAUC,OAAQ,YAAW,G,KAE5CkG,GAAiBlB,GAAgB,GACjC,GAAe,GAAfA,IAA2C,GAC3C,GAAe,GAAfA,IAAmD,I,qBAKrC,MAAe,GAAfA,GAAA,kC,IAAb,IACa,EADA,cACA,gDACJyB,SAAWC,E,IAGH,MAAe,GAAf1B,GAAA,kC,IAAjB,IACa,EADI,cACJ,gDACV,UAA8B0B,EAGtCC,GAAc3B,EAAgB0B,G,qBzG+PI,IAkUlB,EAlUkB,GAJjC,EAAe,uBAIN,iBAkUM,mCAAX,MAAW,cyG/XilK,EA3LrlK3G,UAAUC,OAAQ,iBAAiB0G,G,SzG2PjD,SA+T+B,EAjUY,iBAAkB,UAmB9C,KAAa,KAAwB,KAuErC,EAvEN,EAuEM,mCAAR,MAAQ,cyG3O8B,+B,UAnG3B,WAAiBA,EzG+U7B,EAAY,iB,kCA+6ChB,EyGxvDI7S,EzFtrCkC,Kb0Ems4C,EAA2B,GAAU,GAA/D,GAA4E,OAAe,EAAkB,GAA7G,GAAiI,EAAoB,SAAK,GAA1J,GAAwK,eAAuB,EAAmB,SAAK,GAAvN,GAAmO,e,GAA4B,GAA/P,GAA+P,C,IAA2D,MAAmB,SAAK,EAAE,EAAE,GH42Cl/4C,KAXb,GAYzB,KAAa,KAAwB,KAuErC,EAvEN,EAuEM,mCAAR,I,EAAA,EAAQ,cyG3TD,MAAAI,GACgC,QAAd,GA+Ea,G,KA9ED,SAAd,GA8Ee,G,KA7ED,SAAd,GA6Ee,G,KA5ED,YAAd,GA4Ee,G,UA1EuB,GAA7BsQ,GAAc,GA0ER,GA1EiBzD,QAChC,GzGqTxB,EAAY,WAAI,G,KGr7Cgi5C,MHs7C7i5C,EGt7Ckp6C,MAAV,EAAU,sB,GAAxB,GAAc,E,GAAT,MAAS,MAAU,EAAV,EAAuC,EAAM,IAAwB,gBAAU,GAAV,aAA6B,gBAAU,EAAM,EAAhB,GAAmB,4BAAnI,GAAc,GAA4K,gBAAU,GAAG,QAAb,eAAsC,EAAqB,gBAAU,GAAG,qBAAgC,GAAQ,G,IAAkC,2CAAP,MAAO,cAA+B,EAAI,QAAJ,c,EAAiD,E,EAAS,OAAM,EAAI,aAAW,EAAI,sBHo2F/j7C,YAAa,GAAa,sBACnB,iBAAO,G,KACd,EAAO,WAAI,G,KGt2Fkh7C,EHu2Fth7C,GGv2F0l7C,EAAI,QAAJ,cAAkD,GAAY,EAAyB,EAAc,EAAI,cAAmC,EAAI,QAAJ,eAA2D,EAAa,EAAI,mB,SHw4Cty7C,KAvCmB,GAYzB,KAAa,KAAwB,KAuErC,EAvEN,EAuEM,mCAAR,I,EAAA,EAAQ,cyG/RD,SACgB,IAAAnN,KAAS,GAmDM,GAnDSiT,eAC1B,IAAAjT,KAAS,GAkDQ,GAlDKiT,gBzG8R5C,EAAY,WAAI,G,KGr7C027C,EHs7Cv37C,EGt7Csn8C,GAAQ,GAAiB,MAAwD,GAA2B,EAAqB,GAAU,GAAzjE,GAAkkE,OAAoB,GAAU,GAAhmE,GAA0mE,OAAoB,E,uBsG7Dhy8C7D,GAAa,EAzCtB,2BAyC+E,OAAP,8BAA/D,EAA+D,MAAAC,QtG6Dmw8C,CAAhqE,GAA6rE,GAA7rE,GAAqtE,EAAyB,OAA2B,EAA+B,EAA8B,GAAU,GAAh1E,GAA21E,OAAwB,GAAn3E,KAAw5E,EAAmB,KAAmC,GAA98E,IAA2+E,G,YsG3Dxm9C,O,KAAF,GAAnCD,GAAa,EA7D5B,sBtGwH4p9C,CAA3+E,IAAygF,I,uBsG1D7q9CA,GAAa,EA3D5B,mBA2DwE,yCAAzD,EAAyD,KtG0Dyr9C,CAA9kF,IAA8kF,UAA2B,EAAO,c,uBsGzDvx9CA,GAAa,EA7D5B,gBA6DqE,yCAAtD,EAAsD,KtGyDw09C,CAAvtF,IAAutF,UAAwB,EAAO,U,cG9Gp00C,MmG8DpnJ,cAAgDjC,EtGgD+h+C,CAA74F,EAA65F,EAAO,esG2rCnn+C+F,K,sBzG6OD,OA3Dc,KAAa,KAAwB,KAuErC,EAvEN,EAuEM,mCAAR,I,EyGrPoD,KAAb,GzGqP/B,gBACT,EAAY,WAAI,G,KyGtPpB,MzGuPO,EyGtPP,EAAUC,GAA0B3L,GACP,G,iBAlxCiB0H,S,WAAS,EAAAC,eAlClB,4BAkCuF,kDAA9E,EAA8E,KAkxC5H,cAA4CrH,EAC5C,I,MAKA,E,IALA,E,gBJzTA,IAAIsL,EAAoB5L,EAAA,cAAY,GAAZ,cAAe,GAAG,aACtC6L,EAA6B/L,EAAfE,EAAA,cAAY,IAAU,WAC3B,EAAAA,EAAA,mCAAR,IAAA8L,EAAQ,cACLA,EAAA,cAAK,GAAG,aAAUlT,UAAWgT,EAAkBhT,YAC/CgT,EAAoBE,EAAA,cAAK,GAAG,cAC5BA,EAAA,cAAU,GAALA,IAAgB,WAAQlT,UAAYiT,EAAcjT,YACvDiT,EAAqB/L,EAALgM,GAAY,YAEpC,MAAgB,OAAMF,EAAmBC,GAEzC,EAA0F,IAA5EA,EAAcjT,UAAUgT,EAAkBhT,WAA3C,iCAEb,ErFv9BoD,KqFw9BzC,I,GAAX,GAAemT,E,GAAX,IAAAzE,EAAO,UACP,MAAgBtN,GAAcgS,EAAU,aAAW,GAAC1E,GAAD,kCAChD2E,EAAW,mBAAKF,EAAM,EAAtB,KlFxwB+r3C,EA1Pjs3C,WA0P6s3C,G,YkFswBlt3C,IAAeA,G,IAOf,MrF/9BoD,KqFg+BvC,EAAA/L,EAAA,mCAAR,MAAQ,cACT,ErFj+BgD,KqFm+BvC,I,GAAT,EAAiB+L,E,GAAb,IAAA/S,EAAK,UACL,MAAaiT,EAAA,cAAWjT,GAEX,oB,OAAA,mBAAT,IAAAgK,EAAS,c,GACLkJ,EAAOtT,WAAaoK,EAAM,aAAUpK,WAAasT,EAAOtT,UAAYoK,EAAM,WAAQpK,UAAjC,ClFrxBqv4C,EA1Pjz4C,WA0Po04C,G,KkFwxBzz4C,Q,GACMsT,EAAOtT,UAAYoK,EAAM,aAAUpK,UAAA,ClFzxBq74C,EA1Pz+4C,WA0P4/4C,G,KkF4xBj/4C,Q,GACKsT,EAAOtT,WAAgBkH,EAAL,GAAY,WAAQlH,UAAA,ClF7xBik5C,EA1Pvn5C,WA0P0o5C,G,KkF+xB/n5C,gBAdZ,EAAiBmT,GlFjxBws5C,EA1Pxt5C,WA0Piv5C,G,KkFuyBtv5C,MrFz/BoD,KqF0/Bf,MAA1BI,EAAA,cAAuB,GAAG,sB,GAArC,GAAW,E,GAAP,MAAO,MAA0B,EAA1B,E,IAEP,IAAI,EAAU,EACF,EAAAA,EAAA,kCAER,IAFQ,cACI,cAAK,GACjB,EAEJ,MAAeA,EAAuB,kBlF/yB0p6C,EkFgzBjr6C,IlFhzBor6C,EAAkC,EAAkC,IAAW,EAAuB,EAA8C,EAAvK,EA1P/q6C,WAAI,G,WkFkiCT,GAAW,GAkBX,OAAO,IAAAC,GAAoBH,EAAWE,EAAuBE,GIwPhDC,CAAuCvT,EAAZiH,I,EACvB,EAAO,Y,EAAW,EAAO,wB,EAAwB,EAAO,eAIzE,EAA6D,G,iBAvxCjB0H,S,WAAS,EAAAC,eAlClB,0BAkC4E,yCAAnE,EAAmE,KAuxC7E,KACN4E,MAA5B,OAA6C,GAAAN,EAAW,kBAAK,IAAI,GAAjE,GAAoE,K,EACpEO,E,EAA4C,c,cnGvzCq4D,EiGwCr6DC,gBAAgBC,MAAM,EAAMC,GARxC,GrGtDkE,GAmE3D,M,gDAAA,SqGbS,S,29MEnC+B,Y,2EAAA,U,0EAAA,O,6EAAA,Y,2EAAA,U,6EAAA,Y,4EK0H3B,WAAAC,GACG,cAAAC,G,y3J9GzIG,OAsxGR,uBAAK,iB,yLU7xGE,OA6pFP,uBAAK,iB,wLqG1pFnB,OAAI,IAAO,aAAO,oBAA2B,GAAH,I,yL/GDlC,UAmrDc,oBAAW,GAAO,M,KAC5B,MAprDJ,KAorDI,kC,G+G3rDmD,G/G2rDnD,c+G3rDyD,G/G2rD/C,CAAoB,GAAO,E,QACrD,GAAO,E+G5rD2E,OAArB,G,4D/Gc/D,OAupD4B,iBAAW,GAAO,M,KAC5B,MAxpDlB,EAwpDkB,mCAAX,MAAW,c,I+GnqDG,qBAoBuvtD,G/G+oD/utD,CAAoB,GAAO,E,SACtD,GAAO,E+GpqD0B,OAApB,G,oCAE8B,OAAD,IAAR,wB,gCAIjC,OAFiC,OAAc,KAAM,IAAK,IAAzB,Q,EAA6B,Y,wCAA7B,I,sCAQ+B,OAArB,GAAgB,O,0HjGuC9C,e,oCAEoC,OAAZ,YAAQ,+B,qCAGjC,oBAAW,MAAM,KACX,I,EAAA,YAAX,OAAW,kBAAJ,0BAAI,I,yMA4BP,EAAQ,GAAK,GAAS,EACtB,MAAM,GAA2B,UAAQ,EAAK,WAAS,I,0DAKvD,EAAQ,GAAK,EAAQ,EACrB,MAAM,GAA2B,UAAQ,EAAK,WAAS,I,2DAcvD,EAAa,GAAK,EAAW,EAC7B,MAAM,GAA2B,eAAa,EAAU,eAAa,EAAQ,WAAS,G,GAEtF,EAAa,EACb,MAAM,GAA0B,eAAa,EAAU,gBAAc,I,sDAKzE,MAAe,EACL,uCAAL,MAAK,c,EACK,MAAK,G,EAAe,MAAH,EAAG,QAAH,GAA5B,EAAW,GAAiB,QAAiB,EAAjB,GAA5B,EAEJ,OAAO,G,qDAIH,EAAE,oBAAQ,EAAM,kBAAM,OAAO,E,IAEjC,MAAoB,EAAM,gBACb,sC,IAEL,GAFK,cACO,EAAc,aAE1B,OAAO,EAGf,OAAO,G,wGAjIsC,OAAd,a,qDdmUvC,MAAY,EACC,EA1TL,KA0TK,mC,GclU0D,GdkU1D,cclUgE,GdmUrE,CACA,EAAO,E,QACX,Q,KAEJ,GAAO,EcvU+E,OAA9B,G,gDAMwB,OAAvB,WAAiB,I,uCA2BlE,IAAU,QACV,qBAEG,6BAAc,KAAM,I,iCAMqB,OAArB,+BAAgB,O,4HC4EsB,EAAN,EAAM,iB,EAAK,MAAL,EAAK,QAAL,G,EAAA,QAAmB,EAAnB,EAA2B,EAAjC,EAAiC,mB,EAAO,MAAP,EAAO,QAAP,GAAyB,OAArD,GAA4B,QAAqB,EAArB,I,iDACV,OAApB,EAAO,iBAAG,IAAV,EAAY,oB,yDAElE,uBACG,KAAE,iBAAO,EAAM,mBAAO,KAAE,mBAAS,EAAM,qB,6GA3CmB,yCAAS,I,uLAjF9E,QAA6B,MAAtB,QAAc,K,oDAOjB,mBAA2B,OAAO,EACtC,MAAU,EAAM,iBAChB,EAAY,EAAM,mBAClB,GGgN4C,GA9MlD,KA8MkD,IAAnB,KAAmB,iBA9M9C,G,SHAM,KAAS,IAKG,MAAZ,KG0NwC,GA5NS,KA4NT,IAAnB,KAAmB,yBA5NqB,K,mCHgB7D,IAAU,KAAM,OAAO,E,GACvB,mBAAqB,OAAO,E,GAC5B,yBAAQ,EAAM,kBAAM,OAAO,E,SfiB/B,MAAN,EAAM,qB,MA6mDA,OAAsB,iBAAW,GAAO,M,KAC5B,2CAAX,MAAW,c,Ie7nDe,6BA6FsgmD,GfgiD1gmD,CAAoB,GAAO,E,SACtD,GAAO,Ge9nDH,OAAqB,G,oCAGe,cAAc,GAAW,OAAL,MAApB,EAAoB,KAApB,EAAoB,oB,iCAQX,OAAV,GAAR,4B,qCAEY,OAAD,IAAR,wB,wCACS,OAAZ,0BAAQ,mB,iCAgCgD,OAA7C,EAAR,0BAAsB,KAAM,IAAK,IAAzB,Q,EAA6B,a,2CAA7B,I,mDAE8D,OAAjD,QAAS,EAAM,kBAAQ,IAAK,QAAS,EAAM,qB,+HiGzE1F,MAAe,EACC,uCAAX,MAAW,c,EACZ,E,EAAsB,MAAT,EAAS,QAAT,GAAb,KAAa,QAAuB,EAAvB,GAAb,EAEJ,OAAO,G,sDAIH,EAAE,oBAAQ,EAAM,mBhGHtB,EAgP+G,sBAhPjG,I,mGAb2D,QAAnC,qBAAoB,EAAM,gB,iCACtC,OAAD,G,iCACM,MAAF,M,wCAEH,OAAD,G,qCACO,OAAJ,G,4CACsB,OAAL,G,kGACkC,OAAlB,EAAS,gB,4HAEpC,MAAM,GAA2B,+CAA6C,EAAK,M,2CAC3E,OAAF,G,wFAGY,a,mDAGzC,IAAT,EAAY,MAAM,GAA2B,UAAQ,GACzD,a,gHA5BmC,OAAL,G,kCAIH,MAAM,M,iHAsCK,OAAX,aAAO,Q,qCACY,OjBqqPnC,IAvoPqC,aAuoP7C,Q,yCiBpqP8D,O,cjB2crE,OAAO,IAAQ,IAAY,EiB3cyB,CAAP,aAAgB,I,6KhBiCvC,OA2lDI,iBAAW,GAAO,M,KAC5B,MA5lDM,EA4lDN,mCAAX,MAAW,c,IgB5nD4D,qBAwZ27rC,GhBouC5+rC,CAAoB,GAAO,E,SACtD,GAAO,EgB7nDmF,OAApB,G,2HACd,O+ChBV,O/CgBP,e,4GE7C0C,QAArC,qBAAsB,EAAM,gB,iCACxC,OAAD,G,iCACM,MAAF,M,wCAEH,OAAD,G,qCACO,OAAJ,G,+CAEkB,OAAL,G,gKAEH,OAAJ,M,qJAC4B,a,+GEfxB,OAAb,eAAS,mB,uCAC8B,OAApC,6B,mBAiBrB,GAAT,MAAY,OAAkC,MAAM,GAA2B,iBAAe,EAAK,sBAAqB,KAAG,OAAU,MAAI,OAAlH,MAAY,IAjBI,MAAoB,K,sQTiZ3C,IAAR,WACA,MAAM,KACV,I,EAAA,WACA,OADA,iB,KACO,eAAS,a,qCAIhB,OAAO,WAAO,GAAK,eAAS,gB,qFAdwD,OAA/C,GAAK,YAAO,KAAU,OAAa,eAAU,I,sCAgBzF,OAdsC,c,4GAvM/B,OAAO,4BAAY,iBAAS,c,qCAI5B,OAAO,iBAAS,gB,mFAEvB,OATsC,c,oHAqY3B,gBAAY,GACZ,SAEa,IAAb,gBACA,MAAM,K,MACG,eAAb,QAAa,EAAb,KAGA,OADA,iBAAY,EACL,G,qCAMP,OAFI,gBAAY,GACZ,SACgB,IAAb,iB,mFAEd,OA1BsC,c,kHA7hBmB,a,wCAEjB,a,4GV9BqC,QAAlC,qBAAmB,EAAM,gB,iCACrC,OAAD,G,iCACM,MAAF,M,wCAEH,OAAD,G,qCACO,OAAJ,G,4CACsB,OAAL,G,kGACkC,OAAlB,EAAS,gB,2HAElB,a,oHqB4RwB,OAAZ,GAAF,EAAY,I,kPCrQkC,QAAvE,+BAAiB,wBAAO,IAAU,+BAAiB,EAAO,iC,gIAqB5D,OAAN,c,gDACoB,OAAb,qB,sDAE2B,OAAN,GAAK,G,sMAEqB,OAAzC,GAAS,cAAU,GAAS,qB,yIAChB,QAAxB,cAAU,sB,gCAG1C,OAAO,qBAA+B,sBAAa,EAAM,iBACjD,eAAU,EAAM,SAAU,sBAAiB,EAAM,iB,iCAIzD,OAAW,qBAAW,EAAQ,MAAY,GAAP,eAAkC,GAAd,qBAAvD,G,iCAGuD,OAAvB,aAAM,KAAG,qB,0LMmmCpB,IAAb,mBACA,SACa,IAAb,kBACA,MAAM,K,MACG,iBAAb,kBAAa,EAAb,KAIA,OAFA,iBAAW,KACX,mBAAY,EACL,G,qCAMP,OAFiB,IAAb,mBACA,SACgB,IAAb,mB,mFAEd,OAhD6C,c,kI1B5/Bou6C,OAAW,kBAAY,EAA2B,mB0B6jClw6C,OArnCtE,EAqnCqF,EAAG,KKhrCpC,OL2DpD,EAqnCwG,I,sbKzrCxC,MAAlB,IAAE,YAAK,KAAG,aAAM,K,wCAjC9D,oB,wCAAA,qB,iCAAA,qG,mCAAA,kB,KAAA,0B,MAAA,uB,QAAA,wD,mmB1BmCyC,OAAT,qB,2G2BOa,OAAP,e,qCAG9B,MAAY,W,GACR,IAAS,oB,IACJ,cAAS,MAAa,KAC3B,eAAU,M,CAGV,sBAAQ,WAAR,EAEJ,OAAO,G,sIC8E2H,OAA1C,OAAe,EAAY,EAAU,I,4GAxC1H,sB,wCAKA,mB,sCAOyE,OAAzC,OAAuB,cAAO,WAAM,e,qCAQM,OAAxC,aAAO,EAAG,cAAQ,WAAU,cAAQ,Y,gCAIR,OADjE,qBAA4B,sBAAa,EAAM,iBAC/C,gBAAS,EAAM,UAAS,aAAQ,EAAM,OAAQ,eAAQ,EAAM,U,iCAGJ,OAApD,qBAAW,EAAS,MAAM,MAAK,eAAQ,WAAnB,GAA2B,aAAK,G,iCAEuD,OAA7E,aAAO,EAAK,cAAK,KAAG,WAAI,SAAO,aAAa,cAAK,WAAS,WAAI,UAAe,GAAN,e,6Pb5ExE,OAAL,yB,gDACW,OAAJ,wB,qCASO,OAAZ,wBAAQ,wB,gCAIK,OAD3C,qBAAsB,sBAAa,EAAM,iBACzC,0BAAS,EAAM,oBAAS,yBAAQ,EAAM,oB,iCAGI,OAAtC,qBAAW,EAAS,MAAK,yBAAQ,uBAAK,G,iCAEG,OAAb,wBAAK,KAAG,wB,oG0FzCN,MAAX,e,2G3E0C3B,wB,6CAGA,wB,8CAGM,yB,6CAGA,wB,+lBE5CF,gC,IACA,OAAe,EACC,uCAAX,MAAW,cACR,gBAAI,KAAU,GAAW,GAEjC,OAAO,G,+BAwBiC,OAAd,KAAK,W,sLCkErB,iB,qCAOoC,OAAZ,cAAQ,iC,sCAGjC,oBAAW,MAAM,K,MACf,cACP,OADO,oBAAP,aAAO,EACA,4BAAI,e,6ClCOyX,IAAR,aA9ChY,MAAM,GAA8B,GkC2CX,yEAErB,iCAAS,c,KACT,cAAQ,aACR,cAAO,G,oMA7HL,kB,4CAAA,uB,oCAcN,OAFA,gCACA,mBAAI,uBAAM,IACH,G,sCAgCwD,OAAd,c,yCAEoB,OAArB,oBAAQ,IAAY,G,wCAGtD,QAAG,W,GAAjB,GAAc,E,GAAT,MAAS,E,GAAA,QACN,sBAAI,GAAU,GACd,OAAO,QAFf,IAAc,GAKd,OAAO,G,gDAamF,OAAvB,YAAiB,I,uCAsBhF,IAAU,QACV,qBAEgB,6BAAc,KAAM,I,iCAMqB,OAArB,+BAAgB,O,mHC5CqB,OAAvB,qBAAc,gB,kCACC,OAAxB,qBAAc,YAAO,kB,yCACA,OAAtB,qBAAc,oB,oFApDf,kB,yCAKP,OAAN,c,yCAO1B,MAAe,KAAK,QAEpB,OADA,aAAc,EACP,G,iCAGuC,OAAnB,6BAAc,O,iCACQ,OAAnB,6BAAc,O,gCACoB,OAAxB,2BAAY,KAAM,I,+GAMW,OAAtB,6BAAc,I,6GAeb,MAAM,GAA+B,iC,4HAKH,OAApB,kCAAY,I,sJAI9D,OAAO,OADa,oCAAQ,kB,wCAiB2B,OAA5B,eAAwB,mB,iDAEuB,OAAxC,eAAwB,4B,mFAGtE,OAhCa,MAAT,gBACA,cAAQ,cA+BA,GAAL,gB,0CAMX,gC,IACqB,MxBeZ,EA+PuE,qBAAQ,gBwB9QnE,uCAAf,ExBeG,EAkLmD,iBwBjMjD,ExBeF,EA+LmD,mBwB7MxD,kBAAI,EAAK,G,8CAgCb,gC,IACA,MAAW,0BAAQ,gBACZ,EAAK,iBACR,MAAY,EAAK,Y,GAEb,KADI,EAAM,kBACV,CACA,MAAY,EAAM,mBAElB,OADA,EAAK,mBACE,GAGf,OAAO,M,uKC/HH,IAAU,QACV,qBACe,yBAAU,KAAM,I,iCAM2B,OAAvB,iCAAkB,O,qHCmBb,OAAV,YAAM,Q,6CAEH,YAAM,QAAW,IAAY,sBAA7B,EAA6B,M,yCAElE,gCACA,QAAW,G,KzCWnB,kBAAM,GyCT8B,YAAM,GAAS,E,MzC8BxC,EyC9BH,sBAAO,EAAP,M,oCAIA,gCtCVwnB,YsCWtmB,KAAK,GACvB,I,EAAA,2BACA,OADA,qC,MACO,G,yCAIP,gCtCjBmyB,YsCkBjxB,O,cAoGrB,OADgB,kCAAmB,EAAO,qBzCdL,EyCrFT,MAAoB,GAAQ,EAAG,GACxD,I,EAAA,gE,mDAIA,gCACI,EAAS,eAAW,OAAO,EAE/B,I,IAAA,KxCPmB,EwCOnB,KxCPmB,OAAkB,EFzCyB,GAoD/D,GEinDH,EE/oD6hmE,EF+oDrgmE,OAAO,GwCrnD3B,WACA,I,EAAA,2BACA,OADA,qC,MACO,G,4CAoBP,gCACA,QAAW,G,KACX,I,EAAA,2BACA,OADA,qC,KACW,IAAS,StCnD6yD,YsCoD3yD,MtCpD41D,YsCsD51D,OAAO,EAAO,GAAG,I,wCA4B0B,OAAhB,EAAN,YAAc,I,iCAIf,OAApB,GAAc,c,qCAkBpC,MAAO,GAAS,MAAM,KAAK,c,gHAKvB,iBAAY,MAAM,M,kHvC3IsB,OAAX,kBAAW,QAAQ,EAAG,I,oNAepB,UAAF,EAAY,I,qNAgBZ,OAAO,EAAN,IAAkB,EAAN,GAAb,G,gP6G3B0C,OAAhB,KAAU,I,+CAExB,I,EAAO,MAAP,EAAO,QAAP,GAAsB,OAAtB,QAAqB,EAArB,G,0LrEEY,MAAM,GAA+B,oC,0IAKK,OAAnC,cAAa,wBAAc,I,sCAEG,OAAtB,2BAAY,iB,wCAUpC,OAAjB,cAAa,mB,6GAkD4B,OAAzB,kBAAY,gBAAS,I,2CAUhE,OAHgB,MAAZ,iBACA,eAAW,4BAEA,GAAR,iB,4CAG2E,OAAV,c,oCAEb,OAApB,kBAAY,WAAI,I,wCAEY,OAA3B,kBAAY,aAAI,EAAK,I,uCAEL,OAAvB,kBAAY,cAAO,I,wCAEN,OAAhB,kBAAY,mB,yGxB/FzC,kB,oCA2CL,OAAc,MADJ,UAAI,aAAI,EAAS,O,yCAYsD,OAAxB,UAAI,mBAAY,I,qCAEvB,OAAb,UAAI,gB,sCAE2B,OAAnB,UAAI,kBAAK,iB,wCAIhB,OAAR,UAAI,mB,uGyB+E9B,OAFa,IAAT,cACA,Y,eAnBgB,MAAhB,iBAAwB,Y,IACxB,ExC7Fy7G,gBwC6F/2G,OACpE,I,GAAA,0BAAF,EAAE,eAAY,EACd,OAAO,EAGT,Q,GAAA,wBAAF,EAAE,cAAW,QAAK,QAClB,gBAAe,wBAAW,QAAK,c,MAC/B,E,EAAU,gBAEV,OAFA,0BACA,aAAY,EACL,EAGP,OADA,gBAAe,KACR,EAMC,QACI,IAAT,a,sCAIF,oBAAW,MAAM,K,IACtB,EAAoB,cxCrH2wI,mBwCsHtuI,iBxCtHm1I,mBwC4H54I,OAFA,gBAAiB,EACjB,aAAQ,EACD,G,4CvC5CN,MAgBqsE,gBAd9sE,MAAM,GAA8B,GAjBV,6B,KuCgElB,eAAyB,cAAgB,GAAT,iBAAY,kB,KAC5C,gBAAY,KAEZ,I,EAAA,sC,+FAzJkC,yB,wCAGrC,mB,wCAIL,MAAe,iBAAS,sBAAY,GACpC,EAAmB,QAAsB,G,GACrB,MAAhB,EAEA,iBAAW,GAAY,OAAY,EAAK,O,IAEpC,iBAEA,I,EAAA,EAA+B,E,GAC3B,iBAAS,iBAAO,EAAM,iBAAK,GAC3B,OAAO,EAAM,gBAAS,GfTmD,EAetC,GAAO,OAAY,EAEvE,IeNiB,iBAAW,GAAY,EACvB,I,EAAA,WACA,OADA,iB,KACO,KAIX,MAAuC,EACvC,EAAkB,GAAN,EAAM,KAAiB,G,GACtB,MAAT,EACA,OAAO,EAAM,gBAAS,GxCPskB,EwCS9kB,KAAK,OAAY,EAAK,IAGhD,I,EAAA,WAEA,OAFA,iB,KAEO,M,uCAIP,MAAe,iBAAS,sBAAY,G,EACjB,QAAsB,G,GAAtB,QAAmC,OAAO,KAA7D,MAAmB,E,GACf,iBACA,MAAgC,E,GAC5B,iBAAS,iBAAO,EAAM,iBAAK,GAAlB,CACT,GAAiB,iBAAY,GAC7B,I,EAAA,WACA,OADA,iB,KACO,EAAM,mBAEb,OAAO,KAGX,MAAuC,EACnB,MAAN,EAAM,W,GAApB,GAAc,E,GAAT,MAAS,MAAM,EAAN,EACV,MAAY,EAAM,G,GACd,iBAAS,iBAAO,EAAK,EAAM,kBAAlB,CACS,IAAd,EAAM,QxClC0+C,EwCmCh/C,OAA2B,EAE3B,GAAiB,iBAAY,IxCrCqtD,EwCwChuD,OAAO,EAAO,GAEpC,I,EAAA,WAEA,OAFA,iB,KAEO,EAAM,0BAbrB,GAAc,GAiBlB,OAAO,M,yCAQmD,QAAJ,MAAjB,QAAS,K,oCAEnB,cAAS,GAAW,OAAL,MAAf,EAAe,KAAf,EAAe,oB,sCAsB1C,OAAO,c,uHqE1GP,M/CrBR,OAAM,OAAQ,M+CyBN,OAFA,MAAgB,EAChB,GAAiB,EAAS,OACnB,G,+GpEiCC,QAAgB,OAAT,e,sCAKF,oBAAW,MAAM,KAEtB,MAAkB,GAAJ,cACd,aAAO,E,M5CYe,EAAR,EAAQ,Q4CVtB,O5CyDZ,E4CTJ,IAjDoD,6B5C0DpB,EAAU,K4C1D1B,aAAoB,EACb,G,4CxCkCjB,MADJ,aAJM,MAAM,GAA8B,GAfxB,kBwCTJ,cAAc,2BAGP,GAAH,GAAJ,cAAO,wBACP,8BAAI,cAAW,GAAJ,cAAO,kB,KAElB,aAAO,M,iHAxCX,OADA,cAAmB,2BACN,kCAAN,KAAe,I,0GA4C+B,MAAM,GAA+B,oC,0IAKW,OAAzC,cAAmB,wBAAc,I,sCAEV,OAAf,c,wCAWlB,OAAvB,cAAmB,mB,iDAEuB,OAAnC,cAAmB,4B,6GAsHU,OAApB,YAAI,mBAAY,I,4CAc2B,OAAV,c,oCAEjC,MAAJ,YAAI,WAAI,GAAW,OAAL,MAAV,EAAU,KAAV,EAAU,oB,wCAGzD,gCAEA,MAAU,YAAI,WAAI,G,GACP,MAAP,EAAO,CACP,MAAe,YAAW,EAAK,GAG/B,OAFA,YAAI,aAAI,EAAK,G,sBxCtGkV,MAAR,WAAwB,MAAR,QA9C3W,MAAM,GAA8B,GAfxB,kBwCyCZ,MAAY,Q,GACC,MAAT,EACA,QAAO,EACP,UAAO,EACP,QAAO,M,KxCgBwkB,EAAN,EAAM,M,GAhB1kB,MAfO,EAiBhB,MAAM,GAA8B,GAjBV,6BwCkBtB,MxClBY,EwCoBZ,QAAO,EACP,UAAO,EAEP,QAAa,EACb,UAAa,GA8GJ,CAAT,EAAS,MACF,KAEP,OAAO,EAAI,gBAAS,I,uCAKxB,gCAEA,MAAY,YAAI,cAAO,G,OACV,MAAT,GACM,GAAN,EAAM,MACC,EAAM,oBAEV,M,wCAGmC,OAAR,YAAI,mB,oDAGlC,mBAAY,MAAM,M,yHCzNyC,OAApB,sBAAI,4B,2LCzC/C,qBAAO,O,2CAIP,qBAAM,GACN,0B,gHAaA,EA+DyC,OA/Dd,GAC3B,mBAAa,MAAM,I,kHAsCnB,EAwByC,OAxB1B,GACf,EpCTgB,EA8J4E,YA9JvD,KAAK,G,GoCUtC,GAAK,GACL,I,IAAA,yBpC+JmH,EAzK1H,EAyK2F,UAzK/E,EAAG,GoCUR,8BAAY,GACZ,uBpCX+C,IAAY,IAAI,EAAJ,EoCY3D,EpCZ+C,EAsKsB,UAAU,GoCxJnF,qDAAU,I,wCAIV,QAAQ,IAAI,0BACZ,4BAAS,K,mIA3Bb,gB,0CAAA,qB,yCAGI,I,IAAA,K,EAAA,aAoC4D,EAAnB,OApCxB,GAAjB,YAAU,G,+GCtCmC,OAAlB,mBAAY,Q,4CAGpC,GADiC,MAC9B,UACE,MAAM,GAA2B,SAAO,EAAK,wBAAsB,SAAS,KACvF,O5CJ2E,mBAGhF,KAAK,I,mO8CVa,qB,gCAOV,OAAO,iBAA0B,4BAAU,EAAM,sB,iCAItB,mC,EAAY,MAAZ,EAAY,QAAZ,GAA2B,OAA3B,QAA0B,EAA1B,G,iCAI3B,MAAQ,SAAO,8B,4GAkBX,mBACS,yBAAN,KAAa,IAAU,wBAAmB,EAAM,kB,8CAGH,OAAf,uB,0HAQhC,yB,0CAKG,MAAM,GAA+B,gD,gCAES,OAAd,IAAU,M,iCAEtB,OAAD,G,2GAS2B,OAAd,IAAU,M,iCAEtB,OAAD,G,oHA7CtB,2B,mHClB4E,c,kLAGS,c,kLAMI,qC,kLAGV,oC,kLAGG,oC,kLAGN,oC,kLAGM,oC,kLAGG,oC,kLAGD,uB,kLAGC,oC,kLAGQ,2B,kLAGS,mBmBgFhE,G,EnBhFgE,ImBgFhC,iBAAhB,EAAE,Q,yLnB7E2C,mBmBgFhE,G,EnBhFgE,ImBgFhC,cAAhB,EAAE,Q,yLnB7E4C,gBmB2E9D,GnB3E8D,EmB2E9C,Y,kLnBxEkD,gBmByEjE,GnBzEiE,EmByEjD,a,kLnBtE2C,gBmBwE7D,GnBxE6D,EmBwE7C,a,kLnBrE2C,mBmBwE1D,G,EnBxE0D,ImBwE1B,cAAhB,EAAE,Q,yLnBrEkD,gBmBmEnE,GnBnEmE,EmBmEnD,e,kLnBhEsD,gBmBiErE,GnBjEqE,EmBiErD,e,kLnB3DnB,MAAkB,mBAAT,G/C5B4/D,E+C4Bv9D,SAAW,c,oLA/DpG,uB,+CAGA,0B,gDAGA,2B,gDAGA,2B,6CAGA,wB,8CAGA,yB,4CAGA,uB,8CAGA,yB,+CAGA,0B,8CAGA,yB,+CAGA,0B,kDAGA,6B,qDAGA,gC,kDAGA,6B,kDAGA,6B,mDAGA,8B,iDAGA,4B,kDAGA,6B,mDAGA,8B,oDAGA,+B,iDAIW,EAAoB,G,GAApB,S,IACH,EAAa,O/C3Bg5D,S+C2Bh1D,WAAS,G,EACrD,U,4C/C5BsjE,E+C6B3jE,GAAS,E,EACrC,O,EAJG,EAAP,U,21EE3CiC,OjDIhC,aiDJ0B,Q,2C3CKgB,e,KAAiB,GAkG5C,GAlG4C,GAkG9B,OAlGuC,MAAM,GAClF,UACI,EAAK,aAAW,yBAAM,K2CJ2E,O3CoGrD,KAlGmB,I,iD2CAsD,O1CEhH,aA+LsF,UA/LrE,EAEzB,I,0C0CAM,OADA,0BAAU,EACH,M,0CAKP,OADA,0BAAgB,GAAN,GACH,M,oDAIU,EAAsC,OAAvD,KAAK,sBAAY,QAAU,OAAV,EAAiB,EAAY,I,yCA4E9C,I,EAAA,K,EAAA,a,EAAe,EACf,OADA,aAAe,QAAU,OAAV,G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CACA,uCACA,OACA,UACA,mBACA,mBACA,aACA,kDACA,aACA,iDACA,oCACA,cACA,cACA,cACA,mCACA,0CACA,kBACA,sDACA,6EACA,0DACA,2FACA,kJACA,qBACA,cACA,WACA,KACA,MACA,mBACA,oBACA,yBACA,8DACA,oBACA,qBACA,4BACA,wBACA,0BACA,sBACA,QACA,YACA,UACA,0B,+DAGgB,IAAAA,G,+BAEhB,iEACA,mGACA,gFACA,8CACA,4FACA,wHACA,4MACA,yFACA,kFACA,uBACA,qCACA,uFACA,oEACA,yJACA,mNACA,6K,8DAEA,sD,wJAGA,mE,6EAEA,yD,qRAIA,uIACA,yBACA,gCACA,gFACA,oHAhCgB,uCAkChB,oCACA,+CACA,mEACA,kBACA,YACA,gBACA,OACA,UACA,aACA,aACA,gBACA,QACA,cACA,uBACA,yBACA,aACA,WACA,YACA,qBACA,QACA,uBACA,qDACA,4CACA,qFACA,2FACA,8LACA,kBACA,WACA,WACA,MACA,OACA,oBACA,qBACA,6BACA,oEACA,qBACA,sBACA,mCACA,+BACA,yCACA,qCACA,QACA,YACA,gBACA,iCLEDpV,OAAA,Q,GAAgB,O,mFcjKhBqV,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBtI,IAAjBuI,EACH,OAAOA,EAAanY,QAGrB,IAAIC,EAAS+X,EAAyBE,GAAY,CAGjDlY,QAAS,IAOV,OAHAoY,EAAoBF,GAAUG,KAAKpY,EAAOD,QAASC,EAAQA,EAAOD,QAASiY,GAGpEhY,EAAOD,QClBWiY,CAAoB,K,MDF1CD","sources":["webpack://hazthenewestapp/webpack/universalModuleDefinition","webpack://hazthenewestapp/../../../../../_Arrays.kt","webpack://hazthenewestapp/../../../../../_Collections.kt","webpack://hazthenewestapp/../../../../../Sets.kt","webpack://hazthenewestapp/../../../../../collections.kt","webpack://hazthenewestapp/../../../../../Standard.kt","webpack://hazthenewestapp/../../../../../_ArraysJs.kt","webpack://hazthenewestapp/../../../../../ArraySorting.kt","webpack://hazthenewestapp/../../../../../dynamic.kt","webpack://hazthenewestapp/../../../../../Preconditions.kt","webpack://hazthenewestapp/../../../../../Iterators.kt","webpack://hazthenewestapp/../../../../../_Ranges.kt","webpack://hazthenewestapp/../../../../../_Sequences.kt","webpack://hazthenewestapp/../../../../../Sequences.kt","webpack://hazthenewestapp/../../../../../_Strings.kt","webpack://hazthenewestapp/../../../../../string.kt","webpack://hazthenewestapp/../../../../../AbstractList.kt","webpack://hazthenewestapp/../../../../../AbstractMap.kt","webpack://hazthenewestapp/../../../../../Collections.kt","webpack://hazthenewestapp/../../../../../Iterables.kt","webpack://hazthenewestapp/../../../../../Maps.kt","webpack://hazthenewestapp/../../../../../MutableCollections.kt","webpack://hazthenewestapp/../../../../../ReversedViews.kt","webpack://hazthenewestapp/../../../../../HashSet.kt","webpack://hazthenewestapp/../../../../../Comparisons.kt","webpack://hazthenewestapp/../../../../../Ranges.kt","webpack://hazthenewestapp/../../../../../Appendable.kt","webpack://hazthenewestapp/../../../../../Char.kt","webpack://hazthenewestapp/../../../../../char.kt","webpack://hazthenewestapp/../../../../../StringNumberConversions.kt","webpack://hazthenewestapp/../../../../../numberConversions.kt","webpack://hazthenewestapp/../../../../../Strings.kt","webpack://hazthenewestapp/../../../../../stringsCode.kt","webpack://hazthenewestapp/../../../../../Library.kt","webpack://hazthenewestapp/../../../../../Duration.kt","webpack://hazthenewestapp/../../../../../long.kt","webpack://hazthenewestapp/../../../../../Tuples.kt","webpack://hazthenewestapp/../../../../../ProgressionIterators.kt","webpack://hazthenewestapp/../../../../../Progressions.kt","webpack://hazthenewestapp/../../../../../progressionUtil.kt","webpack://hazthenewestapp/../../../../../primitiveCompanionObjects.kt","webpack://hazthenewestapp/../../../../../kotlinHacks.kt","webpack://hazthenewestapp/../../../../../AbstractMutableCollection.kt","webpack://hazthenewestapp/../../../../../AbstractMutableList.kt","webpack://hazthenewestapp/../../../../../AbstractMutableMap.kt","webpack://hazthenewestapp/../../../../../AbstractMutableSet.kt","webpack://hazthenewestapp/../../../../../ArrayList.kt","webpack://hazthenewestapp/../../../../../HashMap.kt","webpack://hazthenewestapp/../../../../../InternalHashCodeMap.kt","webpack://hazthenewestapp/../../../../../LinkedHashMap.kt","webpack://hazthenewestapp/../../../../../LinkedHashSet.kt","webpack://hazthenewestapp/../../../../../console.kt","webpack://hazthenewestapp/../../../../../ItemArrayLike.kt","webpack://hazthenewestapp/../../../../../JsClass.kt","webpack://hazthenewestapp/../../../../../KClassImpl.kt","webpack://hazthenewestapp/../../../../../primitives.kt","webpack://hazthenewestapp/../../../../../reflection.kt","webpack://hazthenewestapp/../../../../../StringBuilderJs.kt","webpack://hazthenewestapp/../../../../../_WhitespaceChars.kt","webpack://hazthenewestapp/../../../../../CharCode.kt","webpack://hazthenewestapp/../../../../../_DigitChars.kt","webpack://hazthenewestapp/../../../../../regex.kt","webpack://hazthenewestapp/../../../../../DurationUnit.kt","webpack://hazthenewestapp/../../../../../UShort.kt","webpack://hazthenewestapp/../../../../../Enum.kt","webpack://hazthenewestapp/../../../../../arrays.kt","webpack://hazthenewestapp/../../../../../noPackageHacks.kt","webpack://hazthenewestapp/../../../../../bitUtils.kt","webpack://hazthenewestapp/../../../../../charSequence.kt","webpack://hazthenewestapp/../../../../../numberConversion.kt","webpack://hazthenewestapp/../../../../../<js-code>","webpack://hazthenewestapp/../../../../../collectionsHacks.kt","webpack://hazthenewestapp/../../../../../compareTo.kt","webpack://hazthenewestapp/../../../../../coreRuntime.kt","webpack://hazthenewestapp/../../../../../typeCheckUtils.kt","webpack://hazthenewestapp/../../../../../hacks.kt","webpack://hazthenewestapp/../../../../../longjs.kt","webpack://hazthenewestapp/../../../../../numbers.kt","webpack://hazthenewestapp/../../../../../misc.kt","webpack://hazthenewestapp/../../../../../rangeTo.kt","webpack://hazthenewestapp/../../../../../exceptions.kt","webpack://hazthenewestapp/../../../../../jsOperators.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/api.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/attributes.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/delegating-map.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/finalize-consumer.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-attr-traits.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-enums.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-b.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-d.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-f.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-h.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-i.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-l.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-o.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-p.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-s.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-t.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/htmltag.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/jsMain/kotlin/dom-js.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/jsMain/kotlin/generated/gen-event-attrs-js.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/jsMain/kotlin/visit-js.kt","webpack://hazthenewestapp/../../../../src/main/kotlin/DataTypes.kt","webpack://hazthenewestapp/../../../../src/main/kotlin/Logic.kt","webpack://hazthenewestapp/../../../../src/main/kotlin/OutputTexts.kt","webpack://hazthenewestapp/../../../../src/main/kotlin/Utilities.kt","webpack://hazthenewestapp/../../../../../math.kt","webpack://hazthenewestapp/../../../../src/main/kotlin/client.kt","webpack://hazthenewestapp/../../../../../org.w3c.dom.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/jsMain/kotlin/generated/gen-consumer-tags-js.kt","webpack://hazthenewestapp/../../../../../RegexExtensions.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tag-unions.kt","webpack://hazthenewestapp/../../../../src/main/kotlin/strings.kt","webpack://hazthenewestapp/../../../../../AbstractCollection.kt","webpack://hazthenewestapp/../../../../../AbstractSet.kt","webpack://hazthenewestapp/../../../../../Unit.kt","webpack://hazthenewestapp/../../../../../EqualityComparator.kt","webpack://hazthenewestapp/../../../../../InternalMap.kt","webpack://hazthenewestapp/../../../../../regexp.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tag-groups.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-attributes.kt","webpack://hazthenewestapp/webpack/bootstrap","webpack://hazthenewestapp/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hazthenewestapp\"] = factory();\n\telse\n\t\troot[\"hazthenewestapp\"] = factory();\n})(this, function() {\nreturn ",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"import kotlinx.html.attributes.StringSetEncoder\nimport kotlin.js.Date\n\n\ndata class Strings(\n    val answer: String,\n//    جواب: \n    val headerline: String,\n//    مندرجہ ذیل ترتیب سے دم و طہر آیا:\n    val headerlinemubtadia: String,\n//    مبتداہ کو اس ترتیب سے دم و طہر آیا:\n    val writedown: String,\n//    جب بھی خون یا دھبے آئیں تو وقت تاریخ مہینہ نوٹ فرمالیجئے۔\n    val allahknows: String,\n//    واللہ تعالی اعلم بالصواب\n    val currentpaki: String,\n//    فی الحال آپ کے پاکی کے دن ہیں اپنی عبادات جاری رکھیں۔\n    val currenthaiz: String,\n//    فی الحال آپ کے حیض کے دن ہیں نمازیں نہ پڑھیں۔\n    val situationmaychange:String,\n//    \"اگر خون اسی طرح جاری رہے یا فی الحال بند ہوجائے لیکن پندرہ دن کی کامل پاکی نہیں ملی کہ دوبارہ خون یا دھبہ آگیا تب پھرdate کو ضرور دوبارہ پوچھ لیں، اس لیے کہ مسئلہ کی صورت بدل جائے گی۔\n    val haizend: String,\n//    \"اگر خون اسی طرح جاری رہے تب پھرdate تک آپ کے حیض کے دن ہونگے۔\n    val beforepregheader: String,\n//    \"حمل سے پہلے اس ترتیب سے خون آیا اور پاکی ملی:\n    val preg: String,\n//    حمل\n    val birth: String,\n//     date ولادت\n    val afterpregheader:String,\n//    ولادت کے بعد اس ترتیب سے خون آیااور پاکی ملی:\n    val earlymiscarriage: String,\n//    date کو اسقاط ہوا (غیر مستبین الخلقہ)\n    val ihtiyatighusl: String,\n//    اگر خون date سے پہلے بند ہو جاۓ تو غسل کر کے نمازیں شروع کر لیں، لیکن احتیاطا date کو بھی غسل کر لیجیے۔\n    val sexnotallowed: String,\n//    اگر سائلہ شادی شدہ ہیں تو یہ مسئلہ بھی مدنظر رکھیں: \n//    اگر خون رک بھي جاۓ اور غسل کر کے نمازيں بھي شروع کر لي ہوں، تب بھي date سے پہلے صحبت کي اجازت نہيں۔\n    val endofpaki: String,\n//    اگر خون اسی طرح جاری رہے یا فی الحال بند ہوجائے لیکن پندرہ دن کی کامل پاکی نہیں ملی کہ دوبارہ خون یا دھبہ آگیا تب پھرdate تک آپ کے یقینی پاکی کے دن ہونگے۔\n    val habit: String,\n//    عادت:: حیض: days, hours, minutes ، طہر: days, hours, minutes\n    val haizdays: String,\n//    date تا date کل days, hours, minutes حیض کے ہیں۔\n    val haizdaysinsolution:String,\n    //this will have the red circle\n    val istihazadays: String,\n//    date تا date کل days, hours, minutes یقینی پاکی (استحاضہ) کے ہیں۔\n    val nifasdays: String,\n//    date تا date کل days, hours, minutes نفاس کے ہیں۔\n    val nifasdaysinsolution:String,\n    //these will have red circle\n    val blooddays: String,\n//    date سے date تک کل days, hours, minutes خون۔\n    val solution: String,\n//    مسئلہ کا حل ::\n    val istihazadetailslineone: String,\n//    اس دوران میں جو نمازیں حیض سمجھ کر چھوڑیں،  ان کی قضاء ضروری ہے۔\n    val istihazadetailslinetwo: String,\n//    date کو اگر غسل کر لیا تھا، تو غسل کے بعد والی نمازیں درست ہیں۔ اگر غسل نہیں کیا تھا، تو جب تک غسل نہیں کیا، اس کی نمازیں قضاء کریں۔\n//    اگر اس دوران میں کوئی نمازیں حیض سمجھ کر چھوڑیں تھیں، ان کو بھی قضاء کریں۔\n    val continuosbleeding: String,\n//    date سے date تک کل days, hours, minutes خون جاری رھا (چونکہ آپ کو دو خون کے درمیان میں 15 دن کی کامل پاکی نہیں ملی ہے اسلیئے یوں سمجھا جائے گا کہ آپ کو مسلسل خون جاری ہی رہا ہے۔)\n    val pakidays:String,\n//    days, hours, minutes پاکی۔\n    val tuhrfasid:String,\n    val tuhrfasidwithaddition:String,\n//    days, hours, minutes استحاضہ + days, hours, minutes پاکی = days, hours, minutes  طہر فاسد۔\n    val twomonthstuhr: String,\n//    days, hours, minutes طہر (چونکہ طہر 6 ماہ سے زیادہ ہے، اس لیے عادت میں 60 دن لیا جاۓ گا۔)\n    val dashesline: String,\n    val becamemutadah:String,\n    val thereisnoaadat:String,\n    val aadatofhaizonly:String,\n    val selectLanguage:String,\n    val dateOnly:String,\n    val dateAndTime:String,\n    val urdu:String,\n    val english:String,\n    val haizAadat:String,\n    val tuhrAadat:String,\n    val mawjoodahTuhr:String,\n    val faasid:String,\n    val nifasAadat:String,\n    val pregnancyStartTime:String,\n    val birthMiscarrriageTime:String,\n    val startTime:String,\n    val endTime:String,\n    val calculate:String,\n    val incorrectAadat:String,\n    val nifas:String,\n    val mustabeenUlKhilqa: String,\n    val errorEnterAadat: String,\n    val errorEnterMawjoodaPaki:String,\n    val errorEnterNifasAadat:String,\n    val passwordRequired:String,\n    val warningOnlyAuthorizedPersonnel:String,\n    val typeOfInput: String,\n    val duration: String,\n    val damOrTuhr: String,\n    val dam: String,\n    val tuhr: String,\n    val durationDam: String,\n    val durationPaki:String,\n    val durationTuhrefasid:String,\n    val durationTuhreFasidWithAddition:String,\n    val durationHaiz:String,\n    val durationNifas:String,\n    val startingFromIstehaza:String,\n    val startingFromHaiz:String,\n    val followedByistehazaAfter:String,\n    val followedByHaizAfter:String,\n    val khatimaplusnewline:String,\n    val birthduration: String,\n    val pregduration:String,\n    val startingFromNifas:String\n\n)\n\n\n\n\nenum class LanguageNames { ENGLISH, URDU }\n\ndata class Entry(\n    val startTime: Date,\n    val endTime: Date\n)\nenum class TypesOfFutureDates { A3_CHANGING_TO_A2, END_OF_AADAT_HAIZ, END_OF_AADAT_TUHR }\n\nclass FutureDateType(\n    val date:Date,\n    val futureDates:TypesOfFutureDates\n)\nclass EndingOutputValues(\n    val filHaalPaki:Boolean,\n    val aadats:AadatsOfHaizAndTuhr?,\n    val futureDateType: FutureDateType?\n)\nclass OutputTexts (\n    var englishText:String,\n    var urduText: String,\n    var haizDatesText:String,\n    var hazDatesList: MutableList<Entry>,\n    var endingOutputValues:EndingOutputValues,\n    var fixedDurations: MutableList<FixedDuration>\n)\n\n\nclass InfoForCompareTable(\n    val headerList: List<Date>,\n    val listOfColorsOfDaysList: List<List<Int>>,\n    val resultColors:List<Int>\n)\n\n\ndata class Pregnancy(\n    val pregStartTime:Date,\n    val birthTime:Date,\n    var aadatNifas:Long? = 40*MILLISECONDS_IN_A_DAY,\n    val mustabeenUlKhilqat:Boolean\n)\n\nenum class DurationType {\n    DAM,\n    TUHR,\n    TUHREFAASID,\n    TUHR_IN_HAML,\n    NIFAAS,\n    DAM_IN_HAML,\n    DAM_IN_NIFAAS_PERIOD,\n    ISTIHAZA_BEFORE,\n    ISTIHAZA_AFTER,\n    HAIZ,\n    LESS_THAN_3_HAIZ,\n    HAML,\n    WILADAT_ISQAT,\n    TUHR_BIGGER_THAN_6_MONTHS,\n    TUHR_MUBTADIA_BECAME_A_MUTADA_NOW,\n    DAM_MUBTADIA,\n    TUHR_MUBTADIA,\n    TUHREFAASID_MUBTADIA,\n    TUHREFAASID_MUBTADIA_WITH_ISTEHAZA,\n    TUHREFAASID_WITH_ISTEHAZA\n}\n\nclass DateTypeList (\n    val date:Date,\n    val type: DateTypes\n)\nenum class DateTypes {START,END, YAQEENI_PAKI,YAQEENI_NA_PAKI,AYYAAM_E_SHAKK_DUKHOOL, AYYAAM_E_SHAKK_KHUROOJ}\n\nclass DurationTypes (\n    val startTime: Date,\n    val endTime: Date,\n    val type: DateTypes\n)\n\nenum class Soortain {\n    A_1, A_2, A_3, B_2, B_3\n}\n\ndata class Duration(\n    val type: DurationType,\n    val timeInMilliseconds: Long,\n    var startTime: Date\n) {\n    val days: Double get() = timeInMilliseconds / MILLISECONDS_IN_A_DAY.toDouble()\n    val endDate: Date get() = Date(startTime.getTime().toLong() + (timeInMilliseconds))\n\n}\n\ndata class FixedDuration(\n    var type: DurationType,\n    var timeInMilliseconds: Long,\n    var indices: MutableList<Int> = mutableListOf(),\n    var istihazaAfter: Long = 0,\n    var biggerThanTen: BiggerThanTenDm? = null,\n    var biggerThanForty: BiggerThanFortyNifas? = null,\n    var startDate: Date = Date(1,1,1),\n) {\n    val days: Double get() = timeInMilliseconds / MILLISECONDS_IN_A_DAY.toDouble()\n    val endDate: Date get() = addTimeToDate(this.startDate, this.timeInMilliseconds)\n}\n\ndata class BiggerThanTenDm(\n    var mp: Long, //mawjooda paki\n    var gp: Long, //aadat of Tuhr before solving this\n    var dm: Long, //dam\n    var hz: Long, //aadat of haiz before solving this\n    var qism: Soortain, //name of that case A-1, A-2, A-3, B-2, B-3\n    var istihazaBefore: Long, //number of days of istihaza before haiz\n    var haiz:Long, //number of days of haiz (also aadat of haiz before istimrar)\n    var istihazaAfter: Long, //number of days of istihaza after haiz\n    var aadatHaiz:Long, //aadat of haiz after end of istimrar\n    var aadatTuhr:Long, //aadat of tuhur after solving this\n    var durationsList: MutableList<Duration>\n\n)\ndata class BiggerThanFortyNifas(\n    var nifas: Long, //muddate nifas\n    var istihazaAfter: Long, //number of days of istihaza after nifas\n    var haiz:Long, //aadat of haiz before solving this\n    var aadatHaiz:Long, //aadat of haiz after solving this\n    var aadatTuhr:Long, //aadat of tuhur after solving this\n    var durationsList: MutableList<Duration>\n)\n\ndata class AadatsOfHaizAndTuhr(\n    var aadatHaiz: Long,\n    var aadatTuhr: Long\n)\n\ndata class AadaatWithChangeability(\n    var aadaat:AadatsOfHaizAndTuhr,\n    var isChangeable:Boolean\n)\n\ndata class AadatAfterIndexOfFixedDuration(\n    var aadat: Long,\n    var index: Int\n)","import kotlinx.browser.window\nimport kotlin.js.Date\n\n//output line 1 is indices of all the things durations that make up the sum of this thingy.\n// we should only write it, if there is more than one index\n//output line 2 is printing if an istihaza after was added too. it contains amount of istihazaAfter\n//output line 3 is mp,gp, dm, hz, soorat, as well as istihazaBefore, Haiz, IstihazaAfter, and AadatHaiz/AaadatTuhr\n// at the end of it.b\n//output line 3, can be used to generate the daur lines.\n//After this should come output in dates:\n//if we passed dateTime at the start of this thingy, we could use\n// istihazaBefore, Haiz, and IstihazaAfter to generate them\n// and generate daur too\n\nlateinit var firstStartTime:Date\n\nfun handleEntries(entries: List<Entry>, inputtedAadatHaz:Long?, inputtedAadatTuhr:Long?, inputtedMawjoodaTuhr:Long?,isMawjoodaFasid:Boolean, isDateOnly:Boolean, isPregnancy: Boolean, pregnancy: Pregnancy, isMubtadia:Boolean, language:String, isDuration:Boolean=false): OutputTexts {\n\n    firstStartTime = entries[0].startTime\n    val times = entries\n        .flatMap { entry -> listOf(entry.startTime, entry.endTime) }\n        .map { it.getTime().toLong() }\n    require(times == times.sorted())\n    //step 1 - create an array of dam and tuhur durations\n    var isDam = true\n    val durations = times.zipWithNext { firstTime, secondTime ->\n        val type = if (isDam) DurationType.DAM else DurationType.TUHR\n        isDam = !isDam\n        Duration(type, secondTime - firstTime, Date(firstTime))\n    }\n    val fixedDurations = durations\n        .map { duration ->\n            FixedDuration(duration.type, duration.timeInMilliseconds,startDate = duration.startTime)\n        }\n        .toMutableList()\n    addIndicesToFixedDurations(fixedDurations)\n    val noOutput = OutputTexts(\"\",\"\",\"\", mutableListOf(), EndingOutputValues(true, null, null), mutableListOf())\n    var adatsOfHaizList = mutableListOf<AadatAfterIndexOfFixedDuration>()\n    var adatsOfTuhrList = mutableListOf<AadatAfterIndexOfFixedDuration>()\n    adatsOfHaizList +=AadatAfterIndexOfFixedDuration(-1,-1)\n    adatsOfTuhrList +=AadatAfterIndexOfFixedDuration(-1,-1)\n\n\n\n    if(isPregnancy){\n        addStartDateToFixedDurations(fixedDurations)\n\n        markAllTuhrsInPregnancyAsHaml(fixedDurations, pregnancy)\n        //the above also added start of pregnancy\n\n        if(!pregnancy.mustabeenUlKhilqat){\n            //if it's not mustabeen ulkhilqat, deal with it like haiz\n            removeTuhrLessThan15(fixedDurations)\n            removeTuhrLessThan15InPregnancy(fixedDurations)\n            removeDamLessThan3(fixedDurations)\n            addStartDateToFixedDurations(fixedDurations)\n            val mawjoodahIsNotAadat = checkIfMawjoodahPakiIsTuhrInHaml(fixedDurations, pregnancy, inputtedMawjoodaTuhr,isMawjoodaFasid)\n            if(!dealWithBiggerThan10Dam(fixedDurations, inputtedAadatHaz,inputtedAadatTuhr, inputtedMawjoodaTuhr, mawjoodahIsNotAadat, language,adatsOfHaizList,adatsOfTuhrList)){return noOutput}\n            addDurationsToDams(fixedDurations)\n            addWiladat(fixedDurations, pregnancy)\n            addStartOfPregnancy(fixedDurations, pregnancy)\n            val endingOutputValues = calculateEndingOutputValues(fixedDurations, false, inputtedAadatTuhr,inputtedMawjoodaTuhr, mawjoodahIsNotAadat,adatsOfHaizList,adatsOfTuhrList)\n            return generateOutputStringPregnancy(fixedDurations, isDateOnly, pregnancy, endingOutputValues, isDuration)\n        }else{         //it is mustabeen ul khilqat\n            //mark all dam in pregnancy as isithaza.\n            markAllDamsInPregnancyAsHaml(fixedDurations, pregnancy)\n            removeTuhrLessThan15(fixedDurations)//do this before the next, cuz why not, mkes thigns simpler in joining dams\n            addStartDateToFixedDurations(fixedDurations)//cuz the last shoulda messed it up\n            makeAllDamInFortyAfterWiladatAsMuttasil(fixedDurations,pregnancy) //also, marking them as Dam in\n            if(!dealWithDamInMuddateNifas(fixedDurations,pregnancy, language)){return noOutput}\n            removeDamLessThan3(fixedDurations) //this won't effect dam in muddat e haml\n            addStartDateToFixedDurations(fixedDurations)\n            if(!dealWithBiggerThan10Dam(fixedDurations, inputtedAadatHaz,inputtedAadatTuhr, inputtedMawjoodaTuhr, isMawjoodaFasid, language, adatsOfHaizList,adatsOfTuhrList)){return noOutput}\n            addDurationsToDams(fixedDurations)\n            addWiladat(fixedDurations, pregnancy)\n            addStartOfPregnancy(fixedDurations, pregnancy)\n            val endingOutputValues = calculateEndingOutputValues(fixedDurations, false, inputtedAadatTuhr, inputtedMawjoodaTuhr, isMawjoodaFasid,adatsOfHaizList,adatsOfTuhrList)\n            return generateOutputStringPregnancy(fixedDurations, isDateOnly, pregnancy, endingOutputValues, isDuration)\n        }\n    }else if(isMubtadia){\n        removeTuhrLessThan15(fixedDurations)\n        removeDamLessThan3(fixedDurations)\n        addStartDateToFixedDurations(fixedDurations)\n        val aadats = dealWithMubtadiaDam(fixedDurations,adatsOfHaizList,adatsOfTuhrList)\n        markAllMubtadiaDamsAndTuhrsAsMubtadia(fixedDurations)\n        //if we got aadats, the we run this portion\n        if (aadats.aadatHaiz!=-1L && aadats.aadatTuhr!=-1L){\n            dealWithBiggerThan10Dam(fixedDurations, aadats.aadatHaiz, aadats.aadatTuhr,aadats.aadatTuhr, false, language, adatsOfHaizList, adatsOfTuhrList)\n        }\n        addDurationsToDams(fixedDurations)\n        val endingOutputValues = calculateEndingOutputValues(fixedDurations, true, inputtedAadatTuhr, inputtedMawjoodaTuhr, isMawjoodaFasid,adatsOfHaizList,adatsOfTuhrList)\n        return generateOutputStringMubtadia(fixedDurations, durations, isDateOnly, endingOutputValues, isDuration)\n    }else{//is mutadah\n        removeTuhrLessThan15(fixedDurations)\n        removeDamLessThan3(fixedDurations)\n        addStartDateToFixedDurations(fixedDurations)\n        if(!dealWithBiggerThan10Dam(fixedDurations, inputtedAadatHaz,inputtedAadatTuhr, inputtedMawjoodaTuhr, isMawjoodaFasid, language, adatsOfHaizList, adatsOfTuhrList)){return noOutput}\n        println(\"going to add Durations now\")\n        addDurationsToDams(fixedDurations)\n        val endingOutputValues = calculateEndingOutputValues(fixedDurations, false, inputtedAadatTuhr, inputtedMawjoodaTuhr, isMawjoodaFasid,adatsOfHaizList,adatsOfTuhrList)\n        return generateOutputStringMutadah(fixedDurations, durations, isDateOnly, endingOutputValues, isDuration)\n    }\n}\nfun checkIfMawjoodahPakiIsTuhrInHaml(fixedDurations:MutableList<FixedDuration>, pregnancy:Pregnancy, inputtedMawjoodaTuhr:Long?,isMawjoodaFasid:Boolean):Boolean{\n    if(isMawjoodaFasid){\n        return true\n    }\n    else if(inputtedMawjoodaTuhr == null){\n        return false\n    }\n    else{\n        val pregStartTime = pregnancy.pregStartTime\n        val pregEndTime = pregnancy.birthTime\n        val mawjoodahPakiEndDate = fixedDurations.first().startDate\n        val mawjoodahPakiStartDate = addTimeToDate(mawjoodahPakiEndDate, -inputtedMawjoodaTuhr)\n        if((mawjoodahPakiEndDate.getTime()>pregStartTime.getTime()&&mawjoodahPakiEndDate.getTime()<=pregEndTime.getTime())||\n           (mawjoodahPakiStartDate.getTime()>=pregStartTime.getTime()&&mawjoodahPakiStartDate.getTime()<pregEndTime.getTime())||\n           (mawjoodahPakiStartDate.getTime()<=pregStartTime.getTime()&& mawjoodahPakiEndDate.getTime()>=pregEndTime.getTime())){\n            //either mawjoodah paki start or end date is during preg, or the 2 dates are on either side of preg\n            return true\n        }\n    }\n    return false\n}\n\nfun markAllMubtadiaDamsAndTuhrsAsMubtadia(fixedDurations:MutableList<FixedDuration>){\n    for(fixedDuration in fixedDurations) {\n        when (fixedDuration.type) {\n            DurationType.DAM -> {fixedDuration.type=DurationType.DAM_MUBTADIA}\n            DurationType.TUHR -> {fixedDuration.type=DurationType.TUHR_MUBTADIA}\n            DurationType.TUHREFAASID -> {fixedDuration.type=DurationType.TUHREFAASID_MUBTADIA}\n            DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW -> {return}\n        }\n    }\n}\nfun dealWithMubtadiaDam(fixedDurations:MutableList<FixedDuration>, adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>,adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>):AadatsOfHaizAndTuhr{\n    //this is not in case of pregnancy\n    //the job of this function is to just tell how much of it from the start is istehaza,\n    // how much is haiz, and what the aadat at the end of this is\n    //if we get an aadat, we return true, otherwise return false\n    var aadatHaz:Long = -1\n    var aadatTuhr:Long = -1\n    var iztirariAadatHaiz:Long = 10*MILLISECONDS_IN_A_DAY\n    var iztirariAadatTuhr:Long = 20*MILLISECONDS_IN_A_DAY\n\n    var i = 0\n    while (i<fixedDurations.size){\n        //iterate through the dimaa\n        if(fixedDurations[i].type==DurationType.DAM && fixedDurations[i].days<=10){\n            //we have a haiz aadat!\n            aadatHaz = fixedDurations[i].timeInMilliseconds\n            adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i)\n            //change iztirari aadat of Tuhr\n            iztirariAadatTuhr = 30*MILLISECONDS_IN_A_DAY - aadatHaz\n            iztirariAadatHaiz = aadatHaz\n\n            //check if next Tuhr is saheeh. if it is, declare it aadat\n            if(i<fixedDurations.size-1 && fixedDurations[i+1].type==DurationType.TUHR){\n                aadatTuhr=fixedDurations[i+1].timeInMilliseconds\n                //once we have a tuhr habit too. so we have a mutadah, so we should stop now\n                //println(\"Mubtadia Soorat 1: Haiz Sahih, Tuhr Saheeh\")\n                //return aadat\n                adatsOfTuhrList+=AadatAfterIndexOfFixedDuration(aadatTuhr,i)\n                fixedDurations[i+1].type = DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW\n                return AadatsOfHaizAndTuhr(aadatHaz,aadatTuhr)\n            }\n        }else if(fixedDurations[i].type==DurationType.DAM && fixedDurations[i].days>10){//this is where bigger than 10 starts\n//            println(\"dam fasid, tuhr-e-fasid\")\n            //if there is tuhr behind it, check how long it is\n            var istehazaBefore: Long = 0\n            var haiz:Long\n            var istehazaAfter:Long\n            //if there is an addat of tuhr, we would not be in mubtadia any more, so check iztirari\n            var mawjoodahTuhr=-1L\n            if(i>0 && (fixedDurations[i-1].type==DurationType.TUHR||fixedDurations[i-1].type==DurationType.TUHREFAASID)){\n//                println(\"2\")\n//                println(\"dam-e-fasid tuhr-e-fasid type 1\")\n                //if there is a duration before this one, and it is either atuhr or a tuhr-e fasid\n                //then mawjoodah tuhr will be that + any istihaza after associated with it\n                mawjoodahTuhr = fixedDurations[i-1].timeInMilliseconds+fixedDurations[i-1].istihazaAfter\n            }\n            if(i>0 && mawjoodahTuhr < iztirariAadatTuhr && mawjoodahTuhr !=-1L){\n//                println(\"3\")\n//                println(\"dam-e-fasid tuhr-e-fasid type2\")\n                //if mawjoodah paki is less than iztirari aadat, then make the difference from the start istehaza\n                istehazaBefore = iztirariAadatTuhr-mawjoodahTuhr\n            }else{//if either mawjoodah tuhr was long, or it began with a long haiz\n                //istehazabefore remains 0. we don't really need this else\n//                println(\"4\")\n\n            }\n            //follow this by haiz\n            if(fixedDurations[i].timeInMilliseconds-istehazaBefore<= iztirariAadatHaiz){//no daur sitch\n//                println(\"5\")\n                haiz = fixedDurations[i].timeInMilliseconds-istehazaBefore\n                //we have an aadat of haiz!!\n                //in this case, haiz and aadat of haiz is the same\n                aadatHaz = haiz\n                adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i)\n                iztirariAadatHaiz = aadatHaz\n                //check if the tuhr after this is saheeh\n                if(i<fixedDurations.size - 1 && fixedDurations[i+1].type == DurationType.TUHR){\n                    aadatTuhr = fixedDurations[i+1].timeInMilliseconds\n                    adatsOfTuhrList+=AadatAfterIndexOfFixedDuration(aadatTuhr,i)\n                    //we have a mutadah\n                    val biggerThanTen = BiggerThanTenDm(0,0,0,0,Soortain.A_1,istehazaBefore, haiz, 0L, haiz, -1, mutableListOf())\n                    fixedDurations[i].biggerThanTen = biggerThanTen\n                    fixedDurations[i+1].type = DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW\n                    return AadatsOfHaizAndTuhr(aadatHaz,aadatTuhr)\n                }else{//no tuhr aadat yet\n                    val biggerThanTen = BiggerThanTenDm(0,0,0,0,Soortain.A_1,istehazaBefore, haiz, 0L, haiz, -1L, mutableListOf())\n                    fixedDurations[i].biggerThanTen = biggerThanTen\n                    iztirariAadatTuhr=30*MILLISECONDS_IN_A_DAY-haiz\n                }\n            }else{//we have an istehaza after sitch\n//                println(\"6\")\n\n                haiz = iztirariAadatHaiz\n                istehazaAfter = fixedDurations[i].timeInMilliseconds-istehazaBefore-iztirariAadatHaiz\n\n                //now we gotta check if a daur happened\n                iztirariAadatHaiz = dealWithIstihazaAfter(istehazaAfter, haiz, iztirariAadatTuhr, fixedDurations, i)\n//                println(\"7\")\n//                println(\"istehaza after was ${istehazaAfter/MILLISECONDS_IN_A_DAY}\")\n//                println(\"deal with istihaza after returned this aadat ${iztirariAadatHaiz/MILLISECONDS_IN_A_DAY} \")\n\n                //now we wanna check if aadat did change.\n                //a bit hackish but..\n                val remainder = istehazaAfter%(30*MILLISECONDS_IN_A_DAY)\n//                println(\"remainder was $remainder\")\n                if(iztirariAadatHaiz<10*MILLISECONDS_IN_A_DAY ||\n                    (iztirariAadatHaiz==10*MILLISECONDS_IN_A_DAY && remainder==10*MILLISECONDS_IN_A_DAY)){\n//                    println(\"8\")\n\n                    //in this case we gotta check further\n                    //if iztirari aadat of haiz is 10, the of tuhr is def 20.\n                    //so istihazaAfter must be a number that gives a remainder of 10, when divided by 30\n\n                    //adat did change, so do the aadat shtick\n                    //we have an aadat of haiz!!\n                    aadatHaz = iztirariAadatHaiz\n                    adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i)\n                    //check if the tuhr after this is saheeh\n                    if(i<fixedDurations.size - 1 && fixedDurations[i+1].type == DurationType.TUHR){\n                        aadatTuhr = fixedDurations[i+1].timeInMilliseconds\n                        adatsOfTuhrList+=AadatAfterIndexOfFixedDuration(aadatTuhr,i)\n                        //we have a mutadah\n                        val biggerThanTen = BiggerThanTenDm(0,0,0,0,Soortain.A_1,istehazaBefore, haiz, istehazaAfter, aadatHaz, -1, mutableListOf())\n                        fixedDurations[i].biggerThanTen = biggerThanTen\n                        fixedDurations[i+1].type = DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW\n                        return AadatsOfHaizAndTuhr(aadatHaz,aadatTuhr)\n                    }else{//no adat for tuhr yet\n                        val biggerThanTen = BiggerThanTenDm(0,0,0,0,Soortain.A_1,istehazaBefore, haiz, istehazaAfter, aadatHaz, -1L, mutableListOf())\n                        fixedDurations[i].biggerThanTen = biggerThanTen\n                        iztirariAadatTuhr=30*MILLISECONDS_IN_A_DAY-aadatHaz\n                    }\n                }\n                val biggerThanTen = BiggerThanTenDm(0,0,0,0,Soortain.A_1,istehazaBefore, haiz, istehazaAfter, aadatHaz, -1L, mutableListOf())\n                fixedDurations[i].biggerThanTen = biggerThanTen\n//                println(\"9\")\n\n            }\n        }\n        i++\n    }\n    return AadatsOfHaizAndTuhr(aadatHaz,aadatTuhr)\n}\n\nfun dealWithDamInMuddateNifas(fixedDurations:MutableList<FixedDuration>,pregnancy:Pregnancy, language: String):Boolean{\n    var i = 0\n    while (i<fixedDurations.size){\n        if(fixedDurations[i].type==DurationType.DAM_IN_NIFAAS_PERIOD){\n            if(fixedDurations[i].timeInMilliseconds > 40*MILLISECONDS_IN_A_DAY){\n                //if nifas exceeded 40\n                if(pregnancy.aadatNifas==null){\n                    //give error\n                    if(language==\"english\"){\n                        window.alert(StringsOfLanguages.ENGLISH.errorEnterNifasAadat)\n                    }else if(language==\"urdu\"){\n                        window.alert(StringsOfLanguages.URDU.errorEnterNifasAadat)\n                    }\n                    pregnancy.aadatNifas=-1\n                    return false\n                }\n                val istihazaAfter = fixedDurations[i].timeInMilliseconds-pregnancy.aadatNifas!!\n                val nifasInfo = BiggerThanFortyNifas(\n                    pregnancy.aadatNifas!!, istihazaAfter,-1, -1,\n                    -1, mutableListOf())\n                fixedDurations[i].biggerThanForty=nifasInfo\n                //the rest of this is dealt with in bigger than 10\n                //break it up into dam and tuhr?\n                //maybe do that later in bigger than 10\n                //as that is the only way to get aadat.\n                break\n            }else{//it is 40 or less\n                //do nothing to this. don't even bother to update aadat.\n                //maybe update aadat? if it's working, why fix?\n            }\n        }\n\n        i++\n    }\n    return true\n}\n\nfun makeAllDamInFortyAfterWiladatAsMuttasil(fixedDurations:MutableList<FixedDuration>,pregnancy:Pregnancy){\n    val birthDate:Long = pregnancy.birthTime.getTime().toLong()\n    val fortyPlusBD = birthDate+(40*MILLISECONDS_IN_A_DAY)\n    var i = 0\n    while (i<fixedDurations.size){\n        val startTime = fixedDurations[i].startDate.getTime()\n        if(startTime>=birthDate &&\n                startTime<=fortyPlusBD &&\n                fixedDurations[i].type == DurationType.DAM){\n            //if a dam starts after or at birth, and before or at 40\n            //then check the dam before it if it exists, is it in nifaas period.\n            if(i>1 && fixedDurations[i-2].type==DurationType.DAM_IN_NIFAAS_PERIOD){\n                //if it is, then extend last Dam to cover this one\n                fixedDurations[i-2].timeInMilliseconds += fixedDurations[i-1].timeInMilliseconds + fixedDurations[i].timeInMilliseconds\n                fixedDurations[i-2].indices.addAll(fixedDurations[i-1].indices)\n                fixedDurations[i-2].indices.addAll(fixedDurations[i].indices)\n                fixedDurations.removeAt(i-1)\n                fixedDurations.removeAt(i-1)\n                i -= 2\n            }else{//there is no dam before this in nifas period\n                val newDuration:Long = startTime.toLong()-birthDate\n                fixedDurations[i].startDate=pregnancy.birthTime\n                fixedDurations[i].timeInMilliseconds += newDuration\n                fixedDurations[i].type = DurationType.DAM_IN_NIFAAS_PERIOD\n                //since we added time to this one, we gotta subtract it from the one before.\n                //if it exists\n                if(i>0){\n                    fixedDurations[i-1].timeInMilliseconds-=newDuration\n                }\n            }\n        }\n        if(startTime>fortyPlusBD){\n            break\n        }\n        i++\n    }\n}\n\n\nfun markAllTuhrsInPregnancyAsHaml(fixedDurations: MutableList<FixedDuration>, pregnancy:Pregnancy){\n    for (i in fixedDurations.indices){\n        val endDateOfFixedDuration = fixedDurations[i].endDate\n\n        if(fixedDurations[i].type == DurationType.TUHR &&\n            fixedDurations[i].startDate.getTime() < pregnancy.birthTime.getTime() &&\n            endDateOfFixedDuration.getTime() > pregnancy.pregStartTime.getTime()){\n\n            fixedDurations[i].type = DurationType.TUHR_IN_HAML\n\n        }\n    }\n}\n\nfun markAllDamsInPregnancyAsHaml(fixedDurations: MutableList<FixedDuration>, pregnancy:Pregnancy){\n    var i =0\n    val startDateOfHaml = pregnancy.pregStartTime.getTime().toLong()\n    val endDateOfHaml = pregnancy.birthTime.getTime().toLong()\n\n    while(i<fixedDurations.size){\n        val endDateOfFixedDuration = fixedDurations[i].endDate\n\n        //this dam started before pregnancy, ends in the middle of pregnancy\n        //  ---(pregnancy---  birth)\n        if(fixedDurations[i].type == DurationType.DAM &&\n                fixedDurations[i].startDate.getTime()<startDateOfHaml &&\n                endDateOfFixedDuration.getTime()>startDateOfHaml &&\n                endDateOfFixedDuration.getTime()<=endDateOfHaml){\n            //mark the portion in pregnancy as dam in haml. we're gonna have to make more dam???\n            //or, we could just shorten it to prepregnancy stae, and leave it as is. who cares about dam in haml?\n            //we can even put it in istihazaAfter.\n            //maybe that's a bad idea, as it could trigger daur...\n            //for now, we are just shortening it.\n            val newDuration = startDateOfHaml - fixedDurations[i].startDate.getTime().toLong()\n            val timeInHaml = fixedDurations[i].timeInMilliseconds-newDuration\n            fixedDurations[i].timeInMilliseconds = newDuration\n            //maybe we really should leave an istihaz after here????\n            //we gotta figure out what to do with indices here\n            val newFixedDuration = FixedDuration(DurationType.DAM_IN_HAML,timeInHaml, startDate = addTimeToDate(fixedDurations[i].startDate, newDuration))\n            fixedDurations.add(i+1, newFixedDuration)\n        }\n        //this started in the middle, ended in the middle of it\n        //  (pregnancy ---- birth)\n        if(fixedDurations[i].type == DurationType.DAM &&\n                    endDateOfFixedDuration.getTime() <= endDateOfHaml &&\n                    fixedDurations[i].startDate.getTime() >= startDateOfHaml\n            ){\n\n            //mark it as dam in haml, aka, istihaza.\n            fixedDurations[i].type = DurationType.DAM_IN_HAML\n        }\n        //this starts in the middle of pregnancy, ends after it.\n        // (pregnancy   ---birth)---\n        if(fixedDurations[i].type == DurationType.DAM &&\n                    fixedDurations[i].startDate.getTime()<endDateOfHaml &&\n                    fixedDurations[i].startDate.getTime()>=startDateOfHaml &&\n                    endDateOfFixedDuration.getTime()>endDateOfHaml\n                ){\n\n            val firstDuration = pregnancy.birthTime.getTime().toLong()-fixedDurations[i].startDate.getTime().toLong()\n            val secondDuration = fixedDurations[i].timeInMilliseconds-firstDuration\n            val secondFixedDuration = FixedDuration(DurationType.DAM,secondDuration, startDate = pregnancy.birthTime)\n            fixedDurations.add(i+1,secondFixedDuration)\n            fixedDurations[i].timeInMilliseconds = firstDuration\n            fixedDurations[i].type=DurationType.DAM_IN_HAML\n\n        }\n        //this started before pregnancy began, ends after pregnancy ended\n        //  ---(pregnancy----birth)---\n        if(fixedDurations[i].type == DurationType.DAM &&\n                fixedDurations[i].startDate.getTime()<startDateOfHaml &&\n                endDateOfFixedDuration.getTime()>endDateOfHaml){\n            //make 1 at the start, one at the end, and 1 in the middle\n            val firstDuration = startDateOfHaml-fixedDurations[i].startDate.getTime().toLong()\n            val secondDuration = endDateOfHaml-startDateOfHaml\n            val thirdDuration = fixedDurations[i].timeInMilliseconds-firstDuration-secondDuration\n\n            val secondFixedDuration = FixedDuration(DurationType.DAM_IN_HAML,secondDuration, startDate = pregnancy.pregStartTime)\n            val thirdFixedDuration = FixedDuration(DurationType.DAM,thirdDuration, startDate = pregnancy.birthTime)\n            fixedDurations.add(i+1, secondFixedDuration)\n            fixedDurations.add(i+2, thirdFixedDuration)\n            fixedDurations[i].timeInMilliseconds=firstDuration\n\n\n        }\n\n        i++\n    }\n}\n\n\nfun addStartDateToFixedDurations(fixedDurations: MutableList<FixedDuration>){\n    var date:Date = firstStartTime\n    for (fixedDuration in fixedDurations){\n        fixedDuration.startDate = date\n        date = addTimeToDate(date,fixedDuration.timeInMilliseconds)\n    }\n}\nfun addIndicesToFixedDurations(fixedDurations: MutableList<FixedDuration>){\n    //this is so we can know the indics comparison between duration and fixed duration\n    var i =0\n    while(i<fixedDurations.size){\n        fixedDurations[i].indices.add(i)\n        i++\n    }\n}\n\nfun removeTuhrLessThan15InPregnancy (fixedDurations: MutableList<FixedDuration>){\n    var i=0\n    while(i < fixedDurations.size){//iterate through durations\n        //if there is a tuhr less than 15\n        if(fixedDurations[i].days<15 && fixedDurations[i].type== DurationType.TUHR_IN_HAML){\n            //it must be surrounded by dams on either side. increase size of damBefore. delete tuhr and dam after\n            fixedDurations[i-1].timeInMilliseconds += fixedDurations[i].timeInMilliseconds + fixedDurations[i+1].timeInMilliseconds\n            fixedDurations[i-1].indices.addAll(fixedDurations[i].indices)\n            fixedDurations.removeAt(i)\n            fixedDurations[i-1].indices.addAll(fixedDurations[i].indices)\n            fixedDurations.removeAt(i)\n        } else {\n            i++\n        }\n    }\n}\n\n\n//step 2 - Remove tuhr-e-naaqis (less than 15 days):\n//          iterate through array. if we find a tuhur less than 15, it must be surrounded\n//          by dam. add all 3 duration values together, delete the originals, and set type as dam.\n//          We want to keep the original list. Perumably the unflattened one will remain.\n\n\nfun removeTuhrLessThan15 (fixedDurations: MutableList<FixedDuration>){\n    var i=0\n    while(i < fixedDurations.size){//iterate through durations\n        //if there is a tuhr less than 15\n        if(fixedDurations[i].days<15 && fixedDurations[i].type== DurationType.TUHR){\n            //it must be surrounded by dams on either side. increase size of damBefore. delete tuhr and dam after\n            fixedDurations[i-1].timeInMilliseconds += fixedDurations[i].timeInMilliseconds + fixedDurations[i+1].timeInMilliseconds\n            fixedDurations[i-1].indices.addAll(fixedDurations[i].indices)\n            fixedDurations.removeAt(i)\n            fixedDurations[i-1].indices.addAll(fixedDurations[i].indices)\n            fixedDurations.removeAt(i)\n        } else {\n            i++\n        }\n    }\n}\n\n//step 3 - Remove dam less than 3\n//          iterate through array. when we find a dam less than 3, check if\n//          there is a tuhur behind it. and in front of it. if there is then add all the 3 durations\n//          together. set type as a new type tuhr-e-faasid. delete the originals.\nfun removeDamLessThan3 (fixedDurations: MutableList<FixedDuration>){\n    var i=0\n    while (i<fixedDurations.size-1){\n        if(fixedDurations[i].type==DurationType.DAM && fixedDurations[i].days<3){\n            if(i>0){//there is tuhur behind this and in front of it\n                if(fixedDurations[i-1].type==DurationType.TUHR){//if there is one behind it\n                    fixedDurations[i-1].type = DurationType.TUHREFAASID\n                    fixedDurations[i-1].timeInMilliseconds += fixedDurations[i].timeInMilliseconds\n                    fixedDurations[i-1].indices.addAll(fixedDurations[i].indices)\n\n                    if(fixedDurations[i+1].type==DurationType.TUHR){\n                        fixedDurations[i-1].timeInMilliseconds += fixedDurations[i+1].timeInMilliseconds\n                        fixedDurations[i-1].indices.addAll(fixedDurations[i+1].indices)\n                        fixedDurations.removeAt(i+1)\n\n                    }\n                    fixedDurations.removeAt(i)\n                    i--\n                }\n            }\n        }\n        i++\n    }\n}\n//step 4 - Deal with bigger than 10 dam\n//          iterate through array. getting aadat on the way. each time you encounter a dam\n//          less than 10, update it into HazAadat. each time you encounter a tuhur\n//          (not a tuhr-e-faasid), update it into aadat too.\n\nfun dealWithBiggerThan10Dam(fixedDurations: MutableList<FixedDuration>, inputtedAadatHaz: Long?,inputtedAadatTuhr: Long?, inputtedMawjoodaTuhr: Long?, isMawjoodaFasid: Boolean, language: String, adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>, adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>):Boolean{\n\n    //This basically adds this info to each fixed duration of dam:\n    // - istihaza before haiz duration\n    // - haiz duration\n    // - amount of dam left after haiz\n    // - new aadats of haiz and tuhr\n    // - we use a function dealWithIstihazaAfter, to figure out if aadat of haiz needs to be updated in case of daur\n    println(\"started bigger than 10\")\n\n    var aadatHaz:Long = -1\n    var aadatTuhr:Long = -1\n    var mawjoodaTuhr:Long = -1\n\n    if (inputtedAadatHaz != null && inputtedAadatHaz>=3*MILLISECONDS_IN_A_DAY && inputtedAadatHaz<=10*MILLISECONDS_IN_A_DAY){\n        aadatHaz = inputtedAadatHaz\n        adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,-1)\n    }\n    if (inputtedAadatTuhr!= null && inputtedAadatTuhr>=15*MILLISECONDS_IN_A_DAY){\n        aadatTuhr = inputtedAadatTuhr\n        adatsOfTuhrList+=AadatAfterIndexOfFixedDuration(aadatTuhr,-1)\n    }\n    if (inputtedMawjoodaTuhr!= null && inputtedMawjoodaTuhr>=15*MILLISECONDS_IN_A_DAY){\n        mawjoodaTuhr = inputtedMawjoodaTuhr\n    }\n\n    for (i in fixedDurations.indices){\n        //iterate through fixedDurations\n\n        //get aadat if dam is less than 10\n        if(fixedDurations[i].type==DurationType.DAM && fixedDurations[i].days<=10&&fixedDurations[i].days>=3){\n            aadatHaz = fixedDurations[i].timeInMilliseconds\n            adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i)\n            if(i>0 && fixedDurations[i-1].type==DurationType.TUHR){\n                aadatTuhr = fixedDurations[i-1].timeInMilliseconds\n                //if aadat is bigger than or equal to 6 months\n                if(aadatTuhr>=30*6*MILLISECONDS_IN_A_DAY){\n                    //make aadat 2 months\n                    aadatTuhr = 30*2*MILLISECONDS_IN_A_DAY\n                    //mark that tuhr as a super long tuhr\n                    fixedDurations[i-1].type= DurationType.TUHR_BIGGER_THAN_6_MONTHS\n                }\n                adatsOfTuhrList+=AadatAfterIndexOfFixedDuration(aadatTuhr,i)\n            }\n\n        }else if(fixedDurations[i].type==DurationType.DAM_IN_NIFAAS_PERIOD && fixedDurations[i].days>40){\n            //check if we have aadaat.\n            // first check for nifas aadat\n            val aadatNifas = fixedDurations[i].biggerThanForty!!.nifas\n            val istihazaAfter = fixedDurations[i].biggerThanForty!!.istihazaAfter\n\n            //if istihaza after is less than 15, so ther is no possibilty of daur,\n            // and it is followed by a Tuhr-e tamm, then we don't need aadats just yet\n            if((istihazaAfter<18*MILLISECONDS_IN_A_DAY && i != fixedDurations.lastIndex)||\n                    istihazaAfter<15*MILLISECONDS_IN_A_DAY){\n                //we do not need aadaat yet\n                //I'm going to run this with a bogus aadat cuz we need it for other stuff\n                dealWithIstihazaAfter(istihazaAfter,3*MILLISECONDS_IN_A_DAY,15*MILLISECONDS_IN_A_DAY,fixedDurations, i)\n                val nifasInfo = BiggerThanFortyNifas(aadatNifas, istihazaAfter, aadatHaz,aadatHaz, aadatTuhr, mutableListOf())\n                fixedDurations[i].biggerThanForty=nifasInfo\n            }else{\n                //we do need aadaat\n                //we don't need mawjoodah paki\n                if(aadatHaz==(-1).toLong() ||aadatTuhr==(-1).toLong()){\n                    //give error message\n                    if(language==\"english\"){\n                        window.alert(StringsOfLanguages.ENGLISH.errorEnterAadat)\n                    }else if(language==\"urdu\"){\n                        window.alert(StringsOfLanguages.URDU.errorEnterAadat)\n                    }\n                    return false\n                }\n\n                val haiz = aadatHaz\n                aadatHaz = dealWithIstihazaAfter(istihazaAfter,aadatHaz,aadatTuhr,fixedDurations, i)\n                adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i)\n                val nifasInfo = BiggerThanFortyNifas(aadatNifas, istihazaAfter, haiz,aadatHaz, aadatTuhr, mutableListOf())\n                fixedDurations[i].biggerThanForty=nifasInfo\n            }\n\n        }else if(fixedDurations[i].type==DurationType.DAM && fixedDurations[i].days>10){\n\n            //if we hit a dam bigger than 10, check to see if we have aadat\n            if(aadatHaz==(-1).toLong() ||aadatTuhr==(-1).toLong()){\n                //give error message\n                if(language==\"english\"){\n                    window.alert(StringsOfLanguages.ENGLISH.errorEnterAadat)\n                }else if(language==\"urdu\"){\n                    window.alert(StringsOfLanguages.URDU.errorEnterAadat)\n                }\n                return false\n            }\n            else{//we have aadat\n                if(mawjoodaTuhr==-1L && i<1){//if mawjoodah tuhr doesn't exist and the first period is bigger than 10\n                    //give error message\n                    if(language==\"english\"){\n                        window.alert(StringsOfLanguages.ENGLISH.errorEnterMawjoodaPaki)\n                    }else if(language==\"urdu\"){\n                        window.alert(StringsOfLanguages.URDU.errorEnterMawjoodaPaki)\n                    }\n                    return false\n                }else{\n\n                    //set the mawjoodah tuhr to previous tuhr, if it exists\n                    if(i>0){\n                        mawjoodaTuhr = fixedDurations[i-1].timeInMilliseconds + fixedDurations[i-1].istihazaAfter\n                    }\n                }\n                val mp:Long = mawjoodaTuhr\n                val gp:Long = aadatTuhr\n                val dm:Long = fixedDurations[i].timeInMilliseconds\n                val hz:Long = aadatHaz\n                val output:FiveSoortainOutput = fiveSoortain(mp, gp, dm, hz)\n\n                //deal with output\n                //update aadats\n                aadatHaz = output.haiz\n                adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i)\n\n                if(output.aadatTuhrChanges && ((i<1 && !isMawjoodaFasid) || (i>0 && fixedDurations[i-1].type==DurationType.TUHR))){//and it exists\n                    //if mp is not tuhrefaasid or tuhr in haml\n                    aadatTuhr = mp\n                    //if aadat is bigger than or equal to 6 months\n                    if(aadatTuhr>=30*6*MILLISECONDS_IN_A_DAY){\n                        //make aadat 2 months\n                        aadatTuhr = 30*2*MILLISECONDS_IN_A_DAY\n                        //mark that tuhr as a super long tuhr\n                        //if it exists\n                        if(i>0){\n                            fixedDurations[i-1].type= DurationType.TUHR_BIGGER_THAN_6_MONTHS\n                        }\n                    }\n                    adatsOfTuhrList+=AadatAfterIndexOfFixedDuration(aadatTuhr,i)\n\n                }\n                val hall =  BiggerThanTenDm(mp,gp,dm,hz, output.soorat, output.istihazaBefore,\n                    output.haiz, output.istihazaAfter, aadatHaz,aadatTuhr, mutableListOf())\n                fixedDurations[i].biggerThanTen=hall\n\n                aadatHaz = dealWithIstihazaAfter(output.istihazaAfter,aadatHaz,aadatTuhr,fixedDurations, i)\n                adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i)\n\n            }\n        }\n    }\n    return true\n}\n\nfun dealWithIstihazaAfter(istihazaAfter: Long, aadatHaz: Long, aadatTuhr: Long, fixedDurations: MutableList<FixedDuration>, i: Int):Long {\n    //this basically does 2 things:\n    // it returns the aadat of haiz at the end of istimrar, if it ended at haiz\n    // it adds the right amount of istehaza to the next tuhr, and marks it as fasid, if it ended at istehaza.\n\n    //if istihazaAfter is bigger than addatTuhr +3, run daur\n\n    var returnAadatHaiz = aadatHaz\n    if (istihazaAfter>=aadatTuhr+(3*MILLISECONDS_IN_A_DAY)){\n        //find  remainder\n\n        val remainder = istihazaAfter%(aadatHaz+aadatTuhr)\n\n        if (remainder<aadatTuhr + (3*MILLISECONDS_IN_A_DAY)){//it ended in tuhr or right between haz and tuhr\n            //add istihazaAfter to next Tuhur mark it as fasid\n            //if it exists\n            //if remainder is not equal to zero\n            if(i<fixedDurations.lastIndex && remainder>0 &&\n                (fixedDurations[i+1].type==DurationType.TUHR||fixedDurations[i+1].type==DurationType.TUHREFAASID)){//there is a tuhur after this\n                fixedDurations[i+1].type=DurationType.TUHREFAASID\n                fixedDurations[i+1].istihazaAfter=remainder\n            }\n\n        }else{//it ended in less than haiz\n            //change aadatHaiz\n            returnAadatHaiz = remainder-aadatTuhr\n\n        }\n\n    }else if(istihazaAfter==0L){\n\n    }else{\n\n        //else add istihazaAfter to next Tuhr, mark it as fasid\n        //if it exists\n        if(i<fixedDurations.size-1 &&\n            (fixedDurations[i+1].type==DurationType.TUHR||fixedDurations[i+1].type==DurationType.TUHREFAASID)){\n            fixedDurations[i+1].type=DurationType.TUHREFAASID\n            fixedDurations[i+1].istihazaAfter = istihazaAfter\n        }\n\n    }\n    return returnAadatHaiz\n}\n\nclass FiveSoortainOutput (\n    val soorat: Soortain,\n    val istihazaBefore: Long,\n    val haiz:Long,\n    val istihazaAfter: Long,\n    val aadatTuhrChanges:Boolean\n)\n\n//fun threeSoortainIstimrar(mp:Long, gp:Long, hz: Long):FiveSoortainOutput{\n//    val soorat: Soortain\n//    val istihazaBefore:Long\n//    val haiz:Long\n//    val istihazaAfter:Long\n//    val aadatTuhrChanges:Boolean // 0 for gp, 1 for mp (change)\n//    val veryBigArbitraryNumber = 1000\n//\n//    if (mp <= gp) {    //Qism A (Always A-1 in istimrar)\n//        soorat = Soortain.A_1\n//        istihazaBefore = gp-mp\n//        haiz = hz\n//        istihazaAfter = (veryBigArbitraryNumber*MILLISECONDS_IN_A_DAY)\n//        aadatTuhrChanges = false\n//    }else {\t// mp>gp qism B\n//        if (hz - (mp - gp) >= 3*MILLISECONDS_IN_A_DAY) {\t\t\t\t\t\t\t// soorat B-2\n//            soorat = Soortain.B_2\n//            istihazaBefore = 0\n//            haiz = hz-(mp-gp)\n//            istihazaAfter = (veryBigArbitraryNumber*MILLISECONDS_IN_A_DAY)\n//            aadatTuhrChanges = true\n//        }else{ //if (hz - (mp - gp) < 3) {\t\t\t\t\t\t// soorat B-3\n//            soorat = Soortain.B_3\n//            istihazaBefore = 0\n//            haiz = hz\n//            istihazaAfter = (veryBigArbitraryNumber*MILLISECONDS_IN_A_DAY)\n//            aadatTuhrChanges = true\n//        }\n//    }\n//    return FiveSoortainOutput(soorat,istihazaBefore,haiz,istihazaAfter, aadatTuhrChanges)\n//}\n\nfun fiveSoortain(mp: Long, gp: Long, dm: Long, hz:Long):FiveSoortainOutput{\n    val soorat: Soortain\n    val istihazaBefore:Long\n    val haiz:Long\n    val istihazaAfter:Long\n    val aadatTuhrChanges:Boolean // 0 for gp, 1 for mp (change)\n\n    if (mp <= gp) {    //Qism A\n        if (hz <= dm - (gp - mp)) {\t                  // soorat A-1\n            // if GP==MP, we would output 0 istihaza, not good!\n            // 0 istihaza is ok, for now. just no negative numbers, please\n            soorat = Soortain.A_1\n            istihazaBefore = gp-mp\n            haiz = hz\n            istihazaAfter = dm-(gp-mp)-hz\n            aadatTuhrChanges = false\n        }\n        else if (3*MILLISECONDS_IN_A_DAY <= dm-(gp-mp) && dm-(gp-mp) < hz) {  // soorat A-2\n            soorat = Soortain.A_2\n            istihazaBefore = gp-mp\n            haiz = dm-(gp-mp)\n            istihazaAfter = 0\n            aadatTuhrChanges = false\n        }\n        else{ //if (dm - (gp - mp) < 3*MILLISECONDS_IN_A_DAY) {                  // soorat A-3\n            soorat = Soortain.A_3\n            istihazaBefore = 0\n            haiz = hz\n            istihazaAfter = dm-hz\n            aadatTuhrChanges = true\n        }\n    }else {\t// mp>gp qism B\n        if (hz - (mp - gp) >= 3*MILLISECONDS_IN_A_DAY) {\t\t\t\t\t\t\t// soorat B-2\n            soorat = Soortain.B_2\n            istihazaBefore = 0\n            haiz = hz-(mp-gp)\n            istihazaAfter = dm-(hz-(mp-gp))\n            aadatTuhrChanges = true\n        }else{ //if (hz - (mp - gp) < 3*MILLISECONDS_IN_A_DAY) {\t\t\t\t\t\t// soorat B-3\n            soorat = Soortain.B_3\n            istihazaBefore = 0\n            haiz = hz\n            istihazaAfter = dm-hz\n            aadatTuhrChanges = true\n        }\n    }\n  return FiveSoortainOutput(soorat,istihazaBefore,haiz,istihazaAfter, aadatTuhrChanges)\n}\nfun addDurationsToDams(fixedDurations: MutableList<FixedDuration>){\n    //What this function does?\n    //It creates a list of durations associated with each fixed duration\n    //each duration contains it's type, it's starting date, and it's duration\n    //so, for example 15B could have a first 3 days of istihaza before, then\n    // 7 days of haiz, then 3 days of istihaza after. this will make all those duration.\n\n    //currently, this doesn't handle istimrar\n\n    for (i in fixedDurations.indices){\n        if(fixedDurations[i].type==DurationType.DAM &&\n            fixedDurations[i].days>10 &&\n            fixedDurations[i].biggerThanTen!!.qism==Soortain.A_3 &&\n            i==fixedDurations.lastIndex){\n            val ayyameQabliyyah = fixedDurations[i].biggerThanTen!!.gp-fixedDurations[i].biggerThanTen!!.mp\n            if(fixedDurations[i].timeInMilliseconds>ayyameQabliyyah){\n                fixedDurations[i].biggerThanTen!!.durationsList += Duration(DurationType.ISTIHAZA_BEFORE,ayyameQabliyyah,fixedDurations[i].startDate)\n                val haizStartDate = addTimeToDate(fixedDurations[i].startDate, ayyameQabliyyah)\n                val haizDuration = fixedDurations[i].timeInMilliseconds-ayyameQabliyyah\n                fixedDurations[i].biggerThanTen!!.durationsList += Duration(DurationType.LESS_THAN_3_HAIZ,haizDuration, haizStartDate)\n                return\n            }\n        }\n        if((fixedDurations[i].type==DurationType.DAM|| fixedDurations[i].type==DurationType.DAM_MUBTADIA)\n            && fixedDurations[i].days>10){\n\n            //bigger than 10\n            val istihazaBefore = fixedDurations[i].biggerThanTen!!.istihazaBefore\n            val istihazaBeforeStartDate:Date = fixedDurations[i].startDate\n\n            if (istihazaBefore>0){\n                fixedDurations[i].biggerThanTen!!.durationsList += Duration(DurationType.ISTIHAZA_BEFORE,istihazaBefore,istihazaBeforeStartDate)\n            }\n            val haizStartDate = addTimeToDate(istihazaBeforeStartDate, (istihazaBefore))\n            val haiz = fixedDurations[i].biggerThanTen!!.haiz\n            fixedDurations[i].biggerThanTen!!.durationsList += Duration(DurationType.HAIZ,haiz,haizStartDate)\n\n            val istihazaAfterStartDate = addTimeToDate(haizStartDate, (haiz))\n            val istihazaAfter = fixedDurations[i].biggerThanTen!!.istihazaAfter\n\n            var aadatTuhr = fixedDurations[i].biggerThanTen!!.aadatTuhr\n            var aadatHaz = fixedDurations[i].biggerThanTen!!.aadatHaiz\n\n            //this is calculating iztirari aadaat in case we don't have aadat for mubtadia\n            if(aadatTuhr==-1L){\n                if(aadatHaz==-1L){\n                    aadatHaz=10*MILLISECONDS_IN_A_DAY\n                }\n                aadatTuhr=30*MILLISECONDS_IN_A_DAY-haiz\n            }\n\n            if(istihazaAfter>0){\n                if(istihazaAfter>=aadatTuhr+3*MILLISECONDS_IN_A_DAY||\n                    (istihazaAfter>aadatTuhr &&\n                            istihazaAfter<aadatTuhr+3*MILLISECONDS_IN_A_DAY &&\n                            i==fixedDurations.lastIndex)){\n\n                    //daur\n                    //find quotient and remainder\n                    val remainder = istihazaAfter%(haiz+aadatTuhr)\n                    val quotient = ((istihazaAfter-remainder)/(haiz+aadatTuhr))\n                    var aadatTuhrStartDate:Date = istihazaAfterStartDate\n                    var aadatTuhrEndDate:Date\n                    var aadatHaizEndDate:Date\n\n                    for(j in 1 .. quotient){\n                        //add a quotient number of tuhr/hazes\n                        aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,(aadatTuhr))\n                        aadatHaizEndDate = addTimeToDate(aadatTuhrEndDate,(haiz))\n\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,aadatTuhr,aadatTuhrStartDate)\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.HAIZ,haiz,aadatTuhrEndDate)\n                        aadatTuhrStartDate=aadatHaizEndDate\n                    }\n                    //now deal with remiander\n\n\n                    if(remainder==0L){\n                        //there is nothing more to be added\n                    }else if(remainder>aadatTuhr\n                        && remainder<aadatTuhr+3*MILLISECONDS_IN_A_DAY\n                        && fixedDurations[i]==fixedDurations.last()){//it is the last period, and ends in less than 3 haiz\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,aadatTuhr,aadatTuhrStartDate)\n                        aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,(aadatTuhr))\n                        val lastHaiz = remainder-aadatTuhr\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.LESS_THAN_3_HAIZ,lastHaiz,aadatTuhrEndDate)\n                    }else if(remainder<aadatTuhr+3*MILLISECONDS_IN_A_DAY){\n                        //it ends in tuhr\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,remainder,aadatTuhrStartDate)\n                    }else{\n                        //there is full tuhur, followed by a partial haiz\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,aadatTuhr,aadatTuhrStartDate)\n                        aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,(aadatTuhr))\n                        val lastHaiz = remainder-aadatTuhr\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.HAIZ,lastHaiz,aadatTuhrEndDate)\n                    }\n\n                }else{\n                    //no daur\n                    fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,istihazaAfter,istihazaAfterStartDate)\n\n                }\n            }\n\n        }else if(fixedDurations[i].type==DurationType.DAM_IN_NIFAAS_PERIOD&&fixedDurations[i].days>40){\n            //bigger than 40 nifas\n            val aadatNifas = fixedDurations[i].biggerThanForty!!.nifas\n            //make nifas period\n            fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.NIFAAS,aadatNifas,fixedDurations[i].startDate)\n            //now deal with istihaza after\n            //I'm copy/pasting from above, with minor changes\n\n            val istihazaAfterStartDate = addTimeToDate(fixedDurations[i].startDate, (aadatNifas))\n            val istihazaAfter = fixedDurations[i].biggerThanForty!!.istihazaAfter\n            var aadatTuhr = fixedDurations[i].biggerThanForty!!.aadatTuhr\n            var aadatHaz = fixedDurations[i].biggerThanForty!!.haiz\n\n            //this ought to fix if we got here without an aadat. persumably, we did it cuz there was no daur\n            if(aadatTuhr==-1L){\n                aadatTuhr=15*MILLISECONDS_IN_A_DAY\n            }\n            if(aadatHaz==-1L){\n                aadatHaz=3*MILLISECONDS_IN_A_DAY\n            }\n\n            if(istihazaAfter>0){//if there is istehaza after\n                if(istihazaAfter>=aadatTuhr+3*MILLISECONDS_IN_A_DAY||\n                    (istihazaAfter>aadatTuhr &&\n                            istihazaAfter<aadatTuhr+3*MILLISECONDS_IN_A_DAY &&\n                            i == fixedDurations.lastIndex)){\n\n                    //daur\n                    //find quotient and remainder\n                    val remainder = istihazaAfter%(aadatHaz+aadatTuhr)\n                    val quotient = ((istihazaAfter-remainder)/(aadatHaz+aadatTuhr))\n                    var aadatTuhrStartDate:Date = istihazaAfterStartDate\n                    var aadatTuhrEndDate:Date\n                    var aadatHaizEndDate:Date\n\n                    for(j in 1 .. quotient){\n                        //add a quotient number of tuhr/hazes\n                        aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,(aadatTuhr))\n                        aadatHaizEndDate = addTimeToDate(aadatTuhrEndDate,(aadatHaz))\n\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,aadatTuhr,aadatTuhrStartDate)\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.HAIZ,aadatHaz,aadatTuhrEndDate)\n                        aadatTuhrStartDate=aadatHaizEndDate\n                    }\n                    //now deal with remiander\n                    if(remainder==0L){\n                        //there is nothing more to be added\n                    }else if(remainder>aadatTuhr\n                        && remainder<aadatTuhr+3*MILLISECONDS_IN_A_DAY\n                        && i==fixedDurations.lastIndex){//it is the last period, and ends in less than 3 haiz\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,aadatTuhr,aadatTuhrStartDate)\n                        aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,(aadatTuhr))\n                        val lastHaiz = remainder-aadatTuhr\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.LESS_THAN_3_HAIZ,lastHaiz,aadatTuhrEndDate)\n                    }else if(remainder<aadatTuhr+3*MILLISECONDS_IN_A_DAY){\n                        //it ends in tuhr\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,remainder,aadatTuhrStartDate)\n                    }else{\n                        //there is full tuhur, followed by a partial haiz\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,aadatTuhr,aadatTuhrStartDate)\n                        aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,(aadatTuhr))\n                        val lastHaiz = remainder-aadatTuhr\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.HAIZ,lastHaiz,aadatTuhrEndDate)\n                    }\n\n                }else{\n                    //no daur\n                    fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,istihazaAfter,istihazaAfterStartDate)\n\n                }\n            }\n\n        }\n        if(fixedDurations[i].type==DurationType.TUHREFAASID||fixedDurations[i].type==DurationType.TUHREFAASID_MUBTADIA){\n            //check if it has istehaza attached\n\n            if(fixedDurations[i].istihazaAfter>0){\n                if(fixedDurations[i].type==DurationType.TUHREFAASID){\n                    fixedDurations[i].type = DurationType.TUHREFAASID_WITH_ISTEHAZA\n                }else if( fixedDurations[i].type==DurationType.TUHREFAASID_MUBTADIA){\n                    fixedDurations[i].type==DurationType.TUHREFAASID_MUBTADIA_WITH_ISTEHAZA\n                }\n            }\n        }\n    }\n\n}\n\nfun getHaizDatesList(fixedDurations: MutableList<FixedDuration>):MutableList<Entry>{\n    val hazDatesList = mutableListOf<Entry>()\n\n    for(fixedDuration in fixedDurations){\n        if(fixedDuration.type==DurationType.DAM && fixedDuration.days <=10){\n            //less than 3 were eliminated earlier\n            hazDatesList+=Entry(fixedDuration.startDate,fixedDuration.endDate)\n        }else if(fixedDuration.type==DurationType.DAM && fixedDuration.days>10){\n            for(duration in fixedDuration.biggerThanTen!!.durationsList){\n                if(duration.type==DurationType.HAIZ\n                    ||duration.type == DurationType.LESS_THAN_3_HAIZ){\n                    hazDatesList+=Entry(duration.startTime,duration.endDate)\n                }\n            }\n        }else if(fixedDuration.type==DurationType.DAM_IN_NIFAAS_PERIOD && fixedDuration.days<=40){\n            hazDatesList+=Entry(fixedDuration.startDate,fixedDuration.endDate)\n        }else if(fixedDuration.type==DurationType.DAM_IN_NIFAAS_PERIOD && fixedDuration.days>40){\n            for(duration in fixedDuration.biggerThanForty!!.durationsList){\n                if(duration.type==DurationType.HAIZ\n                    ||duration.type == DurationType.NIFAAS\n                    ||duration.type == DurationType.LESS_THAN_3_HAIZ){\n                    hazDatesList+=Entry(duration.startTime,duration.endDate)\n                }\n            }\n        }\n    }\n\n    return hazDatesList\n\n}\nfun addWiladat(fixedDurations: MutableList<FixedDuration>, pregnancy: Pregnancy){\n    for(i in fixedDurations.indices){\n        if(fixedDurations[i].endDate.getTime()>pregnancy.birthTime.getTime()||\n                fixedDurations[i].type==DurationType.DAM_IN_NIFAAS_PERIOD){\n            val newFixedDuration = FixedDuration(DurationType.WILADAT_ISQAT, 0L, mutableListOf(),startDate = pregnancy.birthTime)\n            fixedDurations.add(i,newFixedDuration)\n            break\n        }\n        if(i==fixedDurations.lastIndex){\n            //if we got to the last one without anything happening, just add it anyway\n            val newFixedDuration = FixedDuration(DurationType.WILADAT_ISQAT, 0L, mutableListOf(),startDate = pregnancy.birthTime)\n            fixedDurations.add(i+1,newFixedDuration)\n        }\n    }\n}\nfun addStartOfPregnancy(fixedDurations: MutableList<FixedDuration>,pregnancy: Pregnancy){\n    //add start of pregnancy in fixed periods\n    for(i in fixedDurations.indices){\n        if(fixedDurations[i].endDate.getTime()>pregnancy.pregStartTime.getTime()){\n            val newFixedDuration= FixedDuration(DurationType.HAML,0L, mutableListOf(), startDate = pregnancy.pregStartTime)\n            fixedDurations.add(i,newFixedDuration)\n            break\n        }\n        if(i==fixedDurations.size-1){\n            //if we got to the last one without anything happening, just add it anyway\n            val newFixedDuration= FixedDuration(DurationType.HAML,0L, mutableListOf(), startDate = pregnancy.pregStartTime)\n            fixedDurations.add(i,newFixedDuration)\n        }\n    }\n\n}\n\n\nfun generatInfoForCompareTable(listOfLists: MutableList<List<Entry>>):InfoForCompareTable {\n    var earliestStartTime = listOfLists[0][0].startTime\n    var latestEndTime=listOfLists[0].last().endTime\n    for (list in listOfLists) {\n        if (list[0].startTime.getTime() <earliestStartTime.getTime())\n            earliestStartTime = list[0].startTime\n        if (list[list.lastIndex].endTime.getTime() > latestEndTime.getTime())\n            latestEndTime = list.last().endTime\n    }\n    val firstLast = Entry(earliestStartTime, latestEndTime)\n\n    val ndays = ((latestEndTime.getTime()-earliestStartTime.getTime())/MILLISECONDS_IN_A_DAY).toInt()\n\n    val headerList = mutableListOf<Date>()\n    for(day in 0..(ndays)){//header list is one longer than ndays\n        val dateOfDay = addTimeToDate(firstLast.startTime, (day)*MILLISECONDS_IN_A_DAY)\n        if(headerList.size<ndays+1){\n            headerList+=dateOfDay\n        }\n    }\n\n    val listOfColorsOfDaysList = mutableListOf<MutableList<Int>>()\n    for (list in listOfLists){//in the lists\n        val colorsOfDaysList = mutableListOf<Int>()\n\n        for(i in 0 until ndays){//go through each day\n            val header = headerList[i]\n            //check if this date is in between a startTime and an endtime\n            for(entry in list) {//check the list to see if it is a haiz day\n                if (header.getTime() >= entry.startTime.getTime() && header.getTime() < entry.endTime.getTime()) {\n                    //that date is a haiz\n                    colorsOfDaysList +=1\n                    break\n                }else if (header.getTime() < entry.startTime.getTime()) {\n                    //that date is a tuhur\n                    colorsOfDaysList +=0\n                    break\n                }else if(header.getTime()>=list.last().endTime.getTime()){\n                    colorsOfDaysList +=0\n                    break\n                }\n            }\n        }\n        listOfColorsOfDaysList +=colorsOfDaysList\n    }\n\n    //this bit describes which days are yaqeeni paki, yaqeeni napaki, or shakk\n    val resultColors = mutableListOf<Int>()\n    for(day in listOfColorsOfDaysList[0].indices){\n        //for each day\n        var compare = 0\n        for(list in listOfColorsOfDaysList){\n            val color = list[day]\n            compare +=color\n        }\n        val maxColor = listOfColorsOfDaysList.size\n        val minColor = 0\n        resultColors += if(compare == minColor){\n            0 //yaqeeni paki\n        }else if(compare == maxColor){\n            2 //yaqeeni napaki\n        }else{\n            1//ayyam-e-shakk\n        }\n    }\n\n    return InfoForCompareTable(headerList,listOfColorsOfDaysList,resultColors)\n\n}\n\n//fun getDifferenceFromMultiple (listOfLists:List<List<Entry>>):String{\n//    //find out number of lists\n//    var numberOfLists = listOfLists.size\n//\n//    //step 1: merge them into one list\n//    var dateTypeList = mutableListOf<DateTypeList>()\n//\n//    for (list in listOfLists){\n//        for(date in list){\n//            dateTypeList += DateTypeList(date.startTime,DateTypes.START)\n//            dateTypeList += DateTypeList(date.endTime,DateTypes.END)\n//        }\n//    }\n//\n//    //step 2: order list by date\n//    dateTypeList.sortBy { it.date.getTime() }\n//\n//    //step 3: create a counter\n//    var counter = 0\n//\n//    //step 4: step through the list, create an output list\n//    var counterMin = 0 //at counter min, it is yaqeeni paki\n//    var counterMax = numberOfLists //at counter max, it is yaqeeni na-paki\n//    //all other counter values are ayyam-e-shakk\n//\n//    var outputList = mutableListOf<DateTypeList>()\n//    for(dateType in dateTypeList){\n//        //plus 1 for every start time, -1 for every end time\n//        if(dateType.type==DateTypes.START){\n//            counter++\n//        }else{//the type is end\n//            counter--\n//        }\n//\n//        if(counter == counterMin){\n//            outputList += DateTypeList(dateType.date, DateTypes.YAQEENI_PAKI)\n//        }else if(counter == counterMax){//\n//            outputList += DateTypeList(dateType.date, DateTypes.YAQEENI_NA_PAKI)\n//        }else{\n//            outputList += DateTypeList(dateType.date, DateTypes.AYYAAM_E_SHAKK)\n//        }\n//    }\n//\n//    //create a people-friendly version of output list\n//    println(\"starting peoplefriendly\")\n//    var str = \"\"\n//    var durationTypes = mutableListOf<DurationTypes>()\n//    var i=0\n//\n//    while (i<outputList.size-1){\n//        var startTime = outputList[i].date\n//        var endTime = outputList[i+1].date\n//        if(startTime.getTime()!=endTime.getTime()){//to prevent 0 duration\n//            //in more than 1, there will be repeated ayyam-e-shakk. this is to prevent that\n//            if(outputList[i].type!=DateTypes.AYYAAM_E_SHAKK){\n//                durationTypes += DurationTypes(startTime,endTime,outputList[i].type)\n//            }else{//It is ayyame shakk\n//                //check all next ones to until there is a non aayam-e-shakk\n//                var j = i\n//                while(j<outputList.size-1){\n//                    if(outputList[j+1].type!=DateTypes.AYYAAM_E_SHAKK){\n//                        break\n//                    }\n//                    j++\n//                }\n//                endTime = outputList[j+1].date\n//                i=j\n//                durationTypes += DurationTypes(startTime,endTime,outputList[i].type)\n//            }\n//        }\n//\n//        i++\n//    }\n//    println(\"after a while\")\n//    println(durationTypes)\n//\n//    str += generateGetDifferenceString(durationTypes)\n//    println(str)\n//\n//    return str\n//}\n\nfun getDifferenceFromMultiple (listOfLists:List<List<Entry>>):String{\n    //find out number of lists\n    val numberOfLists = listOfLists.size\n\n    //step 1: merge them into one list\n    val dateTypeList = mutableListOf<DateTypeList>()\n\n    for (list in listOfLists){\n        for(date in list){\n            dateTypeList += DateTypeList(date.startTime,DateTypes.START)\n            dateTypeList += DateTypeList(date.endTime,DateTypes.END)\n        }\n    }\n\n    //step 2: order list by date\n    //since we want to prioritize khurooj, we should reverse order\n    dateTypeList.sortBy { it.date.getTime() }\n\n    //step 3: create a counter\n    var counter = 0\n\n    //step 4: step through the list, create an output list\n    val counterMin = 0 //at counter min, it is yaqeeni paki\n    val counterMax = numberOfLists //at counter max, it is yaqeeni na-paki\n    //all other counter values are ayyam-e-shakk\n\n    val outputList = mutableListOf<DateTypeList>()\n    for(dateType in dateTypeList){\n        //plus 1 for every start time, -1 for every end time\n        if(dateType.type==DateTypes.START){\n            counter++\n            //this is definitely a dukhool, and can lead to yaqeeni napaki\n            //this cannot be yaqeeni paki, or khurooj\n            //though it could simultaneously be a khurooj some other way\n            if(counter==counterMax){\n                outputList+=DateTypeList(dateType.date, DateTypes.YAQEENI_NA_PAKI)\n            }else{//it is dukhool shakk\n                outputList+=DateTypeList(dateType.date, DateTypes.AYYAAM_E_SHAKK_DUKHOOL)\n            }\n        }else{//the type is end\n            counter--\n            //this is a khurooj or yaqeeni paki\n            if(counter==counterMin){\n                outputList+=DateTypeList(dateType.date, DateTypes.YAQEENI_PAKI)\n            }else{\n                outputList+=DateTypeList(dateType.date, DateTypes.AYYAAM_E_SHAKK_KHUROOJ)\n            }\n        }\n    }\n\n    //create a people-friendly version of output list\n    var str = \"\"\n    val durationTypes = mutableListOf<DurationTypes>()\n    var i=0\n\n    while (i<outputList.size-1){\n        val startTime = outputList[i].date\n        val endTime = outputList[i+1].date\n        durationTypes += DurationTypes(startTime,endTime,outputList[i].type)\n        i++\n    }\n    //clean up the junk in durationTypes list now\n//    var j = 0\n//    while (j <= durationTypes.lastIndex){\n//        var duration=durationTypes[j]\n//        //remove things with duration 0\n//        if(duration.endTime.getTime()==duration.startTime.getTime()){\n//            durationTypes.removeAt(j)\n//            j--\n//        }\n//        j++\n//    }\n//    //remove things wherebthe next one is the same type as this one.\n//    //if there is a next one\n//    else if(j+1<durationTypes.size && durationTypes[j+1].type==duration.type){\n//        durationTypes.add(j, DurationTypes(duration.startTime, durationTypes[i+1].endTime, duration.type))\n//        durationTypes.removeAt(j+1)\n//        durationTypes.removeAt(j+1)\n//    }\n\n\n    str += generateGetDifferenceString(durationTypes)\n\n    return str\n}\n\nfun calculateEndingOutputValues(fixedDurations: MutableList<FixedDuration>, isMubtadia: Boolean, inputtedAadatTuhr: Long?, inputtedMawjoodaTuhr: Long?, isMawjoodaFasid: Boolean, adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>, adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>):EndingOutputValues{\n    val filHaalPaki = calculateFilHaal(fixedDurations)\n    println(\"done filhaal\")\n    val aadaat = finalAadats(fixedDurations, inputtedAadatTuhr, inputtedMawjoodaTuhr, isMawjoodaFasid, adatsOfHaizList, adatsOfTuhrList)\n    println(\"done aadats\")\n//    println(\"adats of haiz list is ${adatsOfHaizList}\")\n//    println(\"adats of tuhr list is ${adatsOfHaizList}\")\n    val futureDates = futureDatesOfInterest(fixedDurations)\n    if(aadaat!=null && (aadaat.aadatHaiz==-1L||aadaat.aadatTuhr==-1L) && !isMubtadia){\n        return EndingOutputValues(filHaalPaki, aadaat, null)\n    }else if(isMubtadia){\n        return EndingOutputValues(filHaalPaki,aadaat, null)\n    }else{\n        return EndingOutputValues(filHaalPaki,aadaat,futureDates)\n    }\n}\n\nfun futureDatesOfInterest(fixedDurations: MutableList<FixedDuration>):FutureDateType?{\n    //A-3 changing to A-2 or A-1\n    if(fixedDurations.last().days>10&&fixedDurations.last().type==DurationType.DAM) {\n        if(fixedDurations.last().biggerThanTen!!.qism==Soortain.A_3){\n            //A-3 is when bleeding begins well before aadat.\n            //A-2 is when bleeding is 3 days or more into aadat.\n            //But we must ask again at start of aadat, not A-2.\n            val mp = fixedDurations.last().biggerThanTen!!.mp\n            val gp = fixedDurations.last().biggerThanTen!!.gp\n            //when dm becomes equal to or more than gp-mp\n            //dm is duration\n            var date = addTimeToDate(fixedDurations.last().startDate, gp-mp)\n            if(date.getTime()>fixedDurations.last().endDate.getTime()){\n                return FutureDateType(date,TypesOfFutureDates.A3_CHANGING_TO_A2)\n            }else if(date.getTime()<=fixedDurations.last().endDate.getTime()){\n                date = addTimeToDate(date, fixedDurations.last().biggerThanTen!!.haiz)\n                return FutureDateType(date, TypesOfFutureDates.END_OF_AADAT_HAIZ)\n            }\n\n        }\n    }\n\n    //last date of aadat of haiz.\n    //with insructions for ihtiyati ghusl\n    if(fixedDurations.last().days>10&&fixedDurations.last().type==DurationType.DAM) {\n        //it is bigger than 10 and dam\n        if(fixedDurations.last().biggerThanTen!!.durationsList.last().type==DurationType.HAIZ||\n            fixedDurations.last().biggerThanTen!!.durationsList.last().type==DurationType.LESS_THAN_3_HAIZ){\n            //it ends at a haiz., or a less than 3 starting of a haiz\n            //was it a daur or was it not\n            if(fixedDurations.last().biggerThanTen!!.istihazaAfter>0L){\n                //it was a daur\n                val date = addTimeToDate(fixedDurations.last().biggerThanTen!!.durationsList.last().startTime,fixedDurations.last().biggerThanTen!!.haiz)\n                //add haiz to satrt time of last duration\n                return FutureDateType(date,TypesOfFutureDates.END_OF_AADAT_HAIZ)\n            }else{\n                //it was not a daur\n                //then it was either A-2 or A-1\n                if(fixedDurations.last().biggerThanTen!!.qism==Soortain.A_1){\n                    val date = addTimeToDate(fixedDurations.last().biggerThanTen!!.durationsList.last().startTime,fixedDurations.last().biggerThanTen!!.aadatTuhr)\n                    return FutureDateType(date,TypesOfFutureDates.END_OF_AADAT_TUHR)\n                }else if(fixedDurations.last().biggerThanTen!!.qism==Soortain.A_2){\n                    val date = addTimeToDate(fixedDurations.last().biggerThanTen!!.durationsList.last().startTime,fixedDurations.last().biggerThanTen!!.aadatHaiz)\n                    return FutureDateType(date,TypesOfFutureDates.END_OF_AADAT_TUHR)\n                }\n            }\n        }\n    }else if(fixedDurations.last().days>40 && fixedDurations.last().type==DurationType.DAM_IN_NIFAAS_PERIOD){\n        if(fixedDurations.last().biggerThanForty!!.durationsList.last().type==DurationType.HAIZ||\n            fixedDurations.last().biggerThanForty!!.durationsList.last().type==DurationType.LESS_THAN_3_HAIZ){\n            var date = addTimeToDate(fixedDurations.last().biggerThanForty!!.durationsList.last().startTime,fixedDurations.last().biggerThanForty!!.haiz)\n            return FutureDateType(date,TypesOfFutureDates.END_OF_AADAT_HAIZ)\n        }\n    }\n\n\n    //if there is a daur situation, and person is currently in a state of paki\n    //give end date of yaqeeni paki\n\n    if(fixedDurations.last().days>10&&fixedDurations.last().type==DurationType.DAM) {\n        if(fixedDurations.last().biggerThanTen!!.durationsList.last().type==DurationType.ISTIHAZA_AFTER){\n            val date = addTimeToDate(fixedDurations.last().biggerThanTen!!.durationsList.last().startTime, fixedDurations.last().biggerThanTen!!.aadatTuhr)\n            //if bigger than 10, ended in istihaza\n            return FutureDateType(date,TypesOfFutureDates.END_OF_AADAT_TUHR)\n        }\n\n    }else if(fixedDurations.last().days>40 && fixedDurations.last().type==DurationType.DAM_IN_NIFAAS_PERIOD){\n        if(fixedDurations.last().biggerThanForty!!.durationsList.last().type==DurationType.ISTIHAZA_AFTER){\n            val date = addTimeToDate(fixedDurations.last().biggerThanForty!!.durationsList.last().startTime, fixedDurations.last().biggerThanForty!!.aadatTuhr)\n            //if bigger than 40, ended in istihaza\n            return FutureDateType(date,TypesOfFutureDates.END_OF_AADAT_TUHR)\n        }\n\n    }\n\n    return null\n}\nfun finalAadats(fixedDurations: MutableList<FixedDuration>, inputtedAadatTuhr: Long?, inputtedMawjoodaTuhr: Long?, isMawjoodaFasid: Boolean, adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>, adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>):AadatsOfHaizAndTuhr?{\n    if(fixedDurations.last().type==DurationType.DAM&&fixedDurations.last().days>10) {\n        val lastDurationOfBiggerThanTen = fixedDurations.last().biggerThanTen!!.durationsList.last()\n\n        return if (lastDurationOfBiggerThanTen.type == DurationType.ISTIHAZA_AFTER) {\n            //if it ended in paki\n            AadatsOfHaizAndTuhr(\n                fixedDurations.last().biggerThanTen!!.haiz,\n                fixedDurations.last().biggerThanTen!!.aadatTuhr\n            )\n        } else if (lastDurationOfBiggerThanTen.type == DurationType.LESS_THAN_3_HAIZ) {\n            //it ended in a haiz less than 3, no tension\n            if (fixedDurations.last().biggerThanTen!!.qism==Soortain.A_3){\n                println(\"!!!!!!GOT HERE !!!!!\")\n                return AadatsOfHaizAndTuhr(\n                    fixedDurations.last().biggerThanTen!!.hz,\n                    fixedDurations.last().biggerThanTen!!.gp\n                )\n            }else{\n                return AadatsOfHaizAndTuhr(\n                    fixedDurations.last().biggerThanTen!!.haiz,\n                    fixedDurations.last().biggerThanTen!!.aadatTuhr\n                )\n            }\n        } else {\n            return AadatsOfHaizAndTuhr(\n                fixedDurations.last().biggerThanTen!!.haiz,\n                fixedDurations.last().biggerThanTen!!.aadatTuhr\n            )\n        }\n    }else if(fixedDurations.last().type==DurationType.DAM_MUBTADIA&&fixedDurations.last().days>10){\n        //this is a bigger than 10 mubtadia dam and the last thing\n        return AadatsOfHaizAndTuhr(\n            fixedDurations.last().biggerThanTen!!.aadatHaiz,\n            fixedDurations.last().biggerThanTen!!.aadatTuhr\n        )\n    }else if(fixedDurations.last().days>40 && fixedDurations.last().type==DurationType.DAM_IN_NIFAAS_PERIOD){\n        val lastDurationBiggerThanForty = fixedDurations.last().biggerThanForty!!.durationsList.last()\n\n        return if(lastDurationBiggerThanForty.type==DurationType.ISTIHAZA_AFTER){\n            //if it ended in paki, no tension\n            AadatsOfHaizAndTuhr(fixedDurations.last().biggerThanForty!!.haiz,fixedDurations.last().biggerThanForty!!.aadatTuhr)\n        }else if(lastDurationBiggerThanForty.type==DurationType.LESS_THAN_3_HAIZ){\n            //it ended in a haiz less than 3, no tension\n            AadatsOfHaizAndTuhr(fixedDurations.last().biggerThanForty!!.haiz,fixedDurations.last().biggerThanForty!!.aadatTuhr)\n        }else{\n            //it ended in a hiaz more than 3. We are not going to give that haiz as aadat\n            AadatsOfHaizAndTuhr(fixedDurations.last().biggerThanForty!!.haiz,fixedDurations.last().biggerThanForty!!.aadatTuhr)\n        }\n    }else if(fixedDurations.last().days<=10 &&\n        (fixedDurations.last().type==DurationType.DAM||fixedDurations.last().type==DurationType.DAM_MUBTADIA)){\n        //this portion is done\n        val aadatHaiz = fixedDurations.last().timeInMilliseconds\n        var aadatTuhr:Long\n        if(fixedDurations.last().type==DurationType.DAM_MUBTADIA){\n            aadatTuhr=-1\n            return AadatsOfHaizAndTuhr(aadatHaiz,aadatTuhr)\n        }\n        println(\"${adatsOfHaizList.last().aadat}\")\n        println(\"${adatsOfTuhrList.last().aadat}\")\n        return AadatsOfHaizAndTuhr(adatsOfHaizList.last().aadat,adatsOfTuhrList.last().aadat)\n//        var i = fixedDurations.lastIndex\n//        while (i>0){\n//            i--\n//            if(fixedDurations[i].type == DurationType.TUHR ||\n//                    fixedDurations[i].type==DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW){\n//                aadatTuhr=fixedDurations[i].timeInMilliseconds\n//                return AadatsOfHaizAndTuhr(aadatHaiz,aadatTuhr)\n//            }else if((fixedDurations[i].type==DurationType.DAM && fixedDurations[i].days>10)||\n//                (fixedDurations[i].type==DurationType.DAM_MUBTADIA && fixedDurations[i].days>10)){\n//                aadatTuhr = fixedDurations[i].biggerThanTen!!.aadatTuhr\n//                return AadatsOfHaizAndTuhr(aadatHaiz, aadatTuhr)\n//            }else if(fixedDurations[i].type==DurationType.DAM_IN_NIFAAS_PERIOD &&\n//                    fixedDurations[i].timeInMilliseconds>=(40+15+3)*MILLISECONDS_IN_A_DAY){\n//                aadatTuhr= fixedDurations[i].biggerThanForty!!.aadatTuhr\n//                return AadatsOfHaizAndTuhr(aadatHaiz, aadatTuhr)\n//            }\n//        }\n//        if (i==0){\n//            //we gotta access inputted, if any\n//            if(!isMawjoodaFasid && inputtedMawjoodaTuhr!=null){\n//                aadatTuhr=inputtedMawjoodaTuhr\n//            }else if(inputtedAadatTuhr!=null){\n//                aadatTuhr=inputtedAadatTuhr\n//            }else{\n//                aadatTuhr=-1\n//            }\n//            return AadatsOfHaizAndTuhr(aadatHaiz, aadatTuhr)\n//        }\n\n    }else if(fixedDurations.last().days<=40 && fixedDurations.last().type==DurationType.DAM_IN_NIFAAS_PERIOD){\n\n    }else{\n\n    }\n    return null\n}\n\nfun calculateFilHaal(fixedDurations: MutableList<FixedDuration>):Boolean{\n    //calculate filHaal status\n    var filHaalPaki:Boolean = false\n\n    if(fixedDurations.last().type==DurationType.DAM){\n\n        if(fixedDurations.last().days>10){\n            val aadatTuhr = fixedDurations.last().biggerThanTen!!.aadatTuhr\n            val aadatHaz = fixedDurations.last().biggerThanTen!!.aadatHaiz\n            val lastDurationType = fixedDurations.last().biggerThanTen!!.durationsList.last().type\n            val lastDurationTime = fixedDurations.last().biggerThanTen!!.durationsList.last().timeInMilliseconds\n            if(lastDurationType==DurationType.LESS_THAN_3_HAIZ){\n                filHaalPaki=false\n            }else if(lastDurationType==DurationType.HAIZ){\n                if(aadatHaz>lastDurationTime){\n                    filHaalPaki=false\n                }else {\n                    filHaalPaki = true\n                }\n            }else if(lastDurationType==DurationType.ISTIHAZA_AFTER){\n                if(aadatTuhr>lastDurationTime){\n                    val qism = fixedDurations.last().biggerThanTen!!.qism\n                    val ayyameQabliyya = fixedDurations.last().biggerThanTen!!.gp-fixedDurations.last().biggerThanTen!!.mp\n                    if(qism==Soortain.A_3 &&\n                        ayyameQabliyya<=fixedDurations.last().timeInMilliseconds) {\n                        filHaalPaki=false\n                    }else{\n                        filHaalPaki=true\n                    }\n                }else{\n                    filHaalPaki=false\n                }\n            }\n        }else{\n            filHaalPaki=false\n        }\n    }else if(fixedDurations.last().type==DurationType.DAM_MUBTADIA){\n        if(fixedDurations.last().days>10){\n            var aadatTuhr:Long\n            var aadatHaz = fixedDurations.last().biggerThanTen!!.aadatHaiz\n            val lastDurationType = fixedDurations.last().biggerThanTen!!.durationsList.last().type\n            val lastDurationTime = fixedDurations.last().biggerThanTen!!.durationsList.last().timeInMilliseconds\n            if(aadatHaz==-1L){\n                aadatHaz=10\n            }\n            aadatTuhr=30-aadatHaz\n            if(lastDurationType==DurationType.LESS_THAN_3_HAIZ){\n                filHaalPaki=false\n            }else if(lastDurationType==DurationType.HAIZ){\n                if(aadatHaz>lastDurationTime){\n                    filHaalPaki=false\n                }else{\n                    filHaalPaki=true\n                }\n            }else if(lastDurationType==DurationType.ISTIHAZA_AFTER){\n                if(aadatTuhr>lastDurationTime){\n                    filHaalPaki=true\n                }else{\n                    filHaalPaki=false\n                }\n            }\n        }\n    }else if(fixedDurations.last().type==DurationType.DAM_IN_NIFAAS_PERIOD){\n        if(fixedDurations.last().days>40){\n            var aadatTuhr=fixedDurations.last().biggerThanForty!!.aadatTuhr\n            var aadatHaz = fixedDurations.last().biggerThanForty!!.aadatHaiz\n            val lastDurationType = fixedDurations.last().biggerThanForty!!.durationsList.last().type\n            val lastDurationTime = fixedDurations.last().biggerThanForty!!.durationsList.last().timeInMilliseconds\n            if(lastDurationType==DurationType.ISTIHAZA_AFTER){\n                if(aadatTuhr==-1L){\n                    filHaalPaki=true\n                }else if(aadatTuhr>lastDurationTime){\n                    filHaalPaki=true\n                }else{\n                    filHaalPaki=false\n                }\n            }else if(lastDurationType==DurationType.HAIZ){\n                if(aadatHaz==-1L){\n                    //this shouldn't happen\n                    filHaalPaki=false\n                }else if(aadatHaz>lastDurationTime){\n                    filHaalPaki=false\n                }else{\n                    filHaalPaki=true\n                }\n            }else if(lastDurationType==DurationType.LESS_THAN_3_HAIZ){\n                filHaalPaki=false\n            }\n        }\n    }else{\n        filHaalPaki=false\n    }\n    return filHaalPaki\n}","import kotlin.js.Date\nfun generateOutputStringPregnancy(fixedDurations: MutableList<FixedDuration>,\n                         isDateOnly:Boolean, pregnancy: Pregnancy, endingOutputValues: EndingOutputValues, isDuration: Boolean):OutputTexts{\n    var englishStr = \"\"\n    var urduStr = \"\"\n    val hazDatesList = getHaizDatesList(fixedDurations)\n    urduStr+= generateUrduOutputStringPregnancy(fixedDurations,isDateOnly,pregnancy, endingOutputValues, isDuration)\n    englishStr+= \"\\n\\n${generateEnglishOutputStringPregnancy(fixedDurations,isDateOnly,pregnancy, endingOutputValues, isDuration)}\"\n\n    val hazDatesStr = generateHazDatesStr(hazDatesList,isDateOnly)\n\n    return OutputTexts(englishStr,urduStr, \"\",hazDatesList,endingOutputValues, fixedDurations)\n}\nfun generateOutputStringMubtadia(fixedDurations: MutableList<FixedDuration>,durations: List<Duration>,\n                         isDateOnly:Boolean, endingOutputValues: EndingOutputValues, isDuration: Boolean):OutputTexts{\n    var index = 0\n    var englishStr = \"\"\n    val hazDatesList = getHaizDatesList(fixedDurations)\n    val urduStr = generateUrduOutputString(fixedDurations, isDateOnly, endingOutputValues, isDuration)\n    englishStr += \"\\n\\n${generateEnglishOutputString(fixedDurations, isDateOnly, endingOutputValues, isDuration)}\"\n\n    val hazDatesStr = generateHazDatesStr(hazDatesList,isDateOnly)\n\n    return OutputTexts(englishStr,urduStr, hazDatesStr, hazDatesList,endingOutputValues, fixedDurations)\n}\nfun generateOutputStringMutadah(fixedDurations: MutableList<FixedDuration>,durations: List<Duration>,\n                         isDateOnly:Boolean, endingOutputValues: EndingOutputValues, isDuration: Boolean):OutputTexts{\n    var index = 0\n    var englishStr = \"\"\n    val hazDatesList = getHaizDatesList(fixedDurations)\n\n//    while (index<fixedDurations.size){\n//        englishStr += outputStringHeaderLine(fixedDurations,index, isDateOnly)\n//        englishStr += outputStringSumOfIndicesLine(fixedDurations,durations, index, isDateOnly)\n//        englishStr += outputStringIstihazaAfterLine(fixedDurations, index, isDateOnly)\n//        englishStr += outputStringBiggerThan10Hall(fixedDurations, index, isDateOnly)\n//\n//\n//        index++\n//    }\n\n    val urduStr = generateUrduOutputString(fixedDurations, isDateOnly, endingOutputValues, isDuration)\n    englishStr += \"\\n\\n${generateEnglishOutputString(fixedDurations, isDateOnly, endingOutputValues, isDuration)}\"\n\n    val hazDatesStr = generateHazDatesStr(hazDatesList,isDateOnly)\n\n    return OutputTexts(englishStr,urduStr, hazDatesStr, hazDatesList,endingOutputValues, fixedDurations)\n}\n\nfun generateHazDatesStr(hazDatesList: MutableList<Entry>,isDateOnly: Boolean):String{\n    var str = \"\"\n    for(entry in hazDatesList){\n        str+=\"From ${parseDate(entry.startTime,isDateOnly)} to ${parseDate(entry.endTime,isDateOnly)}<br>\"\n    }\n    return str\n}\n\nfun generateUrduOutputStringPregnancy(fixedDurations: MutableList<FixedDuration>, isDateOnly: Boolean, pregnancy: Pregnancy, endingOutputValues: EndingOutputValues, isDuration: Boolean):String{\n    val mustabeen = pregnancy.mustabeenUlKhilqat\n//    var startTimeOfPregnancy = pregnancy.pregStartTime.getTime()\n    val birthTime = pregnancy.birthTime\n    var str = StringsOfLanguages.URDU.answer\n\n    if(mustabeen){\n        if(fixedDurations[0].type!=DurationType.HAML){\n            str += StringsOfLanguages.URDU.beforepregheader\n        }\n        for(index in fixedDurations.indices){\n            if(isDuration){\n                str += outputStringUrduHeaderLineDuration(fixedDurations,index, isDateOnly)\n                str += outputStringUrduBiggerThan10HallDurations(fixedDurations,index, isDateOnly)\n                str += outputStringUrduBiggerThan40HallDuration(fixedDurations,index, isDateOnly)\n                if(fixedDurations[index].type==DurationType.HAML){\n                    str += StringsOfLanguages.URDU.pregduration\n                }\n                if(fixedDurations[index].type==DurationType.WILADAT_ISQAT){\n                    str += StringsOfLanguages.URDU.birthduration\n                }\n\n            }else{\n                str += outputStringUrduHeaderLine(fixedDurations,index, isDateOnly)\n                str += outputStringUrduBiggerThan10Hall(fixedDurations,index, isDateOnly)\n                str += outputStringUrduBiggerThan40Hall(fixedDurations,index, isDateOnly)\n                if(fixedDurations[index].type==DurationType.HAML){\n                    str += StringsOfLanguages.URDU.preg\n                }\n                if(fixedDurations[index].type==DurationType.WILADAT_ISQAT){\n                    str += StringsOfLanguages.URDU.birth.replace(\"date1\", \"${urduDateFormat(birthTime, isDateOnly)}\")\n                    if(index<fixedDurations.size-2){//if there is something after wiladat\n                        str += StringsOfLanguages.URDU.afterpregheader\n                    }\n                }\n\n            }\n\n        }\n        str += outputStringUrduFinalLines(isDateOnly, endingOutputValues, isDuration)\n\n\n\n    }else{//if it is ghair mustabeenulkhilqat\n        str += StringsOfLanguages.URDU.headerline\n\n        for(index in fixedDurations.indices){\n            str += outputStringUrduHeaderLine(fixedDurations,index, isDateOnly)\n            str += outputStringUrduBiggerThan10Hall(fixedDurations,index, isDateOnly)\n            if(fixedDurations[index].type==DurationType.HAML){\n                str += StringsOfLanguages.URDU.preg\n            }\n            if(fixedDurations[index].type==DurationType.WILADAT_ISQAT){\n                str += StringsOfLanguages.URDU.earlymiscarriage.replace(\"date1\", \"${urduDateFormat(birthTime, isDateOnly)}\")\n                if(index<fixedDurations.size-2){//if there is something after wiladat\n                    str += StringsOfLanguages.URDU.afterpregheader\n                }\n            }\n\n        }\n        str += outputStringUrduFinalLines (isDateOnly, endingOutputValues, isDuration)\n\n    }\n\n\n    return str\n}\n\nfun generateUrduOutputString(fixedDurations: MutableList<FixedDuration>, isDateOnly: Boolean, endingOutputValues: EndingOutputValues, isDuration:Boolean):String{\n    //ToDo: figure out how to do languages for real\n    var str = StringsOfLanguages.URDU.answer //جواب:\n    str += StringsOfLanguages.URDU.headerline //اس ترتیب سے خون آیا اور پاکی ملی\n    var index = 0\n    while (index<fixedDurations.size){\n        if(isDuration){\n            str += outputStringUrduHeaderLineDuration(fixedDurations,index, isDateOnly) //اس تاریخ سے اس تاریخ تک اتنے دن حیض\n            str += outputStringUrduBiggerThan10HallDurations(fixedDurations,index, isDateOnly)\n            if(index==fixedDurations.size-1){//if this os the last index\n                str += outputStringUrduFinalLines(isDateOnly, endingOutputValues, isDuration)\n            }\n        }else{\n            str += outputStringUrduHeaderLine(fixedDurations,index, isDateOnly) //اس تاریخ سے اس تاریخ تک اتنے دن حیض\n            str += outputStringUrduBiggerThan10Hall(fixedDurations,index, isDateOnly)\n            if(index==fixedDurations.size-1){//if this os the last index\n                str += outputStringUrduFinalLines(isDateOnly, endingOutputValues, isDuration)\n            }\n        }\n        index++\n    }\n    return str\n}\nfun generateUrduOutputStringMubtadia(fixedDurations: MutableList<FixedDuration>, isDateOnly: Boolean, endingOutputValues: EndingOutputValues, isDuration: Boolean):String{\n    //ToDo: figure out how to do languages for real\n    var str = StringsOfLanguages.URDU.answer //جواب:\n    str += StringsOfLanguages.URDU.headerlinemubtadia //اس ترتیب سے خون آیا اور پاکی ملی\n    var index = 0\n    while (index<fixedDurations.size){\n        str += outputStringUrduHeaderLine(fixedDurations,index, isDateOnly)\n        str += outputStringUrduBiggerThan10Hall(fixedDurations,index, isDateOnly)\n        if(index==fixedDurations.size-1){//if this os the last index\n            str += outputStringUrduFinalLines(isDateOnly, endingOutputValues, isDuration)\n        }\n        index++\n    }\n    return str\n}\n\nfun outputStringUrduFinalLines(isDateOnly: Boolean, endingOutputValues: EndingOutputValues, isDuration: Boolean):String{\n\n    var strUrdu = \"\"\n    val aadats = endingOutputValues.aadats\n    strUrdu+=outputStringUrduAadatLine(isDateOnly, aadats)\n    if(isDuration){return strUrdu}\n    val filHaal = endingOutputValues.filHaalPaki\n    strUrdu+=outputStringUrduFilHaalLine(filHaal)\n    val futureDates = endingOutputValues.futureDateType\n    strUrdu+=outputStringUrduAskAgainLine(isDateOnly, futureDates)\n\n    //plis note down line\n    strUrdu+=StringsOfLanguages.URDU.writedown\n\n    //Allahu Aaalam line\n    strUrdu+=StringsOfLanguages.URDU.allahknows\n\n    return strUrdu\n}\nfun outputStringUrduFilHaalLine(filHaalPaki:Boolean):String{\n    val filHaalPakiStr = StringsOfLanguages.URDU.currentpaki\n    val filHaalHaizStr = StringsOfLanguages.URDU.currenthaiz\n    return if(filHaalPaki){\n        filHaalPakiStr\n    }else{\n        filHaalHaizStr\n    }\n//    //right now, we are just going to check to see what last halat is\n//    var istihazaAfter = fixedDurations[index].biggerThanTen?.istihazaAfter ?: return \"\"\n//    var aadatHaiz = fixedDurations[index].biggerThanTen?.aadatHaiz ?: return \"\"\n//    var aadatTuhr = fixedDurations[index].biggerThanTen?.aadatTuhr ?: return \"\"\n//    if(istihazaAfter==0L){//last halat is haiz\n//        strUrdu+=filHaalHaizStr\n//    }else if(istihazaAfter>=aadatTuhr+3){//last period is long istihaza, lets's figure out more\n//        //find remainder\n//        var remainder = istihazaAfter%(aadatHaiz+aadatTuhr)\n//\n//        if (remainder<aadatTuhr + 3 && remainder!=0L){//it ended in tuhr\n//            strUrdu+=filHaalPakiStr\n//        }else{//it ended in haiz or remainder is 0\n//             if (remainder!=0L){//it ended in haiz\n//                 strUrdu+=filHaalHaizStr\n//            }else{//it ended in tuhr\n//                strUrdu+=filHaalPakiStr\n//            }\n//        }\n//    }else{//last halat is short istihaza\n//        strUrdu+=filHaalPakiStr\n//    }\n\n//    return strUrdu\n}\n\nfun outputStringUrduAskAgainLine(isDateOnly: Boolean, futureDateType: FutureDateType?):String{\n    var strUrdu = \"\"\n    if (futureDateType==null){\n        return \"\"\n    }\n    val futureDate= futureDateType.date\n    val futureDatesType = futureDateType.futureDates\n    if(futureDatesType==TypesOfFutureDates.A3_CHANGING_TO_A2){\n        strUrdu += StringsOfLanguages.URDU.situationmaychange.replace(\"date1\", \"${urduDateFormat(futureDate, isDateOnly)}\")\n    }else if(futureDatesType==TypesOfFutureDates.END_OF_AADAT_HAIZ){\n        strUrdu += StringsOfLanguages.URDU.haizend.replace(\"date1\", \"${urduDateFormat(futureDate, isDateOnly)}\")\n        strUrdu += StringsOfLanguages.URDU.ihtiyatighusl.replace(\"date1\", \"${urduDateFormat(futureDate, isDateOnly)}\")\n        //sex line\n        strUrdu += StringsOfLanguages.URDU.sexnotallowed.replace(\"date1\", \"${urduDateFormat(futureDate, isDateOnly)}\")\n    }else if(futureDatesType==TypesOfFutureDates.END_OF_AADAT_TUHR){\n        strUrdu += StringsOfLanguages.URDU.endofpaki.replace(\"date1\", \"${urduDateFormat(futureDate, isDateOnly)}\")\n\n    }\n    return strUrdu\n\n//    //my understanding is, that ask again line only gets generated if the fil haal is istihazaAfter\n//    var istihazaAfter = fixedDurations[index].biggerThanTen?.istihazaAfter ?: return \"\"\n//    var aadatHaiz = fixedDurations[index].biggerThanTen?.aadatHaiz ?: return \"\"\n//    var aadatTuhr = fixedDurations[index].biggerThanTen?.aadatTuhr ?: return \"\"\n//\n//\n//    if(istihazaAfter!=0L){//if there is an istihaza after\n//        var endDateOfBleeding = fixedDurations[index].startDate?.let { addTimeToDate(it, fixedDurations[index].timeInMilliseconds) }\n//        var askAgainDate:Date? = null\n//        if(istihazaAfter>=aadatTuhr+3){//if istihazaAfter is long\n//            //find remainder\n//            var remainder = istihazaAfter%(aadatHaiz+aadatTuhr)\n//            if (remainder < aadatTuhr+3){//it ended in istihaza\n//                var startTimeOfIstihaza = endDateOfBleeding?.let { addTimeToDate(it, -remainder) }\n//                askAgainDate = startTimeOfIstihaza?.let { addTimeToDate(it, aadatTuhr) }!!\n//            }else{//it ended in haiz\n//\n//            }\n//\n//        }else{//short istihazaAfter\n//            if(fixedDurations[index].biggerThanTen?.qism==Soortain.A_3){\n//                //this can change to A2. gotta figure out when. set ask again to then.\n//            }else{\n//                var endDateOfHaiz = endDateOfBleeding?.let { addTimeToDate(it, -(istihazaAfter)) }\n//                askAgainDate = endDateOfHaiz?.let { addTimeToDate(it, (aadatTuhr)) }!!\n//            }\n//        }\n//        if(askAgainDate!=null){\n//            strUrdu = \"اگر خون اسی طرح جاری رہے یا فی الحال بند ہوجائے لیکن پندرہ دن کی کامل پاکی نہیں ملی کہ دوبارہ خون یا دھبہ آگیا تب پھر<b> ${urduDateFormat(askAgainDate, isDateOnly)} تک آپ کے یقینی پاکی کے دن ہونگے۔</b>\\n\\n\"\n//        }\n//    }\n//\n//    return strUrdu\n}\nfun outputStringUrduAadatLine(isDateOnly: Boolean, aadats:AadatsOfHaizAndTuhr?):String{\n    var strUrdu = \"\"\n\n    return if(aadats==null){\n        println(\"aadats were null\")\n        \"\"\n    }else{\n        val aadatTuhr = aadats.aadatTuhr\n        val aadatHaiz = aadats.aadatHaiz\n        if(aadatHaiz==-1L && aadatTuhr==-1L){\n            strUrdu+= StringsOfLanguages.URDU.thereisnoaadat\n        }else if(aadatHaiz!=-1L && aadatTuhr==-1L){\n            println(\"aadat of haiz is ${daysHoursMinutesDigital(aadatHaiz,isDateOnly)}\")\n            strUrdu+= StringsOfLanguages.URDU.aadatofhaizonly.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(aadatHaiz, isDateOnly)}\")\n        }else{\n            strUrdu+= StringsOfLanguages.URDU.habit.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(aadatHaiz, isDateOnly)}\").replace(\"duration2\", \"${daysHoursMinutesDigitalUrdu(aadatTuhr, isDateOnly)}\")\n        }\n        strUrdu\n    }\n\n//    var aadatHaiz = fixedDurations[index].biggerThanTen?.aadatHaiz ?: return \"\"\n//    var aadatTuhr = fixedDurations[index].biggerThanTen?.aadatTuhr ?: return \"\"\n//    var istihazaAfter = fixedDurations[index].biggerThanTen?.istihazaAfter ?: return \"\"\n//\n//    if (istihazaAfter>=aadatTuhr+3) {//if we have a long istihaza after, there is a possibility that aadat changed\n//        //find remainder\n//        var remainder = istihazaAfter % (aadatHaiz + aadatTuhr)\n//        if (remainder<aadatTuhr + 3 && remainder!=0L){//it ended in tuhr, so aadat doesn't change\n//\n//        }else{//it ended in haiz or remainder is 0 (which means ending in tuhr)\n//            //change aadatHaiz if remainder is not zero (if it is zero, aadat doesn't change, so shouldn't be printed\n//            if (remainder!=0L){\n//                val aadatHaiz = (remainder-aadatTuhr).toString()\n//            }\n//        }\n//    }\n//\n//    strUrdu+=\"${UnicodeChars.GREEN_CIRCLE} <b>عادت:: حیض: ${daysHoursMinutesDigitalUrdu(aadatHaiz, isDateOnly)}، طہر: ${daysHoursMinutesDigitalUrdu(aadatTuhr, isDateOnly)}</b>\\n\\n\"\n//\n//    return strUrdu\n}\nfun outputStringUrduBiggerThan10HallDurations(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n    var strUrdu = \"\"\n\n    if((fixedDurations[index].days>10 &&\n                (fixedDurations[index].type==DurationType.DAM||\n                        fixedDurations[index].type==DurationType.DAM_MUBTADIA))){\n\n          strUrdu += TAB\n\n        for(duration in fixedDurations[index].biggerThanTen!!.durationsList){\n            if(duration.type == DurationType.ISTIHAZA_BEFORE){\n                strUrdu+= StringsOfLanguages.URDU.startingFromIstehaza.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, isDateOnly)}\")\n\n            }else if(duration.type == DurationType.HAIZ){\n                if(duration==fixedDurations[index].biggerThanTen!!.durationsList[0]){\n                    strUrdu+= StringsOfLanguages.URDU.startingFromHaiz.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, isDateOnly)}\")\n                }else{\n                    strUrdu+= StringsOfLanguages.URDU.followedByHaizAfter.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, isDateOnly)}\")\n                }\n            }else if(duration.type == DurationType.ISTIHAZA_AFTER){\n                strUrdu+= StringsOfLanguages.URDU.followedByistehazaAfter.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, isDateOnly)}\")\n\n            }else if(duration.type == DurationType.LESS_THAN_3_HAIZ){\n                strUrdu+= StringsOfLanguages.URDU.followedByHaizAfter.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, isDateOnly)}\")\n                //maybe we'll wanna add something about itibaar bil khawateem\n            }else if(duration.type == DurationType.NIFAAS){\n                strUrdu+= StringsOfLanguages.URDU.startingFromNifas\n            }\n        }\n    }\n    if(strUrdu!=\"\"){\n        strUrdu+=StringsOfLanguages.URDU.khatimaplusnewline\n    }\n\n    return strUrdu\n}\nfun outputStringEnglishBiggerThan10HallDurations(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n    var strEnglish = \"\"\n\n    if((fixedDurations[index].days>10 &&\n                (fixedDurations[index].type==DurationType.DAM||\n                        fixedDurations[index].type==DurationType.DAM_MUBTADIA))){\n\n        strEnglish += TAB\n\n        for(duration in fixedDurations[index].biggerThanTen!!.durationsList){\n            if(duration.type == DurationType.ISTIHAZA_BEFORE){\n                strEnglish+= StringsOfLanguages.ENGLISH.startingFromIstehaza.replace(\"duration1\", \"${daysHoursMinutesDigital(duration.timeInMilliseconds, isDateOnly)}\")\n\n            }else if(duration.type == DurationType.HAIZ){\n                if(duration==fixedDurations[index].biggerThanTen!!.durationsList[0]){\n                    strEnglish+= StringsOfLanguages.ENGLISH.startingFromHaiz.replace(\"duration1\", \"${daysHoursMinutesDigital(duration.timeInMilliseconds, isDateOnly)}\")\n                }else{\n                    strEnglish+= StringsOfLanguages.ENGLISH.followedByHaizAfter.replace(\"duration1\", \"${daysHoursMinutesDigital(duration.timeInMilliseconds, isDateOnly)}\")\n                }\n            }else if(duration.type == DurationType.ISTIHAZA_AFTER){\n                strEnglish+= StringsOfLanguages.ENGLISH.followedByistehazaAfter.replace(\"duration1\", \"${daysHoursMinutesDigital(duration.timeInMilliseconds, isDateOnly)}\")\n\n            }else if(duration.type == DurationType.LESS_THAN_3_HAIZ){\n                strEnglish+= StringsOfLanguages.ENGLISH.followedByHaizAfter.replace(\"duration1\", \"${daysHoursMinutesDigital(duration.timeInMilliseconds, isDateOnly)}\")\n                //maybe we'll wanna add something about itibaar bil khawateem\n            }else if(duration.type == DurationType.NIFAAS){\n                strEnglish+= StringsOfLanguages.ENGLISH.startingFromNifas\n            }\n        }\n    }\n    if(strEnglish!=\"\"){\n        strEnglish+=StringsOfLanguages.ENGLISH.khatimaplusnewline\n    }\n\n    return strEnglish\n}\n\nfun outputStringUrduBiggerThan10Hall(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n    var strUrdu = \"\"\n\n    fun haizLineUrdu(sd:Date,ed:Date, isDateOnly: Boolean):String{\n        return StringsOfLanguages.URDU.haizdaysinsolution.replace(\"date1\", \"${urduDateFormat(sd, isDateOnly)}\").replace(\"date2\", \"${urduDateFormat(ed,isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu((difference(sd,ed)), isDateOnly)}\")\n    }\n    fun istihazaLineUrdu(sd:Date,ed:Date, isDateOnly: Boolean):String{\n        return StringsOfLanguages.URDU.istihazadays.replace(\"date1\", \"${urduDateFormat(sd, isDateOnly)}\").replace(\"date2\", \"${urduDateFormat(ed,isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(difference(sd,ed), isDateOnly)}\")\n    }\n\n    if((fixedDurations[index].days>10 &&\n        (fixedDurations[index].type==DurationType.DAM||\n        fixedDurations[index].type==DurationType.DAM_MUBTADIA))){\n\n        strUrdu += StringsOfLanguages.URDU.dashesline\n        strUrdu += StringsOfLanguages.URDU.solution\n\n        for(duration in fixedDurations[index].biggerThanTen!!.durationsList){\n            if(duration.type == DurationType.ISTIHAZA_BEFORE){\n                strUrdu+= istihazaLineUrdu(duration.startTime,duration.endDate,isDateOnly)\n                strUrdu+= StringsOfLanguages.URDU.istihazadetailslineone\n\n            }else if(duration.type == DurationType.HAIZ){\n                strUrdu+= haizLineUrdu(duration.startTime,duration.endDate,isDateOnly)\n\n            }else if(duration.type == DurationType.ISTIHAZA_AFTER){\n                strUrdu+= istihazaLineUrdu(duration.startTime,duration.endDate,isDateOnly)\n                strUrdu+= StringsOfLanguages.URDU.istihazadetailslinetwo.replace(\"date1\", \"${urduDateFormat(duration.startTime,isDateOnly)}\")\n                strUrdu+= StringsOfLanguages.URDU.istihazadetailslineone\n\n            }else if(duration.type == DurationType.LESS_THAN_3_HAIZ){\n                strUrdu+= haizLineUrdu(duration.startTime,duration.endDate,isDateOnly)\n                //maybe we'll wanna add something about itibaar bil khawateem\n            }\n        }\n\n        strUrdu += StringsOfLanguages.URDU.dashesline\n    }\n\n    return strUrdu\n}\nfun outputStringEnglishBiggerThan40HallDuration(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n\n    var strEnglish = \"\"\n    if(fixedDurations[index].days>40&&fixedDurations[index].type==DurationType.DAM_IN_NIFAAS_PERIOD){\n        strEnglish+=TAB\n        for(duration in fixedDurations[index].biggerThanForty!!.durationsList){\n            if(duration.type==DurationType.NIFAAS){\n                strEnglish+= StringsOfLanguages.ENGLISH.startingFromNifas.replace(\"duration1\", \"${daysHoursMinutesDigital(duration.timeInMilliseconds, isDateOnly)}\")\n            }else if(duration.type==DurationType.ISTIHAZA_AFTER){\n                strEnglish+= StringsOfLanguages.ENGLISH.followedByistehazaAfter.replace(\"duration1\", \"${daysHoursMinutesDigital(duration.timeInMilliseconds, isDateOnly)}\")\n            }else if(duration.type==DurationType.HAIZ){\n                strEnglish+= StringsOfLanguages.ENGLISH.followedByHaizAfter.replace(\"duration1\", \"${daysHoursMinutesDigital(duration.timeInMilliseconds, isDateOnly)}\")\n            }else if(duration.type == DurationType.LESS_THAN_3_HAIZ){\n                strEnglish+= StringsOfLanguages.ENGLISH.followedByHaizAfter.replace(\"duration1\", \"${daysHoursMinutesDigital(duration.timeInMilliseconds, isDateOnly)}\")\n                //maybe we'll wanna add something about itibaar bil khawateem\n            }\n        }\n    }\n    if(strEnglish!=\"\"){\n        strEnglish+=StringsOfLanguages.ENGLISH.khatimaplusnewline\n    }\n    return strEnglish\n}\nfun outputStringUrduBiggerThan40HallDuration(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n\n    var strUrdu = \"\"\n    if(fixedDurations[index].days>40&&fixedDurations[index].type==DurationType.DAM_IN_NIFAAS_PERIOD){\n        strUrdu+=TAB\n        for(duration in fixedDurations[index].biggerThanForty!!.durationsList){\n            if(duration.type==DurationType.NIFAAS){\n                strUrdu+= StringsOfLanguages.URDU.startingFromNifas.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, isDateOnly)}\")\n            }else if(duration.type==DurationType.ISTIHAZA_AFTER){\n                strUrdu+= StringsOfLanguages.URDU.followedByistehazaAfter.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, isDateOnly)}\")\n            }else if(duration.type==DurationType.HAIZ){\n                strUrdu+= StringsOfLanguages.URDU.followedByHaizAfter.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, isDateOnly)}\")\n            }else if(duration.type == DurationType.LESS_THAN_3_HAIZ){\n                strUrdu+= StringsOfLanguages.URDU.followedByHaizAfter.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, isDateOnly)}\")\n                //maybe we'll wanna add something about itibaar bil khawateem\n            }\n        }\n         }\n    if(strUrdu!=\"\"){\n        strUrdu+=StringsOfLanguages.URDU.khatimaplusnewline\n    }\n    return strUrdu\n}\nfun outputStringUrduBiggerThan40Hall(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n\n    var strUrdu = \"\"\n\n    fun nifasLineUrdu(sd:Date,ed:Date, isDateOnly: Boolean):String{\n        return StringsOfLanguages.URDU.nifasdaysinsolution.replace(\"date1\", \"${urduDateFormat(sd, isDateOnly)}\").replace(\"date2\", \"${urduDateFormat(ed,isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu((difference(sd,ed)), isDateOnly)}\")\n    }\n    fun haizLineUrdu(sd:Date,ed:Date, isDateOnly: Boolean):String{\n        return StringsOfLanguages.URDU.haizdaysinsolution.replace(\"date1\",\"${urduDateFormat(sd, isDateOnly)}\").replace(\"date2\", \"${urduDateFormat(ed, isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu((difference(sd,ed)), isDateOnly)}\")\n    }\n    fun istihazaLineUrdu(sd:Date,ed:Date, isDateOnly: Boolean):String{\n        return StringsOfLanguages.URDU.istihazadays.replace(\"date1\", \"${urduDateFormat(sd, isDateOnly)}\").replace(\"date2\", \"${urduDateFormat(ed,isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(difference(sd,ed), isDateOnly)}\")\n    }\n\n    if(fixedDurations[index].days>40&&fixedDurations[index].type==DurationType.DAM_IN_NIFAAS_PERIOD){\n        strUrdu += StringsOfLanguages.URDU.dashesline\n        strUrdu += StringsOfLanguages.URDU.solution\n\n        for(duration in fixedDurations[index].biggerThanForty!!.durationsList){\n            if(duration.type==DurationType.NIFAAS){\n                strUrdu+= nifasLineUrdu(duration.startTime,duration.endDate, isDateOnly)\n            }else if(duration.type==DurationType.ISTIHAZA_AFTER){\n                strUrdu+= istihazaLineUrdu(duration.startTime,duration.endDate, isDateOnly)\n                strUrdu+= StringsOfLanguages.URDU.istihazadetailslinetwo.replace(\"date1\", \"${urduDateFormat(duration.startTime,isDateOnly)}\")\n                strUrdu+= StringsOfLanguages.URDU.istihazadetailslineone\n\n            }else if(duration.type==DurationType.HAIZ){\n                strUrdu+= haizLineUrdu(duration.startTime,duration.endDate, isDateOnly)\n\n            }else if(duration.type == DurationType.LESS_THAN_3_HAIZ){\n                strUrdu+= haizLineUrdu(duration.startTime,duration.endDate,isDateOnly)\n                //maybe we'll wanna add something about itibaar bil khawateem\n            }\n        }\n        strUrdu += StringsOfLanguages.URDU.dashesline\n    }\n\n    return strUrdu\n}\nfun outputStringUrduHeaderLineDuration(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n    //in duration we just give the fixed duration\n    var outputString = \"\"\n    if (fixedDurations[index].type==DurationType.DAM||\n        fixedDurations[index].type==DurationType.DAM_MUBTADIA){\n        val sd:Date = fixedDurations[index].startDate\n        val et = fixedDurations[index].endDate\n        if(fixedDurations[index].days in 3.0..10.0){//if it's between 3 and 10, write haiz\n            outputString = StringsOfLanguages.URDU.durationHaiz.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu((difference(sd,et)), isDateOnly)}\")\n        }else{//bigger than 10\n            outputString = StringsOfLanguages.URDU.durationDam.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu((difference(sd,et)), isDateOnly)}\")\n        }\n\n    }else if (fixedDurations[index].type == DurationType.TUHR||\n        fixedDurations[index].type == DurationType.TUHR_MUBTADIA||\n        fixedDurations[index].type==DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW){\n        val time = fixedDurations[index].timeInMilliseconds\n        outputString =  StringsOfLanguages.URDU.durationPaki.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(time, isDateOnly)}\")\n        if(fixedDurations[index].type == DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW){\n            outputString+=StringsOfLanguages.URDU.becamemutadah\n        }\n\n    }else if (fixedDurations[index].type == DurationType.TUHREFAASID||fixedDurations[index].type==DurationType.TUHREFAASID_MUBTADIA){\n        outputString =  StringsOfLanguages.URDU.durationTuhrefasid.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds, isDateOnly)}\")\n    }else if (fixedDurations[index].type==DurationType.TUHREFAASID_WITH_ISTEHAZA||\n        fixedDurations[index].type==DurationType.TUHREFAASID_MUBTADIA_WITH_ISTEHAZA){\n        outputString =  StringsOfLanguages.URDU.durationTuhreFasidWithAddition.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(fixedDurations[index].istihazaAfter, isDateOnly)}\").replace(\"duration2\", \"${daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds, isDateOnly)}\").replace(\"duration3\", \"${daysHoursMinutesDigitalUrdu((fixedDurations[index].istihazaAfter+fixedDurations[index].timeInMilliseconds), isDateOnly)}\")\n    }else if (fixedDurations[index].type == DurationType.DAM_IN_NIFAAS_PERIOD){\n        val sd = fixedDurations[index].startDate\n        val et = fixedDurations[index].endDate\n        if(fixedDurations[index].days<=40){\n            outputString = StringsOfLanguages.URDU.durationNifas.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu((difference(sd,et)), isDateOnly)}\")\n        }else{//more than 40\n            outputString = StringsOfLanguages.URDU.durationDam.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds,isDateOnly)}\")\n        }\n    }else if (fixedDurations[index].type == DurationType.TUHR_IN_HAML){\n\n    }else if (fixedDurations[index].type == DurationType.DAM_IN_HAML){\n\n    }else if (fixedDurations[index].type == DurationType.TUHR_BIGGER_THAN_6_MONTHS){\n        outputString = StringsOfLanguages.URDU.twomonthstuhr.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds,isDateOnly)}\")\n    }\n    return outputString\n}\nfun outputStringEnglishHeaderLineDuration(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n    //in duration we just give the fixed duration\n    var outputString = \"\"\n    if (fixedDurations[index].type==DurationType.DAM||\n        fixedDurations[index].type==DurationType.DAM_MUBTADIA){\n        val sd:Date = fixedDurations[index].startDate\n        val et = fixedDurations[index].endDate\n        if(fixedDurations[index].days in 3.0..10.0){//if it's between 3 and 10, write haiz\n            outputString = StringsOfLanguages.ENGLISH.durationHaiz.replace(\"duration1\", \"${daysHoursMinutesDigital((difference(sd,et)), isDateOnly)}\")\n        }else{//bigger than 10\n            outputString = StringsOfLanguages.ENGLISH.durationDam.replace(\"duration1\", \"${daysHoursMinutesDigital((difference(sd,et)), isDateOnly)}\")\n        }\n\n    }else if (fixedDurations[index].type == DurationType.TUHR||\n        fixedDurations[index].type == DurationType.TUHR_MUBTADIA||\n        fixedDurations[index].type==DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW){\n        val time = fixedDurations[index].timeInMilliseconds\n        outputString =  StringsOfLanguages.ENGLISH.durationPaki.replace(\"duration1\", \"${daysHoursMinutesDigital(time, isDateOnly)}\")\n        if(fixedDurations[index].type == DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW){\n            outputString+=StringsOfLanguages.ENGLISH.becamemutadah\n        }\n\n    }else if (fixedDurations[index].type == DurationType.TUHREFAASID||fixedDurations[index].type==DurationType.TUHREFAASID_MUBTADIA){\n        outputString =  StringsOfLanguages.ENGLISH.durationTuhrefasid.replace(\"duration1\", \"${daysHoursMinutesDigital(fixedDurations[index].timeInMilliseconds, isDateOnly)}\")\n    }else if (fixedDurations[index].type==DurationType.TUHREFAASID_WITH_ISTEHAZA||\n        fixedDurations[index].type==DurationType.TUHREFAASID_MUBTADIA_WITH_ISTEHAZA){\n        outputString =  StringsOfLanguages.ENGLISH.durationTuhreFasidWithAddition.replace(\"duration1\", \"${daysHoursMinutesDigital(fixedDurations[index].istihazaAfter, isDateOnly)}\").replace(\"duration2\", \"${daysHoursMinutesDigital(fixedDurations[index].timeInMilliseconds, isDateOnly)}\").replace(\"duration3\", \"${daysHoursMinutesDigital((fixedDurations[index].istihazaAfter+fixedDurations[index].timeInMilliseconds), isDateOnly)}\")\n    }else if (fixedDurations[index].type == DurationType.DAM_IN_NIFAAS_PERIOD){\n        val sd = fixedDurations[index].startDate\n        val et = fixedDurations[index].endDate\n        if(fixedDurations[index].days<=40){\n            outputString = StringsOfLanguages.ENGLISH.durationNifas.replace(\"duration1\", \"${daysHoursMinutesDigital((difference(sd,et)), isDateOnly)}\")\n        }else{//more than 40\n            outputString = StringsOfLanguages.ENGLISH.durationDam.replace(\"duration1\", \"${daysHoursMinutesDigital(fixedDurations[index].timeInMilliseconds,isDateOnly)}\")\n        }\n    }else if (fixedDurations[index].type == DurationType.TUHR_IN_HAML){\n\n    }else if (fixedDurations[index].type == DurationType.DAM_IN_HAML){\n\n    }else if (fixedDurations[index].type == DurationType.TUHR_BIGGER_THAN_6_MONTHS){\n        outputString = StringsOfLanguages.ENGLISH.twomonthstuhr.replace(\"duration1\", \"${daysHoursMinutesDigital(fixedDurations[index].timeInMilliseconds,isDateOnly)}\")\n    }\n    return outputString\n}\nfun outputStringUrduHeaderLine(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n    var outputString = \"\"\n    if (fixedDurations[index].type==DurationType.DAM||\n        fixedDurations[index].type==DurationType.DAM_MUBTADIA){\n        val sd:Date = fixedDurations[index].startDate\n        val et = fixedDurations[index].endDate\n        if(fixedDurations[index].days in 3.0..10.0){//if it's between 3 and 10, write haiz\n            outputString = StringsOfLanguages.URDU.haizdays.replace(\"date1\", \"${urduDateFormat(sd, isDateOnly)}\").replace(\"date2\", \"${urduDateFormat(et,isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu((difference(sd,et)), isDateOnly)}\")\n        }else{//bigger than 10\n            if (fixedDurations[index].indices.size>1){//this dam is made up of more than 1\n                outputString = StringsOfLanguages.URDU.continuosbleeding.replace(\"date1\", \"${urduDateFormat(sd, isDateOnly)}\").replace(\"date2\", \"${urduDateFormat(et, isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds,isDateOnly)}\")\n            }else{\n                outputString = StringsOfLanguages.URDU.blooddays.replace(\"date1\", \"${urduDateFormat(sd, isDateOnly)}\").replace(\"date2\", \"${urduDateFormat(et, isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds,isDateOnly)}\")\n            }\n        }\n\n    }else if (fixedDurations[index].type == DurationType.TUHR||\n        fixedDurations[index].type == DurationType.TUHR_MUBTADIA||\n        fixedDurations[index].type==DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW){\n        val time = fixedDurations[index].timeInMilliseconds\n        outputString =  StringsOfLanguages.URDU.pakidays.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(time, isDateOnly)}\")\n        if(fixedDurations[index].type == DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW){\n            outputString+=StringsOfLanguages.URDU.becamemutadah\n        }\n\n    }else if (fixedDurations[index].type == DurationType.TUHREFAASID||fixedDurations[index].type==DurationType.TUHREFAASID_MUBTADIA){\n        outputString =  StringsOfLanguages.URDU.tuhrfasid.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds, isDateOnly)}\")\n    }else if (fixedDurations[index].type==DurationType.TUHREFAASID_WITH_ISTEHAZA||\n        fixedDurations[index].type==DurationType.TUHREFAASID_MUBTADIA_WITH_ISTEHAZA){\n        outputString =  StringsOfLanguages.URDU.tuhrfasidwithaddition.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(fixedDurations[index].istihazaAfter, isDateOnly)}\").replace(\"duration2\", \"${daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds, isDateOnly)}\").replace(\"duration3\", \"${daysHoursMinutesDigitalUrdu((fixedDurations[index].istihazaAfter+fixedDurations[index].timeInMilliseconds), isDateOnly)}\")\n    }else if (fixedDurations[index].type == DurationType.DAM_IN_NIFAAS_PERIOD){\n        val sd = fixedDurations[index].startDate\n        val et = fixedDurations[index].endDate\n        if(fixedDurations[index].days<=40){\n            outputString = StringsOfLanguages.URDU.nifasdays.replace(\"date1\", \"${urduDateFormat(sd, isDateOnly)}\").replace(\"date2\", \"${urduDateFormat(et,isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu((difference(sd,et)), isDateOnly)}\")\n        }else{//more than 40\n            outputString = StringsOfLanguages.URDU.blooddays.replace(\"date1\", \"${urduDateFormat(sd, isDateOnly)}\").replace(\"date2\", \"${urduDateFormat(et, isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds,isDateOnly)}\")\n        }\n    }else if (fixedDurations[index].type == DurationType.TUHR_IN_HAML){\n\n    }else if (fixedDurations[index].type == DurationType.DAM_IN_HAML){\n\n    }else if (fixedDurations[index].type == DurationType.TUHR_BIGGER_THAN_6_MONTHS){\n        outputString = StringsOfLanguages.URDU.twomonthstuhr.replace(\"duration1\", \"${daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds,isDateOnly)}\")\n    }\n    return outputString\n}\n\nfun outputStringHeaderLine(fixedDurations: MutableList<FixedDuration>, index:Int, isDateOnly: Boolean):String{\n    if((index +1)< fixedDurations.size && fixedDurations[index+1].istihazaAfter>0){\n        return \"<b>${daysHoursMinutesDigital(fixedDurations[index].timeInMilliseconds,isDateOnly)} ${fixedDurations[index].type}</b>\\n\"\n    }else{\n        return \"<b>${daysHoursMinutesDigital(fixedDurations[index].timeInMilliseconds,isDateOnly)} ${fixedDurations[index].type}</b>\\n\"\n\n    }\n}\n\nfun outputStringSumOfIndicesLine(fixedDurations: MutableList<FixedDuration>, durations:List<Duration>, index:Int, isDateOnly: Boolean):String{\n    if(fixedDurations[index].indices.size>1){\n        var sum = 0L\n        var str = \"\"\n        for (index in fixedDurations[index].indices){\n            sum+=durations[index].timeInMilliseconds\n            str += \" + ${daysHoursMinutesDigital(durations[index].timeInMilliseconds,isDateOnly)}\"\n        }\n        str=str.removePrefix(\" + \")\n        return \"\\t${str} = ${daysHoursMinutesDigital(sum,isDateOnly)}\\n\"\n    }else{\n        return \"\"\n    }\n}\n\nfun outputStringIstihazaAfterLine(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n    val istihazaAfter = fixedDurations[index].istihazaAfter\n    var str = \"\"\n    if(istihazaAfter!=0L){\n        str +=\"\\t${daysHoursMinutesDigital(fixedDurations[index].timeInMilliseconds,isDateOnly)} \" +\n                \"tuhr + ${daysHoursMinutesDigital(istihazaAfter,isDateOnly)} istihaza \" +\n                \"= ${daysHoursMinutesDigital((fixedDurations[index].timeInMilliseconds +\n                        fixedDurations[index].istihazaAfter),isDateOnly)} tuhr-e-faasid\\n\"\n    }\n\n    return str\n}\n\nfun outputStringBiggerThan10Hall(fixedDurations: MutableList<FixedDuration>,index:Int, isDateOnly: Boolean):String{\n    val mp = fixedDurations[index].biggerThanTen?.mp ?: return \"\"\n    val gp = fixedDurations[index].biggerThanTen?.gp ?: return \"\"\n    val dm = fixedDurations[index].biggerThanTen?.dm ?: return \"\"\n    val hz = fixedDurations[index].biggerThanTen?.hz ?: return \"\"\n    val qism = fixedDurations[index].biggerThanTen?.qism ?: return \"\"\n    val istihazaBefore = fixedDurations[index].biggerThanTen?.istihazaBefore ?: return \"\"\n    val haiz = fixedDurations[index].biggerThanTen?.haiz ?: return \"\"\n    val istihazaAfter = fixedDurations[index].biggerThanTen?.istihazaAfter ?: return \"\"\n    val aadatTuhr = fixedDurations[index].biggerThanTen?.aadatTuhr ?: return \"\"\n    val aadatHaz = fixedDurations[index].biggerThanTen?.aadatHaiz ?: return \"\"\n\n\n    //output hukm:\n    var str =\"\"\n//    var str = \"Rough work \\n\"\n//    str += \"MP\\tGP\\tDm\\tHz\\tQism\\n\"\n\n    str += \"\\t${daysHoursMinutesDigital(mp,isDateOnly)}\\t${daysHoursMinutesDigital(gp,isDateOnly)}\\t\" +\n            \"${daysHoursMinutesDigital(dm,isDateOnly)}\\t${daysHoursMinutesDigital(hz,isDateOnly)}\\t${qism}\\n\"\n\n    str +=\"\\tAadat: ${daysHoursMinutesDigital(aadatHaz,isDateOnly)}/${daysHoursMinutesDigital(aadatTuhr,isDateOnly)}\\n\"\n\n    str += \"\\tOut of ${daysHoursMinutesDigital(dm,isDateOnly)}, the first \"\n\n    if (istihazaBefore>0){\n        str += \"${daysHoursMinutesDigital(istihazaBefore,isDateOnly)} are istihaza, then the next \"\n    }\n    str += \"${daysHoursMinutesDigital(haiz,isDateOnly)} are haiz, \"\n\n    //if istihazaAfter is bigger than addatTuhr +3, run daur\n    if (istihazaAfter>=aadatTuhr+3){\n        //find quotient and remainder\n        val remainder = istihazaAfter%(aadatHaz+aadatTuhr)\n        val quotient = ((istihazaAfter-remainder)/(aadatHaz+aadatTuhr))\n\n        if(remainder == 0L){\n            for (j in 1 until quotient){\n                str+=\"then the next ${daysHoursMinutesDigital(aadatTuhr,isDateOnly)} are istihaza, \" +\n                        \"then the next ${daysHoursMinutesDigital(aadatHaz,isDateOnly)} are haiz, \"\n            }\n            str+=\"then the next ${daysHoursMinutesDigital(aadatTuhr,isDateOnly)} are istihaza, \" +\n                    \"then the last ${daysHoursMinutesDigital(aadatHaz,isDateOnly)} are haiz. \"\n\n        }else{//remainder exists\n            for (j in 1 .. quotient){\n                str+=\"then the next ${daysHoursMinutesDigital(aadatTuhr,isDateOnly)} are istihaza, \" +\n                        \"then the next ${daysHoursMinutesDigital(aadatHaz,isDateOnly)} are haiz, \"\n            }\n            if (remainder<aadatTuhr + 3){//it ended in tuhr\n                str+=\"then the last ${daysHoursMinutesDigital(remainder,isDateOnly)} are istihaza.\\n\"\n\n            }else{//it ended in haiz\n                str+=\"then the next ${daysHoursMinutesDigital(aadatTuhr,isDateOnly)} are tuhr, \" +\n                        \"then the last ${daysHoursMinutesDigital(remainder-aadatTuhr,isDateOnly)} are haiz\\n\"\n                //change aadatHaiz\n                val newAadatHaz = remainder-aadatTuhr\n                //add aadat line\n                str+=\"\\tAadat: ${daysHoursMinutesDigital(newAadatHaz,isDateOnly)}/${daysHoursMinutesDigital(aadatTuhr,isDateOnly)}\\n\"\n\n            }\n        }\n    }else{\n        str += \"and the last ${daysHoursMinutesDigital(istihazaAfter,isDateOnly)} are istihaza.\\n\"\n\n    }\n\n    str+=\"\\t\\n\"\n\n    //output hukm in dates\n    val istihazaBeforeStartDate:Date = fixedDurations[index].startDate\n    val haizStartDate = addTimeToDate(istihazaBeforeStartDate, istihazaBefore)\n    val istihazaAfterStartDate = addTimeToDate(haizStartDate, haiz)\n    val istihazaAfterEndDate = addTimeToDate(istihazaAfterStartDate, istihazaAfter)\n\n    if(istihazaBefore!=0L){\n        str+=\"\\tFrom ${parseDate(istihazaBeforeStartDate, isDateOnly)} to ${parseDate(haizStartDate, isDateOnly)} is istihaza, yaqeeni paki\\n\"\n    }\n    str+=\"\\tFrom ${parseDate(haizStartDate, isDateOnly)} to ${parseDate(istihazaAfterStartDate, isDateOnly)} is haiz\\n\"\n    if(istihazaAfter!=0L){\n        if (istihazaAfter>=aadatTuhr+3){\n            //find quotient and remainder\n            val remainder = istihazaAfter%(aadatHaz+aadatTuhr)\n            val quotient = ((istihazaAfter-remainder)/(aadatHaz+aadatTuhr))\n\n\n            var aadatTuhrStartDate:Date = istihazaAfterStartDate\n            var aadatTuhrEndDate:Date\n            var aadatHaizEndDate:Date\n            for (j in 1 .. quotient){\n                aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,aadatTuhr)\n                aadatHaizEndDate = addTimeToDate(aadatTuhrEndDate,aadatHaz)\n                str+= \"\\tFrom ${parseDate(aadatTuhrStartDate, isDateOnly)} to ${parseDate(aadatTuhrEndDate, isDateOnly)} is istihaza, yaqeeni paki\\n\"\n                str+= \"\\tFrom ${parseDate(aadatTuhrEndDate, isDateOnly)} to ${parseDate(aadatHaizEndDate, isDateOnly)} is haiz\\n\"\n                aadatTuhrStartDate=aadatHaizEndDate\n            }\n            if (remainder<aadatTuhr + 3 && remainder!=0L){//it ended in tuhr\n                str+= \"\\tFrom ${parseDate(aadatTuhrStartDate, isDateOnly)} to ${parseDate(istihazaAfterEndDate, isDateOnly)} is istihaza, yaqeeni paki\\n\"\n\n            }else{//it ended in haiz or remainder is 0\n                aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,aadatTuhr)\n                str+= \"\\tFrom ${parseDate(aadatTuhrStartDate, isDateOnly)} to ${parseDate(aadatTuhrEndDate, isDateOnly)} is istihaza, yaqeeni paki\\n\"\n                str+= \"\\tFrom ${parseDate(aadatTuhrEndDate, isDateOnly)} to ${parseDate(istihazaAfterEndDate, isDateOnly)} is haiz\\n\"\n\n                //change aadatHaiz if remainder is not zero (if it is zero, aadat doesn't change, so shouldn't be printed\n                if (remainder!=0L){\n                    val newAadatHaz1 = remainder-aadatTuhr\n                    //add aadat line\n                    str+=\"\\tAadat: ${daysHoursMinutesDigital(newAadatHaz1,isDateOnly)}/${daysHoursMinutesDigital(aadatTuhr,isDateOnly)}\\n\"\n                }\n           }\n\n        }else{//no duar\n            str+=\"\\tFrom ${parseDate(istihazaAfterStartDate, isDateOnly)} to ${parseDate(istihazaAfterEndDate, isDateOnly)} is istihaza, yaqeeni paki\\n\"\n\n        }\n    }\n   return str\n}\nfun generateGetDifferenceString(durationTypes:MutableList<DurationTypes>):String{\n    var str = \"\"\n    for( durationType in durationTypes){\n        var type = \"\"\n        if (durationType.type==DateTypes.YAQEENI_PAKI){type=\"yaqeeni paki\"}\n        else if (durationType.type==DateTypes.YAQEENI_NA_PAKI){type=\"yaqeeni na paki\"}\n        else if (durationType.type==DateTypes.AYYAAM_E_SHAKK_KHUROOJ){type=\"shakk fil khurooj\"}\n        else if (durationType.type==DateTypes.AYYAAM_E_SHAKK_DUKHOOL){type=\"shakk fil dukhool\"}\n        val startTime=durationType.startTime\n        val endTime = durationType.endTime\n\n        if(durationType.type==DateTypes.AYYAAM_E_SHAKK_DUKHOOL){\n            str += \"${UnicodeChars.YELLOW_CIRCLE} <b><em>From ${parseDate(startTime,true)} to ${parseDate(endTime,true)} is ${type}</em></b>\\n\\n\"\n        }else if (durationType.type==DateTypes.YAQEENI_PAKI){\n            str += \"${UnicodeChars.WHITE_CIRCLE} From ${parseDate(startTime,true)} to ${parseDate(endTime,true)} is ${type}\\n\\n\"\n        }else if (durationType.type==DateTypes.YAQEENI_NA_PAKI){\n            str += \"${UnicodeChars.RED_CIRCLE} From ${parseDate(startTime,true)} to ${parseDate(endTime,true)} is ${type}\\n\\n\"\n        }else if (durationType.type==DateTypes.AYYAAM_E_SHAKK_KHUROOJ){\n            str += \"${UnicodeChars.GREEN_CIRCLE} <b><em>From ${parseDate(startTime,true)} to ${parseDate(endTime,true)} is ${type}</em></b>\\n\\n\"\n        }\n\n    }\n    return str\n}\n\n\n\n\nfun generateEnglishOutputString(fixedDurations: MutableList<FixedDuration>, isDateOnly: Boolean, endingOutputValues: EndingOutputValues, isDuration: Boolean):String{\n    //ToDo: figure out how to do languages for real\n    var str = StringsOfLanguages.ENGLISH.answer\n    str += StringsOfLanguages.ENGLISH.headerline\n    var index = 0\n    while (index<fixedDurations.size){\n        if(isDuration){\n            str += outputStringEnglishHeaderLineDuration(fixedDurations,index, isDateOnly)\n            str += outputStringEnglishBiggerThan10HallDurations(fixedDurations,index, isDateOnly)\n            if(index==fixedDurations.size-1){//if this os the last index\n                str += outputStringEnglishFinalLines(isDateOnly, endingOutputValues, isDuration)\n            }\n        }else{\n            str += outputStringEnglishHeaderLine(fixedDurations,index, isDateOnly)\n            str += outputStringEnglishBiggerThan10Hall(fixedDurations,index, isDateOnly)\n            if(index==fixedDurations.size-1){//if this os the last index\n                str += outputStringEnglishFinalLines(isDateOnly, endingOutputValues, isDuration)\n            }\n        }\n        index++\n    }\n    return str\n}\n\nfun outputStringEnglishHeaderLine(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n    var outputString = \"\"\n    if (fixedDurations[index].type==DurationType.DAM||\n        fixedDurations[index].type==DurationType.DAM_MUBTADIA){\n        val sd:Date = fixedDurations[index].startDate\n        val et = fixedDurations[index].endDate\n        if(fixedDurations[index].days in 3.0..10.0){//if it's between 3 and 10, write haiz\n            outputString = StringsOfLanguages.ENGLISH.haizdays.replace(\"date1\", \"${parseDate(sd, isDateOnly)}\").replace(\"date2\", \"${parseDate(et,isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigital((difference(sd,et)), isDateOnly)}\")\n        }else{//bigger than 10\n            if (fixedDurations[index].indices.size>1){//this dam is made up of more than 1\n                outputString = StringsOfLanguages.ENGLISH.continuosbleeding.replace(\"date1\", \"${parseDate(sd, isDateOnly)}\").replace(\"date2\", \"${parseDate(et, isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigital(fixedDurations[index].timeInMilliseconds,isDateOnly)}\")\n            }else{\n                outputString = StringsOfLanguages.ENGLISH.blooddays.replace(\"date1\", \"${parseDate(sd, isDateOnly)}\").replace(\"date2\", \"${parseDate(et, isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigital(fixedDurations[index].timeInMilliseconds,isDateOnly)}\")\n            }\n        }\n\n    }else if (fixedDurations[index].type == DurationType.TUHR||\n        fixedDurations[index].type == DurationType.TUHR_MUBTADIA||\n        fixedDurations[index].type==DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW){\n        val time = fixedDurations[index].timeInMilliseconds\n        outputString =  StringsOfLanguages.ENGLISH.pakidays.replace(\"duration1\", \"${daysHoursMinutesDigital(time, isDateOnly)}\")\n        if(fixedDurations[index].type==DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW){\n            outputString+= StringsOfLanguages.ENGLISH.becamemutadah\n        }\n    }else if (fixedDurations[index].type == DurationType.TUHREFAASID ||\n        fixedDurations[index].type == DurationType.TUHREFAASID_MUBTADIA){\n        outputString =  StringsOfLanguages.ENGLISH.tuhrfasid.replace(\"duration1\", \"${daysHoursMinutesDigital(fixedDurations[index].timeInMilliseconds, isDateOnly)}\")\n    }else if (fixedDurations[index].type==DurationType.TUHREFAASID_WITH_ISTEHAZA||\n            fixedDurations[index].type==DurationType.TUHREFAASID_MUBTADIA_WITH_ISTEHAZA){\n        outputString =  StringsOfLanguages.ENGLISH.tuhrfasidwithaddition.replace(\"duration1\", \"${daysHoursMinutesDigital(fixedDurations[index].istihazaAfter, isDateOnly)}\").replace(\"duration2\", \"${daysHoursMinutesDigital(fixedDurations[index].timeInMilliseconds, isDateOnly)}\").replace(\"duration3\", \"${daysHoursMinutesDigital((fixedDurations[index].istihazaAfter+fixedDurations[index].timeInMilliseconds), isDateOnly)}\")\n    }else if (fixedDurations[index].type == DurationType.DAM_IN_NIFAAS_PERIOD){\n        val sd = fixedDurations[index].startDate\n        val et = fixedDurations[index].endDate\n        if(fixedDurations[index].days<=40){\n            outputString = StringsOfLanguages.ENGLISH.nifasdays.replace(\"date1\", \"${parseDate(sd, isDateOnly)}\").replace(\"date2\", \"${parseDate(et,isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigital((difference(sd,et)), isDateOnly)}\")\n        }else{//more than 40\n            outputString = StringsOfLanguages.ENGLISH.blooddays.replace(\"date1\", \"${parseDate(sd, isDateOnly)}\").replace(\"date2\", \"${parseDate(et, isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigital(fixedDurations[index].timeInMilliseconds,isDateOnly)}\")\n        }\n    }else if (fixedDurations[index].type == DurationType.TUHR_IN_HAML){\n\n    }else if (fixedDurations[index].type == DurationType.DAM_IN_HAML){\n\n    }else if (fixedDurations[index].type == DurationType.TUHR_BIGGER_THAN_6_MONTHS){\n        outputString = StringsOfLanguages.ENGLISH.twomonthstuhr.replace(\"duration1\", \"${daysHoursMinutesDigital(fixedDurations[index].timeInMilliseconds,isDateOnly)}\")\n    }\n    return outputString\n}\n\nfun outputStringEnglishBiggerThan10Hall(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n    var strEnglish = \"\"\n\n    fun haizLineEnglish(sd:Date,ed:Date, isDateOnly: Boolean):String{\n        return StringsOfLanguages.ENGLISH.haizdaysinsolution.replace(\"date1\", \"${parseDate(sd, isDateOnly)}\").replace(\"date2\", \"${parseDate(ed,isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigital((difference(sd,ed)), isDateOnly)}\")\n    }\n    fun istihazaLineEnglish(sd:Date,ed:Date, isDateOnly: Boolean):String{\n        return StringsOfLanguages.ENGLISH.istihazadays.replace(\"date1\", \"${parseDate(sd, isDateOnly)}\").replace(\"date2\", \"${parseDate(ed,isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigital(difference(sd,ed), isDateOnly)}\")\n    }\n\n    if((fixedDurations[index].days>10&&fixedDurations[index].type==DurationType.DAM)){\n        strEnglish += StringsOfLanguages.ENGLISH.dashesline\n        strEnglish += StringsOfLanguages.ENGLISH.solution\n\n        for(duration in fixedDurations[index].biggerThanTen!!.durationsList){\n            if(duration.type == DurationType.ISTIHAZA_BEFORE){\n                strEnglish+= istihazaLineEnglish(duration.startTime,duration.endDate,isDateOnly)\n                strEnglish+= StringsOfLanguages.ENGLISH.istihazadetailslineone\n\n            }else if(duration.type == DurationType.HAIZ){\n                strEnglish+= haizLineEnglish(duration.startTime,duration.endDate,isDateOnly)\n\n            }else if(duration.type == DurationType.ISTIHAZA_AFTER){\n                strEnglish+= istihazaLineEnglish(duration.startTime,duration.endDate,isDateOnly)\n                strEnglish+= StringsOfLanguages.ENGLISH.istihazadetailslinetwo.replace(\"date1\", \"${parseDate(duration.startTime,isDateOnly)}\")\n                strEnglish+= StringsOfLanguages.ENGLISH.istihazadetailslineone\n\n            }else if(duration.type == DurationType.LESS_THAN_3_HAIZ){\n                strEnglish+= haizLineEnglish(duration.startTime,duration.endDate,isDateOnly)\n                //maybe we'll wanna add something about itibaar bil khawateem\n            }\n        }\n\n        strEnglish += StringsOfLanguages.ENGLISH.dashesline\n    }\n\n    return strEnglish\n}\nfun outputStringEnglishBiggerThan40Hall(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n\n    var strEnglish = \"\"\n\n    fun nifasLineEnglish(sd:Date,ed:Date, isDateOnly: Boolean):String{\n        return StringsOfLanguages.ENGLISH.nifasdaysinsolution.replace(\"date1\", \"${parseDate(sd, isDateOnly)}\").replace(\"date2\", \"${parseDate(ed,isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigital((difference(sd,ed)), isDateOnly)}\")\n    }\n    fun haizLineEnglish(sd:Date,ed:Date, isDateOnly: Boolean):String{\n        return StringsOfLanguages.ENGLISH.haizdaysinsolution.replace(\"date1\",\"${parseDate(sd, isDateOnly)}\").replace(\"date2\", \"${parseDate(ed, isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigital((difference(sd,ed)), isDateOnly)}\")\n    }\n    fun istihazaLineEnglish(sd:Date,ed:Date, isDateOnly: Boolean):String{\n        return StringsOfLanguages.ENGLISH.istihazadays.replace(\"date1\", \"${parseDate(sd, isDateOnly)}\").replace(\"date2\", \"${parseDate(ed,isDateOnly)}\").replace(\"duration1\", \"${daysHoursMinutesDigital(difference(sd,ed), isDateOnly)}\")\n    }\n\n    if(fixedDurations[index].days>40&&fixedDurations[index].type==DurationType.DAM_IN_NIFAAS_PERIOD){\n        strEnglish += StringsOfLanguages.ENGLISH.dashesline\n        strEnglish += StringsOfLanguages.ENGLISH.solution\n\n        for(duration in fixedDurations[index].biggerThanForty!!.durationsList){\n            if(duration.type==DurationType.NIFAAS){\n                strEnglish+= nifasLineEnglish(duration.startTime,duration.endDate, isDateOnly)\n            }else if(duration.type==DurationType.ISTIHAZA_AFTER){\n                strEnglish+= istihazaLineEnglish(duration.startTime,duration.endDate, isDateOnly)\n                strEnglish+= StringsOfLanguages.ENGLISH.istihazadetailslinetwo.replace(\"date1\", \"${parseDate(duration.startTime,isDateOnly)}\")\n                strEnglish+= StringsOfLanguages.ENGLISH.istihazadetailslineone\n\n            }else if(duration.type==DurationType.HAIZ){\n                strEnglish+= haizLineEnglish(duration.startTime,duration.endDate, isDateOnly)\n\n            }else if(duration.type == DurationType.LESS_THAN_3_HAIZ){\n                strEnglish+= haizLineEnglish(duration.startTime,duration.endDate,isDateOnly)\n                //maybe we'll wanna add something about itibaar bil khawateem\n            }\n        }\n        strEnglish += StringsOfLanguages.ENGLISH.dashesline\n    }\n\n    return strEnglish\n}\nfun generateEnglishOutputStringPregnancy(fixedDurations: MutableList<FixedDuration>, isDateOnly: Boolean, pregnancy: Pregnancy, endingOutputValues: EndingOutputValues, isDuration: Boolean):String{\n    val mustabeen = pregnancy.mustabeenUlKhilqat\n//    var startTimeOfPregnancy = pregnancy.pregStartTime.getTime()\n    val birthTime = pregnancy.birthTime\n    var str = StringsOfLanguages.ENGLISH.answer\n\n    if(mustabeen){\n        if(fixedDurations[0].type!=DurationType.HAML){\n            str += StringsOfLanguages.ENGLISH.beforepregheader\n        }\n        for(index in fixedDurations.indices){\n            if(isDuration){\n                str += outputStringEnglishHeaderLineDuration(fixedDurations,index, isDateOnly)\n                str += outputStringEnglishBiggerThan10HallDurations(fixedDurations,index, isDateOnly)\n                str += outputStringEnglishBiggerThan40HallDuration(fixedDurations,index, isDateOnly)\n                if(fixedDurations[index].type==DurationType.HAML){\n                    str += StringsOfLanguages.ENGLISH.pregduration\n                }\n                if(fixedDurations[index].type==DurationType.WILADAT_ISQAT){\n                    str += StringsOfLanguages.ENGLISH.birthduration\n                }\n\n            }else{\n                str += outputStringEnglishHeaderLine(fixedDurations,index, isDateOnly)\n                str += outputStringEnglishBiggerThan10Hall(fixedDurations,index, isDateOnly)\n                str += outputStringEnglishBiggerThan40Hall(fixedDurations,index, isDateOnly)\n                if(fixedDurations[index].type==DurationType.HAML){\n                    str += StringsOfLanguages.ENGLISH.preg\n                }\n                if(fixedDurations[index].type==DurationType.WILADAT_ISQAT){\n                    str += StringsOfLanguages.ENGLISH.birth.replace(\"date1\", \"${urduDateFormat(birthTime, isDateOnly)}\")\n                    if(index<fixedDurations.size-2){//if there is something after wiladat\n                        str += StringsOfLanguages.ENGLISH.afterpregheader\n                    }\n                }\n\n            }\n\n        }\n        str += outputStringEnglishFinalLines(isDateOnly, endingOutputValues, isDuration)\n\n\n\n    }else{//if it is ghair mustabeenulkhilqat\n        str += StringsOfLanguages.URDU.headerline\n\n        for(index in fixedDurations.indices){\n            str += outputStringUrduHeaderLine(fixedDurations,index, isDateOnly)\n            str += outputStringUrduBiggerThan10Hall(fixedDurations,index, isDateOnly)\n            if(fixedDurations[index].type==DurationType.HAML){\n                str += StringsOfLanguages.URDU.preg\n            }\n            if(fixedDurations[index].type==DurationType.WILADAT_ISQAT){\n                str += StringsOfLanguages.URDU.earlymiscarriage.replace(\"date1\", \"${urduDateFormat(birthTime, isDateOnly)}\")\n                if(index<fixedDurations.size-2){//if there is something after wiladat\n                    str += StringsOfLanguages.URDU.afterpregheader\n                }\n            }\n\n        }\n        str += outputStringUrduFinalLines (isDateOnly, endingOutputValues, isDuration)\n\n    }\n\n\n    return str\n}\nfun outputStringEnglishFinalLines(isDateOnly: Boolean, endingOutputValues: EndingOutputValues, isDuration: Boolean):String{\n    var strEnglish = \"\"\n    val aadats = endingOutputValues.aadats\n    if(isDuration){return strEnglish}\n    strEnglish+=outputStringEnglishAadatLine(isDateOnly, aadats)\n    val filHaal = endingOutputValues.filHaalPaki\n    strEnglish+=outputStringEnglishFilHaalLine(filHaal)\n    val futureDates = endingOutputValues.futureDateType\n    strEnglish+=outputStringEnglishAskAgainLine(isDateOnly, futureDates)\n\n    //plis note down line\n    strEnglish+=StringsOfLanguages.ENGLISH.writedown\n\n    //Allahu Aaalam line\n    strEnglish+=StringsOfLanguages.ENGLISH.allahknows\n\n    return strEnglish\n}\nfun outputStringEnglishFilHaalLine(filHaalPaki:Boolean):String{\n    val filHaalPakiStr = StringsOfLanguages.ENGLISH.currentpaki\n    val filHaalHaizStr = StringsOfLanguages.ENGLISH.currenthaiz\n    return if(filHaalPaki){\n        filHaalPakiStr\n    }else{\n        filHaalHaizStr\n    }\n}\n\nfun outputStringEnglishAskAgainLine(isDateOnly: Boolean, futureDateType: FutureDateType?):String{\n    var strEnglish = \"\"\n    if (futureDateType==null){\n        return \"\"\n    }\n    val futureDate= futureDateType.date\n    val futureDatesType = futureDateType.futureDates\n    if(futureDatesType==TypesOfFutureDates.A3_CHANGING_TO_A2){\n        strEnglish += StringsOfLanguages.ENGLISH.situationmaychange.replace(\"date1\", \"${parseDate(futureDate, isDateOnly)}\")\n    }else if(futureDatesType==TypesOfFutureDates.END_OF_AADAT_HAIZ){\n        strEnglish += StringsOfLanguages.ENGLISH.haizend.replace(\"date1\", \"${parseDate(futureDate, isDateOnly)}\")\n        strEnglish += StringsOfLanguages.ENGLISH.ihtiyatighusl.replace(\"date1\", \"${parseDate(futureDate, isDateOnly)}\")\n        //sex line\n        strEnglish += StringsOfLanguages.ENGLISH.sexnotallowed.replace(\"date1\", \"${parseDate(futureDate, isDateOnly)}\")\n    }else if(futureDatesType==TypesOfFutureDates.END_OF_AADAT_TUHR){\n        strEnglish += StringsOfLanguages.ENGLISH.endofpaki.replace(\"date1\", \"${parseDate(futureDate, isDateOnly)}\")\n\n    }\n    return strEnglish\n\n}\nfun outputStringEnglishAadatLine(isDateOnly: Boolean, aadats:AadatsOfHaizAndTuhr?):String{\n    var strEnglish = \"\"\n\n    return if(aadats==null){\n        \"\"\n    }else{\n        val aadatTuhr = aadats.aadatTuhr\n        val aadatHaiz = aadats.aadatHaiz\n        if(aadatTuhr==-1L&&aadatHaiz==-1L){\n            strEnglish+= StringsOfLanguages.ENGLISH.thereisnoaadat\n        }else if(aadatTuhr==-1L&&aadatHaiz!=-1L){\n            strEnglish+= StringsOfLanguages.ENGLISH.aadatofhaizonly.replace(\"duration1\", \"${daysHoursMinutesDigital(aadatHaiz, isDateOnly)}\")\n        }else{\n            strEnglish+= StringsOfLanguages.ENGLISH.habit.replace(\"duration1\", \"${daysHoursMinutesDigital(aadatHaiz, isDateOnly)}\").replace(\"duration2\", \"${daysHoursMinutesDigital(aadatTuhr, isDateOnly)}\")\n        }\n        strEnglish\n    }\n\n\n}","import kotlinx.html.*\nimport kotlinx.html.consumers.onFinalize\nimport kotlinx.html.dom.createTree\nimport org.w3c.dom.*\nimport kotlin.js.Date\nimport kotlin.time.DurationUnit\nimport kotlin.time.ExperimentalTime\nimport kotlin.time.toDuration\n\n\nconst val MILLISECONDS_IN_A_DAY:Long = 86400000\nconst val TAB:String = \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"\n\nconst val FORM_WIDTH_DATE_ONLY = 410\nconst val FORM_WIDTH_DATE_TIME = 605\nconst val FORM_PADDING = 8\nconst val FORM_BORDER = 1\n\nval MonthNames = arrayOf(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\n\nobject Events {\n    const val VISIBILITY_CHANGE = \"visibilitychange\"\n}\n\nobject UnicodeChars {\n    const val RED_CIRCLE = \"&#x1F534;\"\n    const val WHITE_CIRCLE = \"&#x26AA;\"\n    const val YELLOW_CIRCLE = \"&#x1F7E1;\"\n    const val GREEN_CIRCLE = \"&#x1F7E2;\"\n    const val BLACK_SQUARE = \"&#9642;\"\n    const val FAT_DASH = \"&#x2796;\"\n    const val ROSE = \"&#x1F339;\"\n    const val RAINBOW = \"&#x1F308;\"\n\n}\n\nobject Styles {\n    const val TABLE_ROW_STYLE = \"float: left;\"\n    const val TABLE_CELL_STYLE = \"float: left; width:30px; height:24px; text-align:center; padding: 6px 0 0 0\"\n    const val TABLE_CELL_BORDER_STYLE = \"float: left; width:28px; height:22px; text-align:center; padding: 6px 0 0 0; border: 1px solid black\"\n    const val TABLE_HEAD_STYLE = \"float:left\"\n    const val TABLE_BODY_STYLE = \"float:left\"\n    const val NEW_ROW = \"clear:both\"\n    const val HALF_CELL = \"float: left; width:15px; height:30px; text-align:center\"\n    const val EMPTY_CELL_STYLE = \"float: left; width:28px; height:15px; border-left:1px solid black; border-right:1px solid black\"\n    const val EMPTY_HALF_CELL_STYLE = \"float: left; width:15px; height:15px\"\n    const val NA_PAKI = \"; background-color: red\"\n    const val AYYAAM_E_SHAKK = \"; background-color: yellow\"\n\n}\n\nval Document.isHidden get() = this[\"hidden\"] as Boolean\n\n\nprivate fun insertRelative(\n    ownerDocument: Document,\n    block: TagConsumer<HTMLElement>.() -> Unit,\n    insert: (Element) -> Unit\n): List<HTMLElement> = ArrayList<HTMLElement>().also { result ->\n    ownerDocument.createTree().onFinalize { child, partial ->\n        if (!partial) {\n            result.add(child)\n            insert(child)\n        }\n    }.block()\n}\n\nprivate fun Element.insertRelative(block: TagConsumer<HTMLElement>.() -> Unit, insert: (Element) -> Unit = {}) =\n    insertRelative(ownerDocument!!, block, insert)\nprivate fun Node.insertRelative(block: TagConsumer<HTMLElement>.() -> Unit, insert: (Node) -> Unit) =\n    insertRelative(ownerDocument!!, block, insert)\nprivate fun ChildNode.insertRelative(block: TagConsumer<HTMLElement>.() -> Unit, insert: (ChildNode) -> Unit) =\n    insertRelative((this as Node).ownerDocument!!, block, insert)\n\nfun Node.appendChild(block: TagConsumer<HTMLElement>.() -> Unit) = insertRelative(block) { node -> appendChild(node) }\n@Suppress(\"MoveLambdaOutsideParentheses\", \"RedundantLambdaArrow\")\nfun Element.replaceChildren(block: TagConsumer<HTMLElement>.() -> Unit) =\n    replaceChildren(*insertRelative(block).toTypedArray())\nfun ChildNode.before(block: TagConsumer<HTMLElement>.() -> Unit) = insertRelative(block) { node -> before(node) }\nfun ChildNode.after(block: TagConsumer<HTMLElement>.() -> Unit) = insertRelative(block) { node -> after(node) }\n\nfun ParentNode.getChildById(id: String) = querySelector(\"#$id\")\n\n\nfun Element.replaceChildren(vararg nodes: Node) {\n    asDynamic().replaceChildren.apply(this, nodes)\n}\n\n\ninline fun <reified T : Element> Element.getAncestor(predicate: (Element) -> Boolean = { true }): T? {\n    var parent: Element? = parentElement\n    while (true) {\n        if (parent == null) return null\n        if (parent is T && predicate(parent)) return parent\n        parent = parent.parentElement\n    }\n}\n\nvar Element.visibility: Boolean\n    get() = !classList.contains(\"invisible\")\n    set(visible) { classList.toggle(\"invisible\", !visible) }\n\nval HTMLTableRowElement.rowIndexWithinTableBody get() =\n    (parentElement as HTMLTableSectionElement).children.asList().indexOf(this)\n\n\n@HtmlTagMarker\nfun FlowOrInteractiveOrPhrasingContent.dateTimeLocalInputWithFallbackGuidelines(\n    classes: String? = null,\n    block: INPUT.() -> Unit = {}\n) {\n    dateTimeLocalInput(classes = classes) {\n        placeholder = \"YYYY-MM-DDThh:mm\"\n        pattern = \"[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}\"\n        block()\n    }\n}\n\n@HtmlTagMarker\nfun FlowOrInteractiveOrPhrasingContent.customDateTimeInput(\n    isDateOnly: Boolean,\n    classes: String? = null,\n    block: INPUT.() -> Unit = {}\n) {\n    if (isDateOnly) {\n        dateInput(classes = classes, block = block)\n    } else {\n        dateTimeLocalInputWithFallbackGuidelines(classes = classes, block = block)\n    }\n}\n\n\n/* Looks like the compiler argument for opting in to experimental features\n * ('-Xopt-in=kotlin.RequiresOptIn') is not actually enforced, so suppressing the warning about it's\n * requirement here for now..\n */\n@Suppress(\"EXPERIMENTAL_IS_NOT_ENABLED\")\n@OptIn(ExperimentalTime::class)\nfun Date.offsetLocalTimeToUtc() =\n    Date(getTime() - getTimezoneOffset().toDuration(DurationUnit.MINUTES).inWholeMilliseconds)\n\nfun parseToLocalDate(dateString: String, isDateOnly: Boolean): Date {\n    val date = Date(dateString)\n    return if (isDateOnly) {\n        date\n    } else {\n        date.offsetLocalTimeToUtc()\n    }\n}\n\nfun Date.toDateInputString(isDateOnly: Boolean): String {\n    val letterToTrimFrom = if (isDateOnly) 'T' else 'Z'\n    val string = toISOString().takeWhile { it != letterToTrimFrom }\n    return if (isDateOnly) {\n        string\n    } else {\n        // Drop any precision below minutes (seconds, milliseconds, etc.)\n        string.take(16)\n    }\n}\n\nfun convertInputValue(value: String, isDateOnly: Boolean): String {\n    if (value.isEmpty()) return \"\"\n    return parseToLocalDate(value, !isDateOnly) // Inverting the isDateOnly since we need to pass the existing state\n        .toDateInputString(isDateOnly)\n}\n\nfun currentTimeString(isDateOnly: Boolean) = Date().offsetLocalTimeToUtc().toDateInputString(isDateOnly)\n\n\nfun addTimeToDate(date: Date,timeInMilliseconds:Long):Date{\n    return Date(date.getTime() + timeInMilliseconds)\n}\n\nfun parseDays(input: String): Long? {\n    val millisecondsInAnHour = 3600000\n    val millisecondsInAMinute = 60000\n    if (input.isEmpty()) return null\n    val sections = input.split(':')\n    var days = sections[0].toInt().toDouble()\n    val hours = sections.getOrNull(1)?.toInt() ?: return (days*MILLISECONDS_IN_A_DAY).toLong()\n    require(hours in 0 until 24) { \"Invalid hours value\" }\n    days += hours / 24.toDouble()\n    val minutes = sections.getOrNull(2)?.toInt() ?: return (days*MILLISECONDS_IN_A_DAY).toLong()\n    require(minutes in 0 until 60) { \"Invalid minutes value\" }\n    days += minutes / (24 * 60).toDouble()\n    val seconds = sections.getOrNull(3)?.toInt() ?: return (days*MILLISECONDS_IN_A_DAY).toLong()\n    require(seconds in 0 until 60) { \"Invalid seconds value\" }\n    days += seconds / (24 * 60 * 60).toDouble()\n    if(hours!=null&&minutes!=null){\n        return ((days*MILLISECONDS_IN_A_DAY).toLong() +\n                (hours*millisecondsInAnHour).toLong() +\n                (minutes*millisecondsInAMinute).toLong())\n    }\n    return (days*MILLISECONDS_IN_A_DAY).toLong()\n}\n\nfun daysHoursMinutesDigitalUrdu(numberOfMilliseconds:Long, isDateOnly: Boolean):String{\n    val days:Double = kotlin.math.floor((numberOfMilliseconds/MILLISECONDS_IN_A_DAY).toDouble())\n    var milisecsleft = numberOfMilliseconds - days*MILLISECONDS_IN_A_DAY\n    val hours:Double = kotlin.math.floor((milisecsleft/(3600000)))\n    milisecsleft-=hours*3600000\n    val minutes = kotlin.math.floor(milisecsleft/60000)\n\n\n\n\n//    var totalMinutes:Double = days*24*60\n\n//    var minutes:Double=(totalMinutes%60).toDouble();\n//    var remainingHours:Double = (totalMinutes - minutes)/60\n//    var hours:Double = remainingHours % 24;\n    //var days:Double = (remainingHours - hours)/24;\n//    minutes=round(minutes);\n//    hours=round(hours)\n//    days=round(days)\n//    if(minutes == 60.0){\n//        minutes = 0.0\n//        hours+=1\n//    }\n//    if(hours==24.0){\n//        hours = 0.0\n//        days += 1.0\n//    }\n    var strHours = \"$hours گھنٹے \"\n    var strMinutes = \"$minutes منٹ \"\n    var strDays = \"$days دن \"\n\n    if(hours==1.0){\n        strHours = \"$hours گھنٹہ \"\n    }\n\n    if(hours==0.0){\n        strHours = \"\"\n    }\n    if(days==0.0){\n        strDays = \"\"\n    }\n    if(minutes == 0.0){\n        strMinutes = \"\"\n    }\n//    if(hours<10){\n//        strHours = \"0${hours}\";\n//    }\n//    if(minutes<10){\n//        strMinutes = \"0${minutes}\";\n//    }\n    var returnStatement = \"${strDays}${strHours}${strMinutes}\"\n//    println(returnStatement)\n    if(isDateOnly){\n        returnStatement = strDays\n    }\n    return(returnStatement)\n}\n\nfun daysHoursMinutesDigital(numberOfMilliseconds:Long, isDateOnly: Boolean):String{\n    val days:Double = kotlin.math.floor((numberOfMilliseconds/MILLISECONDS_IN_A_DAY).toDouble())\n//    println(days)\n    var milisecsleft = numberOfMilliseconds - days*MILLISECONDS_IN_A_DAY\n    val hours:Double = kotlin.math.floor((milisecsleft/(3600000)))\n//    println(hours)\n    milisecsleft-=hours*3600000\n    val minutes = kotlin.math.floor(milisecsleft/60000)\n\n\n\n    var strHours = hours.toString()\n    var strMinutes = minutes.toString()\n    val strDays = days.toString()\n    if(hours<10){\n        strHours = \"0${hours}\"\n    }\n    if(minutes<10){\n        strMinutes = \"0${minutes}\"\n    }\n    var returnStatement = \"${strDays}d:${strHours}h:${strMinutes}m\"\n    if(isDateOnly){\n        if(days==1.0){\n            returnStatement = \"1 day\"\n        }else{\n            returnStatement = \"$strDays days\"\n        }\n    }\n    return(returnStatement)\n}\n fun parseDate(date: Date, isDateOnly: Boolean):String{\n  //   Sat, 05 Jun 2021 06:21:59 GMT\n     val dateStr = (date.toUTCString()).dropLast(18).drop(5)\n     if(dateStr.startsWith(\"0\")){\n         dateStr.trimStart()\n     }\n     var hours = (date.toUTCString()).dropLast(10).drop(17).toInt()\n     val minutesStr = (date.toUTCString()).dropLast(7).drop(20)\n     var ampm = \"am\"\n     if (hours >=12){\n         hours-=12\n         ampm = \"pm\"\n     }\n     if(hours == 0){\n         hours = 12\n     }\n     val hoursStr:String = if(hours<10){\n         \"0${hours}\"\n     }else{\n         hours.toString()\n     }\n\n\n     return if(isDateOnly){\n         dateStr\n         //05 Jun 2021\n     }else{\n         //05 Jun 2021 06:21\n         \"$hoursStr:$minutesStr $ampm, on $dateStr\"\n     }\n }\nfun difference(date1:Date,date2:Date):Long{\n    return (date2.getTime()-date1.getTime()).toLong()\n\n}\n\n fun urduDateFormat(date: Date, isDateOnly: Boolean):String{\n     val day = date.getUTCDate().toString()\n     val month = date.getUTCMonth()\n     var urduMonth = \"\"\n     when (month) {\n         0 -> {\n             urduMonth = \"جنوری\"\n         }\n         1 -> {\n             urduMonth = \"فروری\"\n         }\n         2 -> {\n             urduMonth = \"مارچ\"\n         }\n         3 -> {\n             urduMonth = \"اپریل\"\n         }\n         4 -> {\n             urduMonth = \"مئی\"\n         }\n         5 -> {\n             urduMonth = \"جون\"\n         }\n         6 -> {\n             urduMonth = \"جولائ\"\n         }\n         7 -> {\n             urduMonth = \"اگست\"\n         }\n         8 -> {\n             urduMonth = \"ستمبر\"\n         }\n         9 -> {\n             urduMonth = \"اکتوبر\"\n         }\n         10 -> {\n             urduMonth = \"نومبر\"\n         }\n         11 -> {\n             urduMonth = \"دسمبر\"\n         }\n     }\n     val urduDay:String = if(day==\"1\"){\n         \"یکم\"\n     }else{\n         day\n     }\n     if(isDateOnly){\n         return (\"$urduDay $urduMonth\")\n     }else{//has time too\n         var hours = date.getUTCHours()\n         val minutes = date.getUTCMinutes()\n         val strMinutes:String = if(minutes <10){\n             \"0${minutes}\"\n         }else{\n             minutes.toString()\n         }\n         val ampm:String\n         if (hours == 0){\n             ampm = \"رات\"\n             hours = 12\n         }else if(hours in 1..3){//1-3\n             ampm = \"رات\"\n         }else if(hours in 4..11){//4-11\n             ampm = \"صبح\"\n         }else if(hours in 12..14){//12-2\n             ampm = \"دوپہر\"\n             hours -= 12\n             if(hours == 0){hours+=12}\n         }else if(hours in 15..18){//3-6\n             ampm = \"شام\"\n             hours -= 12\n         }else{//7-11\n             ampm = \"رات\"\n             hours-=12\n         }\n         return (\"$urduDay $urduMonth $ampm $hours:$strMinutes بجے\")\n\n\n     }\n\n }\n",null,"import kotlinx.html.dom.append\nimport kotlinx.browser.document\nimport kotlinx.browser.window\nimport kotlinx.html.*\nimport kotlinx.html.consumers.delayed\nimport kotlinx.html.dom.prepend\nimport kotlinx.html.form\nimport kotlinx.html.js.*\nimport kotlinx.html.stream.createHTML\nimport kotlinx.html.tr\nimport org.w3c.dom.*\nimport org.w3c.dom.events.Event\nimport kotlin.js.Date\n\nprivate const val IS_DEFAULT_INPUT_MODE_DATE_ONLY = true\n\nobject Ids {\n    const val HAIZ_INPUT_TABLE = \"haiz_input_table\"\n    const val HAIZ_DURATION_INPUT_TABLE = \"haiz_duration_input_table\"\n\n    object Row {\n        const val INPUT_START_TIME = \"input_start_time\"\n        const val INPUT_END_TIME = \"input_end_time\"\n        const val BUTTONS_CONTAINER = \"button_add_before_container\"\n        const val BUTTON_REMOVE = \"button_remove\"\n        const val BUTTON_ADD_BEFORE = \"button_add_before\"\n    }\n\n    object DurationRow {\n        const val INPUT_DURATION = \"input_duration\"\n        const val INPUT_TYPE_OF_DURATION = \"input_duration_type\"\n        const val DURATION_BUTTONS_CONTAINER = \"duration_button_add_before_container\"\n        const val DURATION_BUTTON_REMOVE = \"duration_button_remove\"\n        const val DURATION_BUTTON_ADD_BEFORE = \"duration_button_add_before\"\n    }\n\n\n    const val CONTENT_CONTAINER = \"content_container\"\n    const val CONTENT = \"content\"\n    const val CONTENT_URDU = \"content_urdu\"\n    const val CONTENT_ENGLISH = \"content_english\"\n    const val CONTENT_DATES = \"content_dates\"\n    const val CONTENT_DATES_DIFFERENCE = \"content_dates_difference\"\n    const val DATES_DIFFERENCE_TABLE = \"dates_difference_table\"\n    const val INPUT_CONTAINERS_CONTAINER = \"input_containers_container\"\n    const val INPUT_CONTAINER = \"input_container\"\n    const val COMPARISON_CONTAINER = \"comparison_container\"\n    const val PREGNANCY_CHECKBOX = \"pregnancy_checkbox\"\n    const val MUBTADIA_CHECKBOX = \"mubtadia_checkbox\"\n    const val MUSTABEEN_CHECKBOX = \"mustabeen_checkbox\"\n    const val PREG_START_TIME_INPUT = \"preg_start_time_input\"\n    const val PREG_END_TIME_INPUT = \"preg_end_time_input\"\n    const val AADAT_HAIZ_INPUT = \"aadat_haiz_input\"\n    const val AADAT_TUHR_INPUT = \"aadat_tuhr_input\"\n    const val MAWJOODA_TUHR_INPUT = \"mawjooda_tuhr_input\"\n    const val MAWJOODA_FASID_CHECKBOX = \"mawjooda_fasid_checkbox\"\n    const val AADAT_NIFAS_INPUT = \"aadat_nifas_input\"\n    const val DATE_ONLY_RADIO = \"date_only_radio\"\n    const val DATE_TIME_RADIO = \"date_time_radio\"\n    const val DATE_AND_OR_RADIO = \"date_and_or_time\"\n//    const val INPUTS_CONTAINER_CLONE_BUTTON = \"inputs_container_clone_button\"\n    const val INPUTS_CONTAINER_REMOVE_BUTTON = \"inputs_container_remove_button\"\n\n    val pregnancyElementIds = listOf(\n        PREG_START_TIME_INPUT,\n        PREG_END_TIME_INPUT,\n        MUSTABEEN_CHECKBOX,\n        AADAT_NIFAS_INPUT\n    )\n}\n\nprivate val inputsContainersContainer get() = document.getElementById(Ids.INPUT_CONTAINERS_CONTAINER) as HTMLElement\n@Suppress(\"UNCHECKED_CAST\")\nprivate val inputsContainers get() = inputsContainersContainer.children.asList() as List<HTMLElement>\nprivate val comparisonContainer get() = document.getElementById(Ids.COMPARISON_CONTAINER) as HTMLElement?\n\nprivate val contentDatesDifferenceElement get() = document.getElementById(Ids.CONTENT_DATES_DIFFERENCE) as HTMLParagraphElement?\nprivate val datesDifferenceTableElement get() = document.getElementById(Ids.DATES_DIFFERENCE_TABLE) as HTMLElement?\nprivate val languageSelecter get() = document.getElementById(\"language\") as HTMLSelectElement\nprivate val languageSelecterValue get() = (document.getElementById(\"language\") as HTMLSelectElement).value\n\nprivate val HTMLElement.haizInputTable get() = getChildById(Ids.HAIZ_INPUT_TABLE) as HTMLTableElement\nprivate val HTMLElement.haizDurationInputTable get() = getChildById(Ids.HAIZ_DURATION_INPUT_TABLE) as HTMLTableElement\n\n//private val HTMLElement.isDateOnly get() = (getChildById(Ids.DATE_ONLY_RADIO) as HTMLInputElement).checked\nprivate val HTMLElement.isDateTime get() = (getChildById(\"typePicker\") as HTMLSelectElement).value == \"dateTime\"\nprivate val HTMLElement.isDateOnly get() = (getChildById(\"typePicker\") as HTMLSelectElement).value == \"dateOnly\"\nprivate val HTMLElement.isDuration get() = (getChildById(\"typePicker\") as HTMLSelectElement).value == \"duration\"\n//private val HTMLElement.isIstimrar get() = (getChildById(Ids.ISTIMRAR_CHECKBOX) as HTMLInputElement).checked\nprivate val HTMLElement.isPregnancy get() = (getChildById(Ids.PREGNANCY_CHECKBOX) as HTMLInputElement).checked\nprivate val HTMLElement.mustabeen get() = (getChildById(Ids.MUSTABEEN_CHECKBOX) as HTMLInputElement).checked\nprivate val HTMLElement.pregStartTime get() = getChildById(Ids.PREG_START_TIME_INPUT) as HTMLInputElement\nprivate val HTMLElement.pregEndTime get() = getChildById(Ids.PREG_END_TIME_INPUT) as HTMLInputElement\nprivate val HTMLElement.aadatHaz get() = getChildById(Ids.AADAT_HAIZ_INPUT) as HTMLInputElement\nprivate val HTMLElement.aadatTuhr get() = getChildById(Ids.AADAT_TUHR_INPUT) as HTMLInputElement\nprivate val HTMLElement.mawjoodaTuhr get() = getChildById(Ids.MAWJOODA_TUHR_INPUT) as HTMLInputElement\nprivate val HTMLElement.isMawjoodaFasid get() = (getChildById(Ids.MAWJOODA_FASID_CHECKBOX) as HTMLInputElement).checked\nprivate val HTMLElement.aadatNifas get() = getChildById(Ids.AADAT_NIFAS_INPUT) as HTMLInputElement\nprivate val HTMLElement.contentContainer get() = getChildById(Ids.CONTENT_CONTAINER)!!\nprivate val HTMLElement.contentEnglish get() = getChildById(Ids.CONTENT_ENGLISH) as HTMLParagraphElement\nprivate val HTMLElement.contentUrdu get() = getChildById(Ids.CONTENT_URDU) as HTMLParagraphElement\nprivate val HTMLElement.contentDatesElement get() = getChildById(Ids.CONTENT_DATES) as HTMLParagraphElement\n//private val HTMLElement.inputsContainerCloneButton get() =\n//    getChildById(Ids.INPUTS_CONTAINER_CLONE_BUTTON) as HTMLButtonElement\nprivate val HTMLElement.inputsContainerRemoveButton get() =\n    getChildById(Ids.INPUTS_CONTAINER_REMOVE_BUTTON) as HTMLButtonElement\n\nprivate var HTMLElement.haizDatesList: List<Entry>?\n    get() = (contentDatesElement.asDynamic().haizDatesList as List<Entry>?)?.takeIf { it != undefined }\n    set(value) { contentDatesElement.asDynamic().haizDatesList = value }\n\nprivate val HTMLElement.pregnancyInputs get() = Ids.pregnancyElementIds.map { id ->\n    getChildById(id) as HTMLInputElement\n}\nprivate val HTMLElement.pregnancyElements get() = getElementsByClassName(\"preg-checked\").asList()\nprivate val englishElements get() = document.getElementsByClassName(\"english\").asList()\nprivate val urduElements get() = document.getElementsByClassName(\"urdu\").asList()\n\nprivate val HTMLElement.hazInputTableBody: HTMLTableSectionElement\n    get() {\n        val inputDatesTable = getChildById(Ids.HAIZ_INPUT_TABLE) as HTMLTableElement\n        return inputDatesTable.tBodies[0] as HTMLTableSectionElement\n    }\nprivate val HTMLElement.hazDurationInputTableBody: HTMLTableSectionElement\n    get() {\n        val inputDatesTable = getChildById(Ids.HAIZ_DURATION_INPUT_TABLE) as HTMLTableElement\n        return inputDatesTable.tBodies[0] as HTMLTableSectionElement\n    }\n\nprivate val HTMLElement.haizInputDatesRows: List<HTMLTableRowElement>\n    get() {\n        @Suppress(\"UNCHECKED_CAST\")\n        return hazInputTableBody.rows.asList() as List<HTMLTableRowElement>\n    }\nprivate val HTMLElement.haizDurationInputDatesRows: List<HTMLTableRowElement>\n    get() {\n        @Suppress(\"UNCHECKED_CAST\")\n        return hazDurationInputTableBody.rows.asList() as List<HTMLTableRowElement>\n    }\n\nprivate val HTMLTableRowElement.startTimeInput get() = getChildById(Ids.Row.INPUT_START_TIME) as HTMLInputElement\nprivate val HTMLTableRowElement.endTimeInput get() = getChildById(Ids.Row.INPUT_END_TIME) as HTMLInputElement\nprivate val HTMLTableRowElement.durationInput get() = getChildById(Ids.DurationRow.INPUT_DURATION) as HTMLInputElement\nprivate val HTMLTableRowElement.durationTypeInput get() = getChildById(Ids.DurationRow.INPUT_TYPE_OF_DURATION) as HTMLSelectElement\nprivate val HTMLTableRowElement.buttonsContainer get() = getChildById(Ids.Row.BUTTONS_CONTAINER)!!\nprivate val HTMLTableRowElement.removeButton get() = getChildById(Ids.Row.BUTTON_REMOVE) as HTMLButtonElement\nprivate val HTMLTableRowElement.removeDurationButton get() = getChildById(Ids.DurationRow.DURATION_BUTTON_REMOVE) as HTMLButtonElement\nprivate val HTMLTableRowElement.addBeforeButton get() = getChildById(Ids.Row.BUTTON_ADD_BEFORE) as HTMLButtonElement?\nprivate val HTMLTableRowElement.damOrTuhr get() = (getChildById(Ids.DurationRow.INPUT_TYPE_OF_DURATION) as HTMLSelectElement?)?.value\nprivate val HTMLTableRowElement.duration get() = (getChildById(Ids.DurationRow.INPUT_DURATION) as HTMLInputElement)\n\nprivate val HTMLElement.haizTimeInputs get() = haizInputDatesRows.flatMap { row ->\n    listOf(row.startTimeInput, row.endTimeInput)\n}\nprivate val HTMLElement.haizDurationInputs get() = haizDurationInputDatesRows.flatMap { row ->\n    listOf(row.durationInput, row.durationTypeInput)\n}\n\nprivate val HTMLElement.timeInputsGroups get() = listOf(listOf(pregStartTime, pregEndTime), haizTimeInputs)\nprivate val HTMLElement.durationInputsGroups get() = listOf(haizDurationInputs)\n\nfun main() {\n    window.onload = {\n        if(askPassword()){\n            document.body!!.addInputLayout()\n            setupRows(inputsContainers.first())\n            setupFirstDurationRow(inputsContainers.first())\n            document.addEventListener(Events.VISIBILITY_CHANGE, {\n                if (!document.isHidden) {\n                    setMaxToCurrentTimeForTimeInputs(inputsContainers.first())\n                }\n            })\n            languageSelecter.onchange = {\n                for (element in englishElements) element.classList.toggle(\"lang-invisible\", languageSelecterValue == \"urdu\")\n                for (element in urduElements) element.classList.toggle(\"lang-invisible\", languageSelecterValue == \"english\")\n                document.body!!.classList.toggle(\"rtl\", languageSelecterValue == \"urdu\")\n                document.querySelectorAll(\"select\")\n                    .asList()\n                    .map { it as HTMLSelectElement }\n                    .forEach { select ->\n                        select.children\n                            .asList()\n                            .map { it as HTMLOptionElement }\n                            .firstOrNull { option ->\n                                option.value == select.value && option.classList.contains(languageSelecterValue)\n                            }\n                            ?.selected = true\n                    }\n            }\n        }else{\n            askPassword()\n        }\n    }\n}\n\nfun askPassword():Boolean{\n    val pass1 = \"786\"\n    val password = window.prompt(\"${StringsOfLanguages.ENGLISH.warningOnlyAuthorizedPersonnel}\\n\\n\" +\n            \"${StringsOfLanguages.URDU.warningOnlyAuthorizedPersonnel}\\n\\n\" +\n            \"${StringsOfLanguages.URDU.passwordRequired}\\n\\n\", \"\")\n    if (pass1 == password) {\n        return true\n    }\n    else return askPassword()\n}\n\nfun Node.addInputLayout() {\n    append {\n        div {\n            id = Ids.INPUT_CONTAINERS_CONTAINER\n            inputFormDiv()\n        }\n        div {\n            style = Styles.NEW_ROW\n        }\n    }\n}\n\nprivate fun removeInputsContainer(inputsContainer: HTMLElement) {\n    inputsContainer.remove()\n    comparisonContainer?.remove()\n    inputsContainers.singleOrNull()?.inputsContainerRemoveButton?.remove()\n}\n\n//private fun cloneInputsContainer(inputsContainerToCopyFrom: HTMLElement) {\n//    comparisonContainer?.remove()\n//    if (inputsContainers.size == 1) {\n//        addRemoveInputsContainerButton(inputsContainerToCopyFrom)\n//    }\n//    val clonedInputsContainer = inputsContainerToCopyFrom.after {\n//        inputFormDiv(inputsContainerToCopyFrom)\n//    }.single()\n//    setupFirstRow(clonedInputsContainer)\n//}\n\n//private fun addRemoveInputsContainerButton(inputContainer: HTMLElement) {\n//    inputContainer.inputsContainerCloneButton.before {\n//        button(type = ButtonType.button, classes = \"minus\") {\n//            +\"\\u274C\"\n//            id = Ids.INPUTS_CONTAINER_REMOVE_BUTTON\n//            style = \"float: right\"\n//            onClickFunction = { event ->\n//                removeInputsContainer(findInputContainer(event))\n//            }\n//        }\n//    }\n//}\n\nprivate fun addCompareButtonIfNeeded() {\n    if (comparisonContainer != null ||\n        inputsContainers.size < 2 ||\n        inputsContainers.any { it.haizDatesList == null }\n    ) return\n\n    inputsContainersContainer.after {\n        div {\n            id = Ids.COMPARISON_CONTAINER\n            button(type = ButtonType.button) {\n                +\"Calculate difference\"\n                style = \"margin: 0.2rem auto; display: block;\"\n                onClickFunction = { compareResults() }\n            }\n            content {\n                id = Ids.CONTENT_DATES_DIFFERENCE\n            }\n            table {\n                id = Ids.DATES_DIFFERENCE_TABLE\n            }\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.inputFormDiv(inputContainerToCopyFrom: HTMLElement? = null) {\n    div {\n        id = Ids.INPUT_CONTAINER\n        if (inputContainerToCopyFrom != null) {\n            removeInputsContainerButton()\n        }\n        classes = setOf(Ids.INPUT_CONTAINER, \"date_only\")\n//        addInputsContainerButton()\n        inputForm(inputContainerToCopyFrom)\n        content()\n    }\n}\n\n//private fun TagConsumer<HTMLElement>.addInputsContainerButton() {\n//    inputsContainerAddRemoveButton {\n//        +\"Clone\"\n//        classes = setOf(\"plus\", \"clone\")\n//        id = Ids.INPUTS_CONTAINER_CLONE_BUTTON\n//        onClickFunction = { event ->\n//            cloneInputsContainer(findInputContainer(event))\n//        }\n//    }\n//}\n\nprivate fun TagConsumer<HTMLElement>.removeInputsContainerButton() {\n    inputsContainerAddRemoveButton {\n        +\"\\u274C\"\n        classes = setOf(\"minus\")\n        id = Ids.INPUTS_CONTAINER_REMOVE_BUTTON\n        onClickFunction = { event ->\n            removeInputsContainer(findInputContainer(event))\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.inputsContainerAddRemoveButton(block : BUTTON.() -> Unit = {}) {\n    button(type = ButtonType.button) {\n        style = \"float: right\"\n        block()\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.content() {\n    div(classes = \"invisible\") {\n        id = Ids.CONTENT_CONTAINER\n        div(classes = \"urdu\") {\n            id = \"content_wrapper\"\n            div(classes = \"left\") {\n                small(classes = \"rtl\") { }\n                button(classes = \"rtl\") {\n                    onClickFunction = { event -> copyText(event) }\n                    +\"Copy\"\n                }\n            }\n            content {\n                id = Ids.CONTENT_URDU\n                classes = setOfNotNull(\"urdu\")\n            }\n        }\n        div(classes = \"english lang-invisible\") {\n            id = \"content_wrapper\"\n            div(classes = \"right\") {\n                small { }\n                button {\n                    onClickFunction = { event -> copyText(event) }\n                    +\"Copy\"\n                }\n            }\n            div(classes = \"content\") {\n                content {\n                    id = Ids.CONTENT_ENGLISH\n                    classes = setOfNotNull(\"english\", \"lang_invisible\")\n                }\n            }\n        }\n        hr()\n//        content {\n//            id = Ids.CONTENT_DATES\n//        }\n//        hr()\n    }\n}\n\nprivate fun copyText(event: Event) {\n    val div = (event.currentTarget as HTMLElement).getAncestor<HTMLDivElement> { it.id.equals(\"content_wrapper\") }\n    val para = div?.querySelector(\"p\")\n    val small = div?.querySelector(\"small\")\n    para?.textContent?.let { window.navigator.clipboard.writeText(it) }\n    small?.innerHTML?.let { small.innerHTML = \"Copied!\" }\n    window.setTimeout({\n        if (small != null) {\n            small.innerHTML = \"\"\n        }\n    }, 1000)\n}\n\nprivate fun TagConsumer<HTMLElement>.inputForm(inputContainerToCopyFrom: HTMLElement?) {\n    form(action = \"javascript:void(0);\") {\n        div(classes = \"label-input\") {\n            typeConfigurationSelectDropdown(inputContainerToCopyFrom)\n            aadatInputs(inputContainerToCopyFrom)\n//            mubtadiaCheckBox(inputContainerToCopyFrom)\n//            pregnancyCheckBox(inputContainerToCopyFrom)\n            mustabeenCheckBox(inputContainerToCopyFrom)\n            pregnancyStartTimeInput(inputContainerToCopyFrom)\n            pregnancyEndTimeInput(inputContainerToCopyFrom)\n        }\n        hr()\n        haizDatesInputTable(inputContainerToCopyFrom)\n        haizDurationInputTable(inputContainerToCopyFrom)\n//        istimrarCheckBox(inputContainerToCopyFrom)\n        calculateButton()\n        hr()\n        onSubmitFunction = { event ->\n            parseEntries(findInputContainer(event))\n        }\n    }\n}\n\nprivate fun FlowContent.typeConfigurationSelectDropdown(inputContainerToCopyFrom: HTMLElement?) {\n    val isDateOnly = inputContainerToCopyFrom?.isDateOnly ?: IS_DEFAULT_INPUT_MODE_DATE_ONLY\n    div(classes = \"row\") {\n        label(classes = \"english lang-invisible\") {\n            htmlFor = Ids.DATE_TIME_RADIO\n            +StringsOfLanguages.ENGLISH.typeOfInput\n        }\n        label(classes = \"urdu\") {\n            htmlFor = Ids.DATE_TIME_RADIO\n            +StringsOfLanguages.URDU.typeOfInput\n        }\n        select {\n            id = \"typePicker\"\n            onChangeFunction = { event ->\n                onClickTypeConfigurationSelectDropdown(findInputContainer(event))\n            }\n            option(classes = \"english lang-invisible\") {\n                value = \"dateOnly\"\n                +StringsOfLanguages.ENGLISH.dateOnly\n            }\n            option(classes = \"urdu\") {\n                selected = true\n                value = \"dateOnly\"\n                +StringsOfLanguages.URDU.dateOnly\n            }\n            option(classes = \"english lang-invisible\") {\n                value = \"dateTime\"\n                +StringsOfLanguages.ENGLISH.dateAndTime\n            }\n            option(classes = \"urdu\") {\n                value = \"dateTime\"\n                +StringsOfLanguages.URDU.dateAndTime\n            }\n            option(classes = \"english lang-invisible\") {\n                value = \"duration\"\n                +StringsOfLanguages.ENGLISH.duration\n            }\n            option(classes = \"urdu\") {\n                value = \"duration\"\n                +StringsOfLanguages.URDU.duration\n            }\n        }\n//        div(classes = \"flex\") {\n//            radioInput(classes = \"zero-flex\") {\n//                id = Ids.DATE_TIME_RADIO\n//                name = Ids.DATE_AND_OR_RADIO\n//                checked = !isDateOnly\n//                onChangeFunction = { event -> onClickDateConfigurationRadioButton(findInputContainer(event)) }\n//            }\n//            label(classes = \"english lang-invisible\") {\n//                htmlFor = Ids.DATE_TIME_RADIO\n//                +\"Date and Time\"\n//            }\n//            label(classes = \"urdu\") {\n//                htmlFor = Ids.DATE_TIME_RADIO\n//                +\"تاریخ اور وقت\"\n//            }\n//        }\n//        div(classes = \"flex\") {\n//            radioInput(classes = \"zero-flex\") {\n//                id = Ids.DATE_ONLY_RADIO\n//                name = Ids.DATE_AND_OR_RADIO\n//                checked = isDateOnly\n//                onChangeFunction = { event -> onClickDateConfigurationRadioButton(findInputContainer(event)) }\n//            }\n//            label(classes = \"english lang-invisible\") {\n//                htmlFor = Ids.DATE_ONLY_RADIO\n//                +\"Date only\"\n//            }\n//            label(classes = \"urdu\") {\n//                htmlFor = Ids.DATE_ONLY_RADIO\n//                +\"صرف تاریخیں\"\n//            }\n//        }\n    }\n}\n\nprivate fun FlowContent.aadatInputs(inputContainerToCopyFrom: HTMLElement?) {\n    div(classes = \"row aadat_inputs\") {\n        label(classes = \"english lang-invisible\") {\n            htmlFor = Ids.AADAT_HAIZ_INPUT\n            +(StringsOfLanguages.ENGLISH.haizAadat)\n        }\n        label(classes = \"urdu\") {\n            htmlFor = Ids.AADAT_HAIZ_INPUT\n            +(StringsOfLanguages.URDU.haizAadat)\n        }\n        input(classes = \"aadat\") {\n            id = Ids.AADAT_HAIZ_INPUT\n            value = inputContainerToCopyFrom?.aadatHaz?.value.orEmpty()\n            onInputFunction = { event -> (event.currentTarget as HTMLInputElement).validateAadat(3..10) }\n        }\n    }\n    div(classes = \"row aadat_inputs\") {\n        label(classes = \"english lang-invisible\") {\n            htmlFor = Ids.AADAT_TUHR_INPUT\n            +(StringsOfLanguages.ENGLISH.tuhrAadat)\n        }\n        label(classes = \"urdu\") {\n            htmlFor = Ids.AADAT_TUHR_INPUT\n            +(StringsOfLanguages.URDU.tuhrAadat)\n        }\n        input(classes = \"aadat\") {\n            id = Ids.AADAT_TUHR_INPUT\n            value = inputContainerToCopyFrom?.aadatTuhr?.value.orEmpty()\n            onInputFunction = { event -> (event.currentTarget as HTMLInputElement).validateAadat(15..6 * 30) }\n        }\n    }\n    div(classes = \"row aadat_inputs\") {\n        label(classes = \"english lang-invisible\") {\n            htmlFor = Ids.MAWJOODA_TUHR_INPUT\n            +(StringsOfLanguages.ENGLISH.mawjoodahTuhr)\n        }\n        label(classes = \"urdu\") {\n            htmlFor = Ids.MAWJOODA_TUHR_INPUT\n            +(StringsOfLanguages.URDU.mawjoodahTuhr)\n        }\n        input(classes = \"aadat\") {\n            id = Ids.MAWJOODA_TUHR_INPUT\n            value = inputContainerToCopyFrom?.mawjoodaTuhr?.value.orEmpty()\n            onInputFunction = { event -> (event.currentTarget as HTMLInputElement).validateAadat(15..10000) }\n            //TODO: Find out how to do infinity, rather than 10000\n        }\n        div {\n            id = \"fasid\"\n            label(classes = \"english lang-invisible\") {\n                htmlFor = Ids.MAWJOODA_FASID_CHECKBOX\n                +(StringsOfLanguages.ENGLISH.faasid)\n            }\n            label(classes = \"urdu\") {\n                htmlFor = Ids.MAWJOODA_FASID_CHECKBOX\n                +(StringsOfLanguages.URDU.faasid)\n            }\n            input(type = InputType.checkBox) {\n                id = Ids.MAWJOODA_FASID_CHECKBOX\n                checked = false\n            }\n        }\n    }\n    pregnancyCheckBox(inputContainerToCopyFrom)\n    div(classes = \"row preg-checked invisible\") {\n        label {\n            htmlFor = Ids.AADAT_NIFAS_INPUT\n            classes = setOfNotNull(\n                \"preg-checked\",\n                \"english\",\n                \"lang-invisible\",\n                if (inputContainerToCopyFrom?.isPregnancy != true) \"invisible\" else null,\n            )\n            +(StringsOfLanguages.ENGLISH.nifasAadat)\n        }\n        label {\n            htmlFor = Ids.AADAT_NIFAS_INPUT\n            classes = setOfNotNull(\n                \"preg-checked\",\n                \"urdu\",\n                if (inputContainerToCopyFrom?.isPregnancy != true) \"invisible\" else null,\n            )\n            +(StringsOfLanguages.URDU.nifasAadat)\n        }\n        input {\n            id = Ids.AADAT_NIFAS_INPUT\n            classes = setOfNotNull(\n                \"preg-checked\",\n                \"aadat\",\n                if (inputContainerToCopyFrom?.isPregnancy != true) \"invisible\" else null\n            )\n            step = \"any\"\n            required = false\n            disabled = inputContainerToCopyFrom?.isPregnancy != true\n            value = inputContainerToCopyFrom?.aadatNifas?.value.orEmpty()\n            onInputFunction = { event -> (event.currentTarget as HTMLInputElement).validateAadat(1..40) }\n        }\n    }\n}\n\nprivate fun HTMLInputElement.validateAadat(validityRange: ClosedRange<Int>) {\n    val errormessage = if(languageSelecterValue==\"english\"){StringsOfLanguages.ENGLISH.incorrectAadat } else{StringsOfLanguages.URDU.incorrectAadat}\n    value = value.replace(\"[^0-9:]\".toRegex(), \"\")\n    val doubleValidityRange = validityRange.start.toDouble()..validityRange.endInclusive.toDouble()\n    setCustomValidity(try {\n        val days = (parseDays(value)?.div(MILLISECONDS_IN_A_DAY))?.toDouble()\n        require(days == null || days in doubleValidityRange) { errormessage }\n        \"\"\n    } catch (e: IllegalArgumentException) {\n        e.message ?: errormessage\n    })\n}\n\nprivate fun FlowContent.pregnancyCheckBox(inputContainerToCopyFrom: HTMLElement?) {\n    div(classes = \"row\") {\n        div {\n            label(classes = \"english lang-invisible\") {\n                htmlFor = Ids.PREGNANCY_CHECKBOX\n                +(StringsOfLanguages.ENGLISH.nifas)\n            }\n            label(classes = \"urdu\") {\n                htmlFor = Ids.PREGNANCY_CHECKBOX\n                +(StringsOfLanguages.URDU.nifas)\n            }\n            checkBoxInput {\n                id = Ids.PREGNANCY_CHECKBOX\n                checked = inputContainerToCopyFrom?.isPregnancy == true\n                onChangeFunction = { event ->\n                    val isChecked = (event.currentTarget as HTMLInputElement).checked\n                    val inputContainer = findInputContainer(event)\n                    for (pregnancyElement in inputContainer.pregnancyInputs) {\n                            pregnancyElement.visibility = isChecked\n                            pregnancyElement.disabled = !isChecked\n                    }\n                    for (pregnancyElement in inputContainer.pregnancyElements) {\n                            pregnancyElement.visibility = isChecked\n                    }\n                    disableAadaat(inputContainer, inputContainer.isDuration)\n                }\n            }\n        }\n    }\n}\n//private fun FlowContent.mubtadiaCheckBox(inputContainerToCopyFrom: HTMLElement?) {\n//    label() {\n//        htmlFor = Ids.MUBTADIA_CHECKBOX\n//        +\"Mubtadia\"\n//    }\n//    checkBoxInput() {\n//        id = Ids.MUBTADIA_CHECKBOX\n//        checked = inputContainerToCopyFrom?.isPregnancy == true\n//    }\n//}\n\nprivate fun FlowContent.mustabeenCheckBox(inputContainerToCopyFrom: HTMLElement?) {\n    div(classes = \"row preg-checked invisible\") {\n        div {\n            label {\n                htmlFor = Ids.MUSTABEEN_CHECKBOX\n                classes = setOfNotNull(\n                    \"preg-checked\",\n                    \"english\",\n                    \"lang-invisible\",\n                    if (inputContainerToCopyFrom?.isPregnancy != true) \"invisible\" else null,\n                )\n                +StringsOfLanguages.ENGLISH.mustabeenUlKhilqa\n            }\n            label {\n                htmlFor = Ids.MUSTABEEN_CHECKBOX\n                classes = setOfNotNull(\n                    \"preg-checked\",\n                    \"urdu\",\n                    if (inputContainerToCopyFrom?.isPregnancy != true) \"invisible\" else null,\n                )\n                +StringsOfLanguages.URDU.mustabeenUlKhilqa\n            }\n            checkBoxInput {\n                id = Ids.MUSTABEEN_CHECKBOX\n                classes = setOfNotNull(\n                    \"preg-checked\",\n                    if (inputContainerToCopyFrom?.isPregnancy != true) \"invisible\" else null\n                )\n                checked = inputContainerToCopyFrom == null || inputContainerToCopyFrom.mustabeen\n                checked = inputContainerToCopyFrom?.mustabeen != false\n                disabled = inputContainerToCopyFrom?.isPregnancy != true\n            }\n        }\n    }\n}\n\nprivate fun FlowContent.pregnancyStartTimeInput(inputContainerToCopyFrom: HTMLElement?) {\n    div(classes = \"row preg-checked invisible aadat_inputs\") {\n        div {\n            label {\n                htmlFor = Ids.PREG_START_TIME_INPUT\n                classes = setOfNotNull(\n                    \"preg-checked\",\n                    \"english\",\n                    \"lang-invisible\",\n                    if (inputContainerToCopyFrom?.isPregnancy != true) \"invisible\" else null,\n                )\n                +StringsOfLanguages.ENGLISH.pregnancyStartTime\n            }\n            label {\n                htmlFor = Ids.PREG_START_TIME_INPUT\n                classes = setOfNotNull(\n                    \"preg-checked\",\n                    \"urdu\",\n                    if (inputContainerToCopyFrom?.isPregnancy != true) \"invisible\" else null,\n                )\n                +StringsOfLanguages.URDU.pregnancyStartTime\n            }\n            pregnancyTimeInput(inputContainerToCopyFrom) {\n                classes = setOfNotNull(\n                    \"preg-checked\",\n                    if (inputContainerToCopyFrom?.isPregnancy != true) \"invisible\" else null\n                )\n                id = Ids.PREG_START_TIME_INPUT\n                onChangeFunction = { event ->\n                    findInputContainer(event).pregEndTime.min = (event.currentTarget as HTMLInputElement).value\n                }\n            }\n        }\n    }\n}\n\nprivate fun FlowContent.pregnancyEndTimeInput(inputContainerToCopyFrom: HTMLElement?) {\n    div(classes = \"row preg-checked invisible aadat_inputs\") {\n        div {\n            label {\n                htmlFor = Ids.PREG_END_TIME_INPUT\n                classes = setOfNotNull(\n                    \"preg-checked\",\n                    \"english\",\n                    \"lang-invisible\",\n                    if (inputContainerToCopyFrom?.isPregnancy != true) \"invisible\" else null,\n                )\n                +StringsOfLanguages.ENGLISH.birthMiscarrriageTime\n            }\n            label {\n                htmlFor = Ids.PREG_END_TIME_INPUT\n                classes = setOfNotNull(\n                    \"preg-checked\",\n                    \"urdu\",\n                    if (inputContainerToCopyFrom?.isPregnancy != true) \"invisible\" else null,\n                )\n                +StringsOfLanguages.URDU.birthMiscarrriageTime\n            }\n            pregnancyTimeInput(inputContainerToCopyFrom) {\n                classes = setOfNotNull(\n                    \"preg-checked\",\n                    if (inputContainerToCopyFrom?.isPregnancy != true) \"invisible\" else null\n                )\n                id = Ids.PREG_END_TIME_INPUT\n                onChangeFunction = { event ->\n                    findInputContainer(event).pregStartTime.max = (event.currentTarget as HTMLInputElement).value\n                }\n            }\n        }\n    }\n}\n\nprivate fun FlowContent.pregnancyTimeInput(inputContainerToCopyFrom: HTMLElement?, block: INPUT.() -> Unit = {}) {\n    if (inputContainerToCopyFrom != null) {\n        timeInput(inputContainerToCopyFrom) {\n            disabled = !inputContainerToCopyFrom.isPregnancy\n            block()\n        }\n    } else {\n        timeInput(IS_DEFAULT_INPUT_MODE_DATE_ONLY) {\n            disabled = true\n//            max = currentTimeString(IS_DEFAULT_INPUT_MODE_DATE_ONLY)\n            block()\n        }\n    }\n}\n\nprivate fun FlowContent.calculateButton() {\n    button(classes = \"english lang-invisible calc-btn\") {\n        +StringsOfLanguages.ENGLISH.calculate\n        onClickFunction = { event -> setMaxToCurrentTimeForTimeInputs(findInputContainer(event)) }\n    }\n    button(classes = \"urdu calc-btn\") {\n        +StringsOfLanguages.URDU.calculate\n        onClickFunction = { event -> setMaxToCurrentTimeForTimeInputs(findInputContainer(event)) }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.content(block : P.() -> Unit = {}) {\n    p {\n        id = \"content\"\n        style = \"white-space: pre-wrap;\"\n        block()\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.haizDatesInputTable(inputContainerToCopyFrom: HTMLElement?) {\n    table {\n        id = Ids.HAIZ_INPUT_TABLE\n        thead {\n            tr {\n                th(classes = \"english lang-invisible\") { +StringsOfLanguages.ENGLISH.startTime }\n                th(classes = \"english lang-invisible\") { +StringsOfLanguages.ENGLISH.endTime }\n                th(classes = \"urdu\") { +StringsOfLanguages.URDU.startTime }\n                th(classes = \"urdu\") { +StringsOfLanguages.URDU.endTime }\n                th {addBeforeButton()}\n            }\n        }\n        tbody {\n            if (inputContainerToCopyFrom != null) {\n                for (inputDateRow in inputContainerToCopyFrom.haizInputDatesRows) {\n                    inputRow(inputContainerToCopyFrom, inputDateRow.startTimeInput, inputDateRow.endTimeInput)\n                }\n            } else {\n                inputRow(\n                    isDateOnlyLayout = IS_DEFAULT_INPUT_MODE_DATE_ONLY,\n                    minTimeInput = \"\",\n                    maxTimeInput = \"\"//currentTimeString(IS_DEFAULT_INPUT_MODE_DATE_ONLY)\n                )\n            }\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.haizDurationInputTable(inputContainerToCopyFrom: HTMLElement?) {\n    table(classes = \"invisible\") {\n        id = Ids.HAIZ_DURATION_INPUT_TABLE\n        thead {\n            tr {\n                th(classes = \"english lang-invisible\") { +StringsOfLanguages.ENGLISH.duration }\n                th(classes = \"english lang-invisible\") { +StringsOfLanguages.ENGLISH.damOrTuhr }\n                th(classes = \"urdu\") { +StringsOfLanguages.URDU.duration }\n                th(classes = \"urdu\") { +StringsOfLanguages.URDU.damOrTuhr }\n                th {durationAddBeforeButton()}\n            }\n        }\n        tbody {\n            durationInputRow(false, true)\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.inputRow(isDateOnlyLayout: Boolean, minTimeInput: String, maxTimeInput: String) {\n    tr {\n        td {\n            timeInput(isDateOnlyLayout, minTimeInput, maxTimeInput, indexWithinRow = 0) {\n                id = Ids.Row.INPUT_START_TIME\n            }\n        }\n        td {\n            timeInput(isDateOnlyLayout, minTimeInput, maxTimeInput, indexWithinRow = 1) {\n                id = Ids.Row.INPUT_END_TIME\n            }\n        }\n        addRemoveButtonsTableData()\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.durationInputRow(lastWasDam: Boolean, disable: Boolean, preg: Boolean = false) {\n    val urdu = languageSelecterValue == \"urdu\"\n    tr {\n        td {\n            input(type = InputType.number) {\n                id = Ids.DurationRow.INPUT_DURATION\n                disabled = disable\n            }\n        }\n        td {\n            select {\n                id = Ids.DurationRow.INPUT_TYPE_OF_DURATION\n                disabled = disable\n                onChangeFunction = { event ->\n                    val row = findRow(event)\n                    row.durationInput.disabled = (event.target as HTMLSelectElement).value in setOf(\"haml\", \"wiladat\")\n                    row.durationInput.value = \"0\"\n                }\n                option(classes = \"english lang-invisible\") {\n                    selected = !urdu && !lastWasDam\n                    value = \"dam\"\n                    + StringsOfLanguages.ENGLISH.dam\n                }\n                option(classes = \"english lang-invisible\") {\n                    selected = !urdu && lastWasDam\n                    value = \"tuhr\"\n                    + StringsOfLanguages.ENGLISH.tuhr\n                }\n                option {\n                    classes = setOfNotNull(\n                        \"english\",\n                        \"lang-invisible\",\n                        \"preg-checked\",\n                        if (!preg) \"invisible\" else null,\n                    )\n                    value = \"haml\"\n                    + StringsOfLanguages.ENGLISH.preg\n                }\n                option(classes = \"english lang-invisible preg-checked invisible\") {\n                    classes = setOfNotNull(\n                        \"english\",\n                        \"lang-invisible\",\n                        \"preg-checked\",\n                        if (!preg) \"invisible\" else null,\n                    )\n                    value = \"wiladat\"\n                    + StringsOfLanguages.ENGLISH.birthduration\n                }\n                option(classes = \"urdu\") {\n                    selected = urdu && !lastWasDam\n                    value = \"dam\"\n                    + StringsOfLanguages.URDU.dam\n                }\n                option(classes = \"urdu\") {\n                    selected = urdu && lastWasDam\n                    value = \"tuhr\"\n                    + StringsOfLanguages.URDU.tuhr\n                }\n                option {\n                    classes = setOfNotNull(\n                        \"urdu\",\n                        \"preg-checked\",\n                        if (!preg) \"invisible\" else null,\n                    )\n                    value = \"haml\"\n                    + StringsOfLanguages.URDU.pregduration\n                }\n                option {\n                    classes = setOfNotNull(\n                        \"urdu\",\n                        \"preg-checked\",\n                        if (!preg) \"invisible\" else null,\n                    )\n                    value = \"wiladat\"\n                    + StringsOfLanguages.URDU.birthduration\n                }\n            }\n        }\n        addRemoveButtonsDurationData()\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.inputRow(\n    inputContainerToCopyFrom: HTMLElement,\n    startTimeInputToCopyFrom: HTMLInputElement,\n    endTimeInputToCopyFrom: HTMLInputElement\n) {\n    tr {\n        td {\n            timeInput(inputContainerToCopyFrom, startTimeInputToCopyFrom, indexWithinRow = 0) {\n                id = Ids.Row.INPUT_START_TIME\n            }\n        }\n        td {\n            timeInput(inputContainerToCopyFrom, endTimeInputToCopyFrom, indexWithinRow = 1) {\n                id = Ids.Row.INPUT_END_TIME\n            }\n        }\n        addRemoveButtonsTableData()\n    }\n}\n\nprivate fun TR.addRemoveButtonsTableData() {\n    td {\n        id = Ids.Row.BUTTONS_CONTAINER\n        addButton()\n        removeButton()\n    }\n}\n\nprivate fun TR.addRemoveButtonsDurationData() {\n    td {\n        id = Ids.DurationRow.DURATION_BUTTONS_CONTAINER\n        durationAddButton()\n        durationRemoveButton()\n    }\n}\n\nprivate fun FlowContent.timeInput(\n    isDateOnlyLayout: Boolean,\n    minTimeInput: String,\n    maxTimeInput: String,\n    indexWithinRow: Int,\n    block: INPUT.() -> Unit = {}\n) {\n    timeInput(isDateOnlyLayout, minTimeInput, maxTimeInput) {\n        onChangeFunction = { event -> setMinMaxForTimeInputsOnInput(event, indexWithinRow) }\n        block()\n    }\n}\n\nprivate fun FlowContent.timeInput(\n    inputContainerToCopyFrom: HTMLElement,\n    timeInputToCopyFrom: HTMLInputElement,\n    indexWithinRow: Int,\n    block: INPUT.() -> Unit = {}\n) {\n    timeInput(inputContainerToCopyFrom, timeInputToCopyFrom) {\n        onChangeFunction = { event -> setMinMaxForTimeInputsOnInput(event, indexWithinRow) }\n        block()\n    }\n}\n\nprivate fun FlowContent.timeInput(\n    isDateOnlyLayout: Boolean,\n    minTimeInput: String,\n    maxTimeInput: String,\n    block: INPUT.() -> Unit = {}\n) {\n    timeInput(isDateOnlyLayout) {\n        min = minTimeInput\n        max = maxTimeInput\n        block()\n    }\n}\n\nprivate fun FlowContent.timeInput(\n    inputContainerToCopyFrom: HTMLElement,\n    timeInputToCopyFrom: HTMLInputElement? = null,\n    block: INPUT.() -> Unit = {}\n) {\n    timeInput(inputContainerToCopyFrom.isDateOnly) {\n        block()\n        @Suppress(\"NAME_SHADOWING\")\n        val timeInputToCopyFrom = timeInputToCopyFrom ?: inputContainerToCopyFrom.getChildById(id) as HTMLInputElement\n        value = timeInputToCopyFrom.value\n        min = timeInputToCopyFrom.min\n        max = timeInputToCopyFrom.max\n    }\n}\n\nprivate fun FlowContent.timeInput(\n    isDateOnlyLayout: Boolean,\n    block: INPUT.() -> Unit = {}\n) {\n    customDateTimeInput(isDateOnlyLayout) {\n        required = true\n        onClickFunction = { event ->\n            setMaxToCurrentTimeForTimeInputs(findInputContainer(event))\n        }\n        block()\n    }\n}\n\nprivate fun FlowContent.removeButton() {\n    button(type = ButtonType.button, classes = \"minus\") {\n        +\"\\u274C\"\n        title = \"Remove\"\n        id = Ids.Row.BUTTON_REMOVE\n        onClickFunction = { event ->\n            val row = findRow(event)\n            val inputContainer = findInputContainer(event)\n            updateMinMaxForTimeInputsBeforeRemovingRow(inputContainer, row.rowIndexWithinTableBody)\n            row.remove()\n            setupFirstRow(inputContainer)\n        }\n    }\n}\n\nprivate fun FlowContent.durationRemoveButton() {\n    button(type = ButtonType.button, classes = \"minus\") {\n        +\"\\u274C\"\n        title = \"Remove\"\n        id = Ids.DurationRow.DURATION_BUTTON_REMOVE\n        onClickFunction = { event ->\n            val row = findRow(event)\n            val inputContainer = findInputContainer(event)\n            row.remove()\n            setupFirstDurationRow(inputContainer)\n        }\n    }\n}\n\nprivate fun FlowContent.addButton() {\n    button(type = ButtonType.button, classes = \"plus\") {\n        +\"\\u2795\"\n        title = \"Add\"\n        onClickFunction = { event ->\n            val row = findRow(event)\n            val inputContainer = findInputContainer(event)\n            row.after {\n                inputRow(\n                    inputContainer.isDateOnly,\n                    minTimeInput = row.endTimeInput.run { value.takeUnless(String::isEmpty) ?: min },\n                    maxTimeInput = row.endTimeInput.max\n                )\n            }\n            setupRows(inputContainer)\n        }\n    }\n}\n\nprivate fun FlowContent.durationAddButton() {\n    button(type = ButtonType.button, classes = \"plus\") {\n        +\"\\u2795\"\n        title = \"Add\"\n        onClickFunction = { event ->\n            val row = findRow(event)\n            val rowIsDam = row.damOrTuhr in setOf(\"dam\", \"haml\")\n            val inputContainer = findInputContainer(event)\n            row.after {\n                durationInputRow(rowIsDam, false, inputContainer.isPregnancy)\n            }\n            setupFirstDurationRow(inputContainer)\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.durationAddBeforeButton() {\n    button(type = ButtonType.button, classes = \"plus\") {\n        +\"\\u2795 \\u25B2\"\n        title = \"Add at Start\"\n        id = Ids.Row.BUTTON_ADD_BEFORE\n        onClickFunction = { event ->\n            val inputContainer = findInputContainer(event)\n            val inputDatesRows = inputContainer.haizDurationInputDatesRows\n            val firstIsDam = inputDatesRows.first().damOrTuhr in setOf(\"dam\", \"wiladat\")\n\n            inputContainer.hazDurationInputTableBody.prepend { durationInputRow(firstIsDam, false, inputContainer.isPregnancy) }\n            setupFirstDurationRow(inputContainer)\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.addBeforeButton() {\n    button(type = ButtonType.button, classes = \"plus\") {\n        +\"\\u2795 \\u25B2\"\n        title = \"Add at Start\"\n        id = Ids.DurationRow.DURATION_BUTTON_ADD_BEFORE\n        onClickFunction = { event ->\n            val inputContainer = findInputContainer(event)\n            val row = inputContainer.hazInputTableBody.firstChild as HTMLTableRowElement\n\n            inputContainer.hazInputTableBody.prepend { inputRow(\n                inputContainer.isDateOnly,\n                minTimeInput = \"\",\n                maxTimeInput = row.startTimeInput.run { value.takeUnless(String::isEmpty) ?: max }\n            ) }\n            setupRows(inputContainer)\n        }\n    }\n}\n\nprivate fun findInputContainer(event: Event) =\n    (event.currentTarget as Element).getAncestor<HTMLElement> { it.id.startsWith(Ids.INPUT_CONTAINER)}!!\nprivate fun findRow(event: Event) = (event.currentTarget as Element).getAncestor<HTMLTableRowElement>()!!\n\nprivate fun setupRows(inputContainer: HTMLElement) {\n    setMaxToCurrentTimeForTimeInputs(inputContainer)\n    setupFirstRow(inputContainer)\n}\n\n//private fun setupFirstRow(inputContainer: HTMLElement) {\n//    ensureAddFirstButtonOnlyShownInFirstRow(inputContainer)\n//}\n\n//private fun updateRemoveButtonDisabledStateForFirstRow(inputContainer: HTMLElement) {\nprivate fun setupFirstRow(inputContainer: HTMLElement) {\n    val inputDatesRows = inputContainer.haizInputDatesRows\n    inputDatesRows.first().removeButton.visibility = inputDatesRows.size != 1\n    inputDatesRows.getOrNull(1)?.removeButton?.visibility = true\n}\n//private fun updateRemoveButtonDisabledStateForFirstDurationRow(inputContainer: HTMLElement) {\nprivate fun setupFirstDurationRow(inputContainer: HTMLElement) {\n    val inputDatesRows = inputContainer.haizDurationInputDatesRows\n    inputDatesRows.first().removeDurationButton.visibility = inputDatesRows.size != 1\n    inputDatesRows.getOrNull(1)?.removeDurationButton?.visibility = true\n}\n\n\n//private fun ensureAddFirstButtonOnlyShownInFirstRow(inputContainer: HTMLElement) {\n//    for ((index, row) in inputContainer.haizInputDatesRows.withIndex()) {\n//        if (index > 0) {\n//            row.addBeforeButton?.remove()\n//        } else if (row.addBeforeButton == null) {\n//            row.buttonsContainer.append { addBeforeButton() }\n//        }\n//    }\n//}\n\nprivate fun setMaxToCurrentTimeForTimeInputs(inputContainer: HTMLElement) {\n    val currentTime = currentTimeString(inputContainer.isDateOnly)\n    for (timeInputsGroup in inputContainer.timeInputsGroups) {\n        for (timeInput in timeInputsGroup.asReversed()) {\n//            timeInput.max = currentTime\n            if (timeInput.value.isNotEmpty()) break\n        }\n    }\n}\n\nprivate fun setMinMaxForTimeInputsOnInput(event: Event, indexWithinRow: Int) {\n    setMinMaxForTimeInputsOnInput(\n        findInputContainer(event),\n        (findRow(event).rowIndexWithinTableBody * 2) + indexWithinRow\n    )\n}\n\nprivate fun setMinMaxForTimeInputsOnInput(inputContainer: HTMLElement, index: Int) {\n    val timeInputs = inputContainer.haizTimeInputs\n    val timeInput = timeInputs[index]\n    val min: String\n    val max: String\n    val previousTimeInputs: List<HTMLInputElement>\n    val nextTimeInputs: List<HTMLInputElement>\n    val value = timeInput.value\n    if (value.isEmpty()) {\n        min = timeInput.min\n        max = timeInput.max\n        previousTimeInputs = timeInputs.take(index + 1)\n        nextTimeInputs = timeInputs.drop(index)\n    } else {\n        min = value\n        max = value\n        previousTimeInputs = timeInputs.take(index)\n        nextTimeInputs = timeInputs.drop(index + 1)\n    }\n    for (previousTimeInput in previousTimeInputs.asReversed()) {\n        previousTimeInput.max = max\n        if (previousTimeInput.value.isNotEmpty()) break\n    }\n    for (nextTimeInput in nextTimeInputs) {\n        nextTimeInput.min = min\n        if (nextTimeInput.value.isNotEmpty()) break\n    }\n}\n\nprivate fun updateMinMaxForTimeInputsBeforeRemovingRow(inputContainer: HTMLElement, rowIndex: Int) {\n    val timeInputs = inputContainer.haizTimeInputs\n    val startDateIndex = rowIndex * 2\n    val endDateIndex = startDateIndex + 1\n    val min = timeInputs[startDateIndex].min\n    val max = timeInputs[endDateIndex].max\n    val previousTimeInputs = timeInputs.take(startDateIndex)\n    val nextTimeInputs = timeInputs.drop(endDateIndex + 1)\n    for (previousTimeInput in previousTimeInputs.asReversed()) {\n        previousTimeInput.max = max\n        if (previousTimeInput.value.isNotEmpty()) break\n    }\n    for (nextTimeInput in nextTimeInputs) {\n        nextTimeInput.min = min\n        if (nextTimeInput.value.isNotEmpty()) break\n    }\n}\n\nprivate fun onClickTypeConfigurationSelectDropdown(inputContainer: HTMLElement) {\n    val isDateOnly = inputContainer.isDateOnly\n    val isDateTime = inputContainer.isDateTime\n    val isDuration = inputContainer.isDuration\n    if (isDateOnly || isDateTime) {\n        disableDateTable(inputContainer, false)\n        inputContainer.haizInputTable.visibility = true\n        inputContainer.haizDurationInputTable.visibility = false\n        for (timeInput in inputContainer.timeInputsGroups.flatten()) {\n            val newValue = convertInputValue(timeInput.value, isDateOnly)\n            val newMin = convertInputValue(timeInput.min, isDateOnly)\n            val newMax = convertInputValue(timeInput.max, isDateOnly)\n\n            val dateInputType = if (isDateOnly) InputType.date else InputType.dateTimeLocal\n            timeInput.type = dateInputType.realValue\n\n            timeInput.value = newValue\n            timeInput.min = newMin\n            timeInput.max = newMax\n        }\n\n        inputContainer.classList.toggle(\"date_only\", isDateOnly)\n        inputContainer.classList.toggle(\"date_and_time\", !isDateOnly)\n        inputContainer.classList.toggle(\"duration\", false)\n\n        if (isDateTime) {\n            setMaxToCurrentTimeForTimeInputs(inputContainer)\n        }\n    } else if (isDuration) {\n        for (timeInput in inputContainer.timeInputsGroups.flatten()) {\n            val newValue = convertInputValue(timeInput.value, isDateOnly)\n            val newMin = convertInputValue(timeInput.min, isDateOnly)\n            val newMax = convertInputValue(timeInput.max, isDateOnly)\n\n            val dateInputType = if (isDateOnly) InputType.date else InputType.dateTimeLocal\n            timeInput.type = dateInputType.realValue\n\n            timeInput.value = newValue\n            timeInput.min = newMin\n            timeInput.max = newMax\n        }\n        inputContainer.classList.toggle(\"date_only\", false)\n        inputContainer.classList.toggle(\"date_and_time\", false)\n        inputContainer.classList.toggle(\"duration\", true)\n\n        disableDateTable(inputContainer, true)\n        inputContainer.haizInputTable.visibility = false\n        inputContainer.haizDurationInputTable.visibility = true\n    }\n}\n\nprivate fun disableDateTable(inputContainer: HTMLElement, disable: Boolean) {\n    for (timeInput in inputContainer.timeInputsGroups) {\n        for (input in timeInput) {\n            input.disabled = disable\n        }\n    }\n    for (durationInput in inputContainer.durationInputsGroups) {\n        for (input in durationInput) {\n            input.asDynamic().disabled = !disable\n        }\n    }\n    disableAadaat(inputContainer, disable)\n}\n\nprivate fun disableAadaat(inputContainer: HTMLElement, disable: Boolean) {\n    inputContainer.getElementsByClassName(\"aadat_inputs\")\n        .asList()\n        .forEach { row ->\n            row.classList.toggle(\"duration-invis\", disable)\n            row.querySelectorAll(\"input\")\n                .asList()\n                .map { input ->\n                    input as HTMLInputElement\n                    input.disabled = disable\n                }\n        }\n}\n\nprivate fun parseEntries(inputContainer: HTMLElement) {\n    var entries= listOf<Entry>()\n\n    with(inputContainer) {\n        var mawjodahtuhreditable = parseDays(mawjoodaTuhr.value)\n        var pregnancyIs = isPregnancy\n        var pregnancyStrt = Date(pregStartTime.valueAsNumber)\n        var pregnancyEnd = Date(pregEndTime.valueAsNumber)\n\n\n        if(isDuration){\n            //take arbitrary date\n            val arbitraryDate= Date(0,0,0)\n            var durations = haizDurationInputDatesRows.map { row ->\n                Duration(\n                    type = if(row.damOrTuhr == \"dam\"){DurationType.DAM}\n                    else if(row.damOrTuhr == \"tuhr\"){DurationType.TUHR}\n                    else if(row.damOrTuhr == \"haml\"){DurationType.HAML}\n                    else if(row.damOrTuhr == \"wiladat\"){DurationType.WILADAT_ISQAT}\n                            else{DurationType.NIFAAS},\n                    timeInMilliseconds = parseDays(row.duration.value)!!,\n                    startTime = arbitraryDate\n                ) }\n            for (index in durations.indices){\n                if(index>0){\n                    durations[index].startTime = durations[index-1].endDate\n                }\n            }\n            if(durations[0].type==DurationType.TUHR){mawjodahtuhreditable=durations[0].timeInMilliseconds}\n            println(durations)\n            for(dur in durations){\n                if(dur.type==DurationType.DAM){\n                    entries+=Entry(dur.startTime, dur.endDate)\n                }else if(dur.type==DurationType.HAML){\n                    pregnancyIs=true\n                    pregnancyStrt=dur.startTime\n                }else if(dur.type==DurationType.WILADAT_ISQAT){\n                    pregnancyEnd=dur.startTime\n                }\n            }\n        }else{\n            entries = haizInputDatesRows.map { row ->\n                Entry(\n                    startTime = Date(row.startTimeInput.valueAsNumber),\n                    endTime = Date(row.endTimeInput.valueAsNumber)\n                )\n            }\n\n        }\n        println(entries)\n        @Suppress(\"UnsafeCastFromDynamic\")\n        val output = handleEntries(\n            entries,\n            parseDays(aadatHaz.value),\n            parseDays(aadatTuhr.value),\n            mawjodahtuhreditable,\n            isMawjoodaFasid,\n            isDateOnly,\n            pregnancyIs,\n            Pregnancy(\n                pregnancyStrt,\n                pregnancyEnd,\n                parseDays(aadatNifas.value),\n                mustabeen\n            ),\n            false,\n            languageSelecterValue,\n            isDuration\n        )\n        contentContainer.visibility = true\n//        if (languageSelecterValue == \"english\") {\n            contentEnglish.innerHTML = output.englishText\n//            contentElement.classList.toggle(\"rtl\", false)\n//        } else {\n            contentUrdu.innerHTML = output.urduText\n//            contentElement.classList.toggle(\"rtl\", true)\n//        }\n//        contentDatesElement.innerHTML = output.haizDatesText\n        haizDatesList = output.hazDatesList\n    }\n    addCompareButtonIfNeeded()\n}\n\nprivate fun compareResults() {\n    val listOfLists = inputsContainers.map { it.haizDatesList!! }\n    val str = getDifferenceFromMultiple(listOfLists)\n    contentDatesDifferenceElement!!.innerHTML = str\n    val output = generatInfoForCompareTable(listOfLists.toMutableList())\n    drawCompareTable(output.headerList,output.listOfColorsOfDaysList, output.resultColors)\n}\n\nfun drawCompareTable(headerList:List<Date>, listOfColorsOfDaysList: List<List<Int>>, resultColors: List<Int>){\n    val datesDifferenceTableElement = datesDifferenceTableElement!!\n    datesDifferenceTableElement.style.width = \"${headerList.size*30 +15}px\"\n    datesDifferenceTableElement.replaceChildren {\n        div { id = \"tHead\"\n            style = Styles.TABLE_HEAD_STYLE\n            div { id = \"monthRow\"\n                style =Styles.TABLE_ROW_STYLE\n                for (header in headerList) {\n                    val date = header.getDate()\n                    div { id = \"cello\"\n                        style = Styles.TABLE_CELL_STYLE\n                        if (date == 1) {\n                            +MonthNames[header.getMonth()]\n                        }\n                    }\n                }\n            }\n            div{\n                style = Styles.NEW_ROW\n            }\n            div { id = \"datesRow\"\n                style = Styles.TABLE_ROW_STYLE\n                for (i in headerList.indices) {\n                    val header = headerList[i]\n                    val date = header.getDate().toString()\n\n                    div { id = \"cello\"\n                        style =Styles.TABLE_CELL_STYLE\n                        +date\n                    }\n                }\n            }\n        }\n        div{\n            style = Styles.NEW_ROW\n        }\n        div { id = \"tBody\"\n            style = Styles.TABLE_BODY_STYLE\n            div{\n                style = Styles.NEW_ROW\n            }\n            div { id = \"emptyRow\"\n                style=Styles.TABLE_ROW_STYLE\n                div{\n                    id = \"emptyHalfCellTopRow\"\n                    style = Styles.EMPTY_HALF_CELL_STYLE\n                }\n                for (day in resultColors){\n                    div{\n                        id = \"emptyCellTopRow\"\n                        style = Styles.EMPTY_CELL_STYLE\n\n                        if (day == 2) {\n                            style += Styles.NA_PAKI\n                        } else if(day == 1){\n                            style += Styles.AYYAAM_E_SHAKK\n                        }\n                    }\n                }\n            }\n\n            for (j in listOfColorsOfDaysList.indices) {\n                val colorsOfDaysList = listOfColorsOfDaysList[j]\n                div{\n                    style = Styles.NEW_ROW\n                }\n                div { id = \"sit${j+1}\"\n                    Styles.TABLE_ROW_STYLE\n                    div { id=\"half_cell\"\n                        style = Styles.HALF_CELL\n                    }\n\n                    for (k in colorsOfDaysList.indices) {\n                        val cellValue = colorsOfDaysList[k]\n                        div { id = \"cello\"\n                            style = Styles.TABLE_CELL_BORDER_STYLE +\n                                    (if (cellValue == 1) Styles.NA_PAKI else \"\")\n                            +\"${k+1}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n",null,null,null,null,"\nval urduStrings = Strings(\n    \"${UnicodeChars.ROSE}<b>جواب ::</b>\\n\\n\",\n    \"اس ترتیب سے خون آیا اور پاکی ملی:\\n\\n\",\n    \"مبتداہ کو اس ترتیب سے خون آیا اور پاکی ملی:\\n\\n\",\n    \"جب بھی خون یا دھبے آئیں تو وقت تاریخ مہینہ نوٹ فرمالیجئے۔\\n\\n\",\n    \"<b>واللہ تعالی اعلم بالصواب</b>\\n\\n\",\n    \"فی الحال آپ کے پاکی کے دن ہیں اپنی عبادات جاری رکھیں۔\\n\\n\",\n    \"فی الحال آپ کے حیض کے دن ہیں۔ خون جاری رہنے کی صورت میں نمازیں نہ پڑھیں۔\\n\\n\",\n    \"اگر خون اسی طرح جاری رہے یا فی الحال بند ہوجائے لیکن پندرہ دن کی کامل پاکی نہیں ملی کہ دوبارہ خون یا دھبہ آگیا تب پھر<b> date1 کو ضرور دوبارہ پوچھ لیں، اس لیے کہ مسئلہ کی صورت بدل جائے گی۔</b>\\n\\n\",\n    \"اگر خون اسی طرح جاری رہے تب پھر<b> date1 تک آپ کے حیض کے دن ہونگے۔</b>\\n\\n\",\n    \"حمل سے پہلے اس ترتیب سے خون آیا اور پاکی ملی:\\n\\n\",\n    \"\\n<b>حمل</b>\\n\",\n    \"\\n<b>ولادت date1</b>\\n\",\n    \"\\n<b>ولادت کے بعد اس ترتیب سے خون آیااور پاکی ملی:</b>\\n\",\n    \"\\n<b>date1 کو اسقاط ہوا (غیر مستبین الخلقہ)</b>\\n\",\n    \"اگر خون date1 سے پہلے بند ہو جاۓ تو غسل کر کے نمازیں شروع کر لیں، لیکن احتیاطا date1 کو بھی غسل کر لیجیے۔\\n\\n\",\n    \"اگر سائلہ شادی شدہ ہیں تو یہ مسئلہ بھی مدنظر رکھیں: \\n \\n\\nاگر خون رک بھي جاۓ اور غسل کر کے نمازيں بھي شروع کر لي ہوں، تب بھي date1 سے پہلے صحبت کي اجازت نہيں۔\\n\\n\",\n    \"اگر خون اسی طرح جاری رہے یا فی الحال بند ہوجائے لیکن پندرہ دن کی کامل پاکی نہیں ملی کہ دوبارہ خون یا دھبہ آگیا تب پھر<b> date1 تک آپ کے یقینی پاکی کے دن ہونگے۔</b>\\n\\n\",\n    \"${UnicodeChars.GREEN_CIRCLE} <b>عادت:: حیض: duration1، طہر: duration2</b>\\n\\n\",\n    \"date1 تا date2 کل duration1 حیض کے ہیں۔\\n\\n\",\n    \"${UnicodeChars.RED_CIRCLE} date1 تا date2 کل duration1 حیض کے ہیں۔\\n\\n\",\n    \"${UnicodeChars.YELLOW_CIRCLE} date1 تا date2 کل duration1 یقینی پاکی (استحاضہ) کے ہیں۔\\n\\n\",\n    \"date1 تا date2 کل duration1 نفاس کے ہیں۔\\n\\n\",\n    \"${UnicodeChars.RED_CIRCLE} date1 تا date2 کل duration1 نفاس کے ہیں۔\\n\\n\",\n    \"\\n\\ndate1 سے date2 تک کل duration1 خون۔\\n\\n\",\n    \"${UnicodeChars.RAINBOW} <b>مسئلہ کا حل ::</b>\\n\\n\",\n    \"${UnicodeChars.BLACK_SQUARE} اس دوران میں جو نمازیں حیض سمجھ کر چھوڑیں،  ان کی قضاء ضروری ہے۔\\n\\n\",\n    \"${UnicodeChars.BLACK_SQUARE} date1 کو اگر غسل کر لیا تھا، تو غسل کے بعد والی نمازیں درست ہیں۔ اگر غسل نہیں کیا تھا، تو جب تک غسل نہیں کیا، اس کی نمازیں قضاء کریں۔\\n\\n\",\n    \"\\n\\ndate1 سے date2 تک کل duration1 خون جاری رھا (چونکہ آپ کو دو خون کے درمیان میں 15 دن کی کامل پاکی نہیں ملی ہے اسلیئے یوں سمجھا جائے گا کہ آپ کو مسلسل خون جاری ہی رہا ہے۔)\\n\\n\",\n    \"duration1 پاکی۔\\n\\n\",\n    \"duration1 طہر فاسد۔\\n\\n\",\n    \"duration1 استحاضہ + duration2 پاکی = duration3 طہر فاسد۔\\n\\n\",\n    \"duration1 طہر (چونکہ طہر 6 ماہ سے زیادہ ہے، اس لیے عادت میں 60 دن لیا جاۓ گا۔)\\n\\n\",\n    \"${UnicodeChars.FAT_DASH}${UnicodeChars.FAT_DASH}${UnicodeChars.FAT_DASH}${UnicodeChars.FAT_DASH}\\n\\n\",\n    \"اب سے  یہ معتادہ ہیں۔\\n\\n\",\n    \"ابھی حیض اور طہر کی کویٔ عادت نہیں۔\\n\\n\",\n    \"حیض کی عادت duration1 ہے، البتہ ابھی پاکی کی کویٔ عادت نہیں۔\\n\\n\",\n    \"زبان منتخب کریں:\",\n    \"صرف تاریخ کے ساتھ مسئلہ حل کیجیے\",\n    \"تاریخ اور وقت کے ساتھ مسئلہ حل کیجیے\",\n    \"اردو\",\n    \"English\",\n    \"حیض کی عادت صحیح\",\n    \"طہر کی عادت صحیح\",\n    \"موجودہ طہر\",\n    \"اگر موجودہ طہر فاسد ہے تو اس خانے میں ٹک لگائیے\",\n    \"عادت  نفاس\",\n    \"ابتداء حمل کی تاریخ(یعنی آخری حیض کب ختم ہوا؟)\",\n    \"اسقاط/ وضع حمل(ولادت) کاوقت/تاریخ\",\n    \"ابتدائے خون\",\n    \"انتہائے خون\",\n    \"حساب لگائیں\",\n    \"عادت درست نہیں، عادت صحیح لکھیے!\",\n    \"اگر نفاس کا مسئلہ ہے تو ادھر کلک کیجیے!\",\n    \"مستبين الخلقہ: \",\n    \"مسئلہ حل کرنے کے لیے حیض و طہر کی \\\"عادت صحیح\\\" لکھیے\",\n    \"موجودہ طہر(حل کیے جانے والےدم سے قبل متصل طہر) کا دورانیہ(duration) لکھیے۔\",\n    \"نفاس کی عادت لکھیے! اگر پہلا بچہ ہے تو 40 کا عدد لکھیے!\",\n    \"Please enter password here. To request the password, please contact safarjal22@gmail.com\",\n    \"انتباہ: یہ ایپ صرف مسائل حیض میں ماہر علمائے کرام و عالمات کے استعمال کے لیے ہے، جو مسئلہ کے حل کے لیے درکار معلومات کی باریکیوں کو سمجھتے ہوں!\",\n    \"کس طرح حل کرنا ہے؟\",\n    \"صرف دورانیہ\",\n    \"دم و طہر\",\n    \"دم\",\n    \"طہر\",\n    \"duration1 دم\\n\\n\",\n    \"duration1 طہر\\n\\n\",\n    \"duration1 طہر فاسد\\n\\n\",\n    \"duration1 استحاضہ + duration2 پاکی = duration3 طہر فاسد\\n\\n\",\n    \"duration1 حیض\\n\\n\",\n    \"duration1 نفاس\\n\\n\",\n    \"شروع کے duration1 استحاضہ\",\n    \"شروع کے duration1 حیض\",\n    \"، پھر duration1 استحاضہ\",\n    \"، پھر duration1 حیض\",\n    \"۔\\n\\n\",\n    \"ولادت\\n\\n\",\n    \"حمل\\n\\n\",\n    \"شروع کے duration1 نفاس\"\n\n)\nval englishStrings = Strings(\n    \"${UnicodeChars.ROSE}<b>Answer::</b>\\n\\n\",\n    \"The bleeding and tuh’r has been in the following sequence:\\n\\n\",\n    \"\\\"The bleeding and tuh’r has been in the following sequence for the menstruation beginner:\\\\n\\\\n\\\"\",\n    \"Kindly keep noting down your bleeding/spotting with time, date and month.\\n\\n\",\n    \"<b>And Allah Ta’ala knows the best.</b>\\n\\n\",\n    \"You are in the days of your tuh’r right now, so keep up your ritual worship as usual.\\n\\n\",\n    \"You are in the days of your period right now, so, if bleeding continues you cannot do any of your ritual worship.\\n\\n\",\n    \"In case this bleeding continues without gap, or, it continues with gaps less than 15 days at a stretch, then <b>kindly do contact us again on date1 as the current ruling may change accordingly.</b>\\n\\n\",\n    \"If the bleeding continues, then <b>till date1 will be the days of your period.</b>\\n\\n\",\n    \"The bleeding and tuh’r has been in the following sequence before pregnancy:\\n\\n\",\n    \"\\n<b>Pregnancy</b>\\n\",\n    \"\\n<b>Date of delivery: date1</b>\\n\",\n    \"\\n<b>The bleeding and tuh’r has been in the following sequence after delivery:</b>\\n\",\n    \"\\n<b>Miscarriage of an undeveloped fetus confirmed on date1</b>\\n\",\n    \"If the bleeding stops before date1 then take ghusl immediately and start saying your prayers but take ghusl on date1 too to be on the safe side.\\n\\n\\n\",\n    \"If the questioner is married, then she should keep this in mind as well: \\n \\n\\nEven if the bleeding stops and you perform your ghusl and resume namaz, intimacy with husband remains prohibited till date1.\\n\\n\",\n    \"In case this bleeding continues without gap, or, it continues with gaps less than 15 days at a stretch, then <b>till date1 are the days of your definitive purity.</b>\\n\\n\",\n    \"${UnicodeChars.GREEN_CIRCLE} Habit:: period : duration1, Tuh’r: duration2 \\n\\n\",\n    \"date1 to date2, a total of duration1 of period.\\n\\n\",\n    \"${UnicodeChars.RED_CIRCLE} date1 to date2, a total of duration1 of period.\\n\\n\",\n    \"${UnicodeChars.YELLOW_CIRCLE} date1 to date2, a total of duration1 of definitive purity (istihaadha).\\n\\n\",\n    \"date1 to date2, a total of duration1 of post-natal bleeding.\\n\\n\",\n    \"${UnicodeChars.RED_CIRCLE} date1 to date2, a total of duration1 of post-natal bleeding.\\n\\n\",\n    \"\\n\\ndate1 to date2, a total of duration1 of blood.\\n\\n\",\n    \"${UnicodeChars.RAINBOW} <b>Solution::</b>\\n\\n\",\n    \"${UnicodeChars.BLACK_SQUARE} All salahs left in these days due to blood are to be made qaza of.\\n\\n\",\n    \"${UnicodeChars.BLACK_SQUARE} If you performed your ghusl on date1 then the salahs after that were valid, if not, then the salahs before your next ghusl have to be made qaza of.\\n\\n\",\n    \"\\n\\nduration1 of continued bleeding from date1 to date2 (since you haven’t had 15 or more blood-free days at a stretch in there)\\n\\n\",\n    \"duration1 of Tuh’r\\n\\n\",\n    \"duration1 of Tuh’r Faasid\\n\\n\",\n    \"duration1 of istihaadha + duration2 of tuh’r = duration3 of Tuh’r Faasid.\\n\\n\",\n    \"duration1 of Tuhr. (Since tuh’r is of more than 6 months, therefore 60 days shall be taken as habit of Tuh’r)\\n\\n\",\n    \"${UnicodeChars.FAT_DASH}${UnicodeChars.FAT_DASH}${UnicodeChars.FAT_DASH}${UnicodeChars.FAT_DASH}\\n\\n\",\n    \"From now on, she is a Mutadah\\n\\n\",\n    \"Till now, there is no habit of Haidh or Tuhr\",\n    \"duration 1 is the habit of Haidh. There is no habit of Tuhr yet.\",\n    \"Select Language\",\n    \"Date only\",\n    \"Date and Time\",\n    \"اردو\",\n    \"English\",\n    \"Haiz Aadat\",\n    \"Tuhr Aadat\",\n    \"Mawjooda Tuhr\",\n    \"Fasid\",\n    \"Nifas Aadat\",\n    \"Pregnancy Start Time\",\n    \"Birth/Miscarriage Time\",\n    \"Start Time\",\n    \"End Time\",\n    \"Calculate\",\n    \"Aadat is incorrect\",\n    \"Nifas\",\n    \"Mustabeen ul Khilqat\",\n    \"Please enter aadaat of Haiz and Tuhr to solve this\",\n    \"Please enter a duration for Mawjooda Tuhr\",\n    \"Please enter Nifaas Aadat to solve this. If this is a first baby, please enter 40.\",\n    \"Please enter password here. To request the password, please contact safarjal22@gmail.com\",\n    \"Attention!! This app is only for use by Ulema and Aalimaat who are Experts in solving the Masail of Haidh and Nifaas, and understand the minutae of the information required to solve this.\",\n    \"Type of input: \",\n    \"Duration\",\n    \"Dam/Tuhr\",\n    \"Dam\",\n    \"Tuhr\",\n    \"duration1 dam\\n\\n\",\n    \"duration1 tuhr\\n\\n\",\n    \"duraion1 tuhr-e-faasid\\n\\n\",\n    \"duration1 istehaza + duration2 tuhr = duration3 tuhr-e-faasid\\n\\n\",\n    \"duration1 haiz\\n\\n\",\n    \"duration1 nifas\\n\\n\",\n    \"The first duration1 are istehaza\",\n    \"The first duration1 are haiz\",\n    \", then the next duration1 are istehaza\",\n    \", then the next duration1 are haiz\",\n    \".\\n\\n\",\n    \"birth\\n\\n\",\n    \"pregnancy\\n\\n\",\n    \"The first duration1 are nifas\"\n\n\n)\n\nobject StringsOfLanguages{\n    val URDU: Strings = urduStrings\n    val ENGLISH: Strings = englishStrings\n}\n\n",null,null,null,null,null,null,null,null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(701);\n"],"names":["root","factory","exports","module","define","amd","this","Date","firstStartTime","entries","listOf","getTime","isDam","Duration","toMutableList","i","fixedDurations","addIndicesToFixedDurations","OutputTexts","EndingOutputValues","adatsOfHaizList","adatsOfTuhrList","isPregnancy","addStartDateToFixedDurations","pregnancy","endDateOfFixedDuration","markAllTuhrsInPregnancyAsHaml","startDateOfHaml","endDateOfHaml","newDuration","timeInHaml","addTimeToDate","newFixedDuration","firstDuration","secondDuration","secondFixedDuration","thirdDuration","thirdFixedDuration","markAllDamsInPregnancyAsHaml","removeTuhrLessThan15","birthDate","startTime","fortyPlusBD","makeAllDamInFortyAfterWiladatAsMuttasil","language","window","alert","BiggerThanFortyNifas","istihazaAfter","nifasInfo","dealWithDamInMuddateNifas","removeDamLessThan3","dealWithBiggerThan10Dam","inputtedAadatHaz","inputtedAadatTuhr","inputtedMawjoodaTuhr","isMawjoodaFasid","addDurationsToDams","addWiladat","addStartOfPregnancy","generateOutputStringPregnancy","isDateOnly","calculateEndingOutputValues","isDuration","noOutput","removeTuhrLessThan15InPregnancy","first","mawjoodahPakiEndDate","pregStartTime","pregEndTime","mawjoodahPakiStartDate","checkIfMawjoodahPakiIsTuhrInHaml","mawjoodahIsNotAadat","isMubtadia","aadatHaz","aadatTuhr","iztirariAadatHaiz","iztirariAadatTuhr","AadatsOfHaizAndTuhr","haiz","istehazaAfter","istehazaBefore","mawjoodahTuhr","BiggerThanTenDm","biggerThanTen","dealWithIstihazaAfter","remainder","dealWithMubtadiaDam","fixedDuration","markAllMubtadiaDamsAndTuhrsAsMubtadia","aadats","englishStr","getHaizDatesList","generateUrduOutputString","endingOutputValues","generateEnglishOutputString","urduStr","generateHazDatesStr","hazDatesList","generateOutputStringMubtadia","durations","println","generateOutputStringMutadah","date","mawjoodaTuhr","aadatNifas","fiveSoortain","mp","gp","dm","hz","hall","returnAadatHaiz","soorat","istihazaBefore","aadatTuhrChanges","FiveSoortainOutput","ayyameQabliyyah","istihazaBeforeStartDate","aadatTuhrEndDate","aadatHaizEndDate","aadatTuhrStartDate","istihazaAfterStartDate","quotient","j","last","duration","listOfLists","counter","numberOfLists","dateTypeList","dateType","counterMax","str","outputList","durationTypes","durationType","type","parseDate","endTime","generateGetDifferenceString","filHaalPaki","lastDurationType","lastDurationTime","qism","ayyameQabliyya","calculateFilHaal","lastDurationOfBiggerThanTen","lastDurationBiggerThanForty","aadatHaiz","finalAadats","FutureDateType","futureDatesOfInterest","aadaat","futureDates","mustabeen","index","outputStringUrduHeaderLineDuration","outputStringUrduBiggerThan10HallDurations","outputStringUrduBiggerThan40HallDuration","outputStringUrduHeaderLine","outputStringUrduBiggerThan10Hall","outputStringUrduBiggerThan40Hall","urduDateFormat","birthTime","outputStringUrduFinalLines","generateUrduOutputStringPregnancy","outputStringEnglishHeaderLineDuration","outputStringEnglishBiggerThan10HallDurations","outputStringEnglishBiggerThan40HallDuration","outputStringEnglishHeaderLine","outputStringEnglishBiggerThan10Hall","outputStringEnglishBiggerThan40Hall","outputStringEnglishFinalLines","generateEnglishOutputStringPregnancy","entry","strUrdu","daysHoursMinutesDigital","daysHoursMinutesDigitalUrdu","outputStringUrduAadatLine","filHaalPakiStr","filHaalHaizStr","futureDateType","futureDatesType","futureDate","outputStringUrduAskAgainLine","strEnglish","outputString","difference","sd","et","time","outputStringEnglishAadatLine","outputStringEnglishAskAgainLine","ed","block","onFinalize","createTree","ownerDocument","insertRelative","insert","querySelector","id","classList","toggle","visible","parentElement","asList","children","dateTimeLocalInputWithFallbackGuidelines","classes","toDuration","getTimezoneOffset","letterToTrimFrom","toDateInputString","dateString","offsetLocalTimeToUtc","parseToLocalDate","value","timeInMilliseconds","input","days","toInt","sections","getOrNull","hours","minutes","seconds","toLong","milisecsleft","strHours","strMinutes","strDays","returnStatement","toString","dropLast","toUTCString","dateStr","ampm","minutesStr","date2","date1","getUTCDate","urduMonth","getUTCMonth","day","urduDay","getUTCHours","getUTCMinutes","document","getElementById","getChildById","checked","haizDatesList","undefined","rows","prompt","askPassword","append","inputsContainer","remove","after","inputsContainerAddRemoveButton","div","para","textContent","navigator","clipboard","writeText","small","innerHTML","setTimeout","inputContainerToCopyFrom","pregnancyCheckBox","validityRange","parseDays","errormessage","message","setCustomValidity","isDateOnlyLayout","minTimeInput","maxTimeInput","timeInputToCopyFrom","setMaxToCurrentTimeForTimeInputs","inputContainer","setupFirstRow","inputDatesRows","asReversed","timeInputs","min","max","previousTimeInputs","take","nextTimeInputs","drop","previousTimeInput","nextTimeInput","findInputContainer","event","findRow","indexWithinRow","isDateTime","disableDateTable","flatten","convertInputValue","dateInputType","newValue","newMin","newMax","disabled","disable","disableAadaat","valueAsNumber","addCompareButtonIfNeeded","getDifferenceFromMultiple","earliestStartTime","latestEndTime","list","ndays","firstLast","headerList","header","listOfColorsOfDaysList","InfoForCompareTable","resultColors","generatInfoForCompareTable","style","datesDifferenceTableElement","replaceChildren","apply","nodes","urduStrings","englishStrings","partial","child","node","getElementsByClassName","body","contains","addInputLayout","setupRows","setupFirstDurationRow","addEventListener","compareResults","removeInputsContainerButton","setOf","inputForm","content","removeInputsContainer","copyText","typeConfigurationSelectDropdown","aadatInputs","mustabeenCheckBox","pregnancyStartTimeInput","pregnancyEndTimeInput","parseEntries","haizDatesInputTable","haizDurationInputTable","calculateButton","onClickTypeConfigurationSelectDropdown","currentTarget","validateAadat","pregnancyTimeInput","addBeforeButton","inputRow","durationAddBeforeButton","timeInput","addRemoveButtonsTableData","target","addRemoveButtonsDurationData","addButton","removeButton","durationAddButton","durationRemoveButton","setMinMaxForTimeInputsOnInput","rowIndex","startDateIndex","endDateIndex","updateMinMaxForTimeInputsBeforeRemovingRow","durationInputRow","prepend","firstChild","MonthNames","getMonth","getDate","Strings","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}