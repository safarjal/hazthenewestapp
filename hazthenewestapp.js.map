{"version":3,"file":"hazthenewestapp.js","mappings":"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A,8BACA,sBACA,mBACA,sBACA,uBACA,wBACA,uBACA,iBACA,oBACA,aACA,gBACA,kBACA,kBACA,sBACA,eACA,mBACA,2BACA,8BACA,kBACA,gBACA,kBACA,uBACA,cACA,0BACA,yBACA,gCACA,8BACA,0BACA,wCACA,qBACA,kBACA,mBACA,aACA,cACA,qBACA,sBACA,4BACA,wCACA,sBACA,uBACA,8BACA,0BACA,iCACA,6BACA,4BACA,uBACA,sBACA,2BACA,kCACA,8CACA,wBACA,sBACA,oDACA,yBACA,4CACA,sDACA,qCACA,4BACA,kBACA,gBACA,qBACA,wBACA,wBACA,wBACA,kCACA,gCACA,2B,2BASA,gBACA,uBACA,sBACA,kBACA,sBACA,iBACA,qB,+DAKC,aAC6B,MAD7B,aAE6B,MAF7B,aAGiC,MAHjC,cAI6B,GAJ7B,mB,iEACD,0BACA,0BACA,8BACA,wB,qBAKA,gCACA,yBACA,+BACA,0B,qTAkBA,oBACA,kB,gjBAkBJ,aAGsB,MAHtB,iB,6DACI,aACA,oBACA,c,mBAGA,oBACA,eACA,uB,yBAGA,oBACA,iBACA,sBACA,qBACA,2BACA,uB,mBAKA,mBACA,+BACA,qB,mEAIC,qF,qEACD,sBACA,kBACA,mBACA,2BACA,sB,g0BA8BA,eACA,a,2QAKA,oBACA,kBACA,e,2LAQA,eACA,2BACA,oB,qFAOC,WpFpK8D,EAAX,K,KoFoKnD,EAG+B,GAH/B,wCAKoC,MALpC,cAMqC,MANrC,cAO4C,MAP5C,eAQqB,IAAAC,KAAK,EAAE,EAAE,IAR9B,2B,iFACD,eACA,6BACA,gBACA,sBACA,uBACA,sBACA,wBACA,kB,mBAOA,yBACA,kBACA,kB,mCAIA,WACA,WACA,WACA,WACA,aACA,uBACA,aACA,wBACA,oBACA,oBACA,sB,yBAIA,gBACA,wBACA,eACA,oBACA,oBACA,wB,iBAIA,oBACA,oB,iBASA,cACA,gB,iBAIA,mBACA,sB,27CC3SK,oB,Y5BPL,MAAM,GAAsC,qBAAmB,EAAI,6B4BO9D,mB,eAGLC,GAAqC,GAApBC,EAAa,UAAb,cAA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AAM,O,GAEhC,O,GjHJqB,OAAO,MAAO,MAAO,MAAO,MAAO,MAE3F,MAAO,MAAO,MAAO,MACrB,MAAO,O,GAAoC,SAAS,QAAS,OAAQ,QAE3E,MACG,MAAO,QAAS,OAAQ,QAAS,SAAU,QAAS,S,GmGoHWjO,GAAxCgD,SAASM,uBAAwB,S,oEOvIzC,IAAA8K,G,6BAEb,wCACA,kDACA,gEACA,sCACA,4DACA,8EACA,uMACA,kGACA,oDACA,iBACA,yBACA,2DACA,oDACA,iHACA,uKACA,0K,oEAEA,8C,uIAGA,+C,+DAEA,8C,8QAIA,oLACA,sBACA,0BACA,+DACA,uF,uCAEA,4BACA,2CACA,mEACA,mBACA,mCACA,uCACA,OACA,UACA,mBACA,mBACA,aACA,kDACA,aACA,iDACA,oCACA,cACA,cACA,cACA,mCACA,OACA,kBACA,sDACA,8EACA,0DACA,2FACA,kJACA,qBACA,qCACA,WACA,KACA,MACA,mBACA,oBACA,yBACA,8DACA,oBACA,qBACA,4BACA,wBACA,0BACA,sBACA,QACA,YACA,UACA,yBACA,gHACA,0IACA,0IACA,0IACA,yEACA,gBACA,wDACD,6NAEA,8MAEC,wEACA,SACA,SACA,iBACA,8GACA,8FA/Fa,oFAiGb,2CACA,0CACA,gE,oEAIgB,IAAAA,G,8BAEhB,0EACD,4GAEC,4EACA,0CACD,qGAEA,wHAEA,4MAGC,kGACA,2FACA,gBACA,qCACA,gGACA,oEACD,yJAEA,gNAGA,2I,4EAGC,sD,sEAED,uFAEC,mE,mFAEA,yD,uCAED,uHAEA,kJAEA,uIAEC,kCACA,mDACD,2GAEA,8I,uCAGC,oCACA,6DACA,gFACA,kBACA,YACA,gBACA,OACA,UACA,iBACA,0BACA,yBACA,iCACA,iBACA,uBACA,yBACA,aACA,WACA,YACA,qBACA,QACA,uBACA,+DACA,6CACA,oFACA,2FACD,6LAGC,kBACA,WACA,aACA,MACA,SACA,oBACA,+BACA,gDACA,0GACA,sBACA,sBACA,oCACA,gCACA,0CACA,sCACA,QACA,YACA,gBACA,gCACD,6IAEA,gGAEA,+IAEA,+IAEA,mGAEC,yBACA,4DACD,oRAIA,8PAIC,8FACA,WACA,UACA,gBACD,yHAEA,oHA1HiB,+FA6HhB,iDACA,qDACA,sDPXD5Z,OAAA,Q,GAAgB,O,wFe3NhB6Z,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBlL,IAAjBmL,EACH,OAAOA,EAAazc,QAGrB,IAAIC,EAASqc,EAAyBE,GAAY,CAGjDxc,QAAS,IAOV,OAHA0c,EAAoBF,GAAUG,KAAK1c,EAAOD,QAASC,EAAQA,EAAOD,QAASuc,GAGpEtc,EAAOD,QClBWuc,CAAoB,K,MDF1CD","sources":["webpack://hazthenewestapp/webpack/universalModuleDefinition","webpack://hazthenewestapp/../../../../../_Arrays.kt","webpack://hazthenewestapp/../../../../../_Collections.kt","webpack://hazthenewestapp/../../../../../Sets.kt","webpack://hazthenewestapp/../../../../../collections.kt","webpack://hazthenewestapp/../../../../../Standard.kt","webpack://hazthenewestapp/../../../../../_ArraysJs.kt","webpack://hazthenewestapp/../../../../../ArraySorting.kt","webpack://hazthenewestapp/../../../../../dynamic.kt","webpack://hazthenewestapp/../../../../../Preconditions.kt","webpack://hazthenewestapp/../../../../../Iterators.kt","webpack://hazthenewestapp/../../../../../_Ranges.kt","webpack://hazthenewestapp/../../../../../_Sequences.kt","webpack://hazthenewestapp/../../../../../Sequences.kt","webpack://hazthenewestapp/../../../../../_Strings.kt","webpack://hazthenewestapp/../../../../../string.kt","webpack://hazthenewestapp/../../../../../AbstractList.kt","webpack://hazthenewestapp/../../../../../AbstractMap.kt","webpack://hazthenewestapp/../../../../../Collections.kt","webpack://hazthenewestapp/../../../../../Iterables.kt","webpack://hazthenewestapp/../../../../../Maps.kt","webpack://hazthenewestapp/../../../../../MutableCollections.kt","webpack://hazthenewestapp/../../../../../ReversedViews.kt","webpack://hazthenewestapp/../../../../../HashSet.kt","webpack://hazthenewestapp/../../../../../Comparisons.kt","webpack://hazthenewestapp/../../../../../Ranges.kt","webpack://hazthenewestapp/../../../../../Appendable.kt","webpack://hazthenewestapp/../../../../../Char.kt","webpack://hazthenewestapp/../../../../../char.kt","webpack://hazthenewestapp/../../../../../StringNumberConversions.kt","webpack://hazthenewestapp/../../../../../long.kt","webpack://hazthenewestapp/../../../../../Strings.kt","webpack://hazthenewestapp/../../../../../stringsCode.kt","webpack://hazthenewestapp/../../../../../Library.kt","webpack://hazthenewestapp/../../../../../Duration.kt","webpack://hazthenewestapp/../../../../../Tuples.kt","webpack://hazthenewestapp/../../../../../ProgressionIterators.kt","webpack://hazthenewestapp/../../../../../Progressions.kt","webpack://hazthenewestapp/../../../../../progressionUtil.kt","webpack://hazthenewestapp/../../../../../primitiveCompanionObjects.kt","webpack://hazthenewestapp/../../../../../kotlinHacks.kt","webpack://hazthenewestapp/../../../../../AbstractMutableCollection.kt","webpack://hazthenewestapp/../../../../../AbstractMutableList.kt","webpack://hazthenewestapp/../../../../../AbstractMutableMap.kt","webpack://hazthenewestapp/../../../../../AbstractMutableSet.kt","webpack://hazthenewestapp/../../../../../ArrayList.kt","webpack://hazthenewestapp/../../../../../HashMap.kt","webpack://hazthenewestapp/../../../../../InternalHashCodeMap.kt","webpack://hazthenewestapp/../../../../../LinkedHashMap.kt","webpack://hazthenewestapp/../../../../../LinkedHashSet.kt","webpack://hazthenewestapp/../../../../../console.kt","webpack://hazthenewestapp/../../../../../ItemArrayLike.kt","webpack://hazthenewestapp/../../../../../JsClass.kt","webpack://hazthenewestapp/../../../../../KClassImpl.kt","webpack://hazthenewestapp/../../../../../primitives.kt","webpack://hazthenewestapp/../../../../../reflection.kt","webpack://hazthenewestapp/../../../../../StringBuilderJs.kt","webpack://hazthenewestapp/../../../../../_WhitespaceChars.kt","webpack://hazthenewestapp/../../../../../CharCode.kt","webpack://hazthenewestapp/../../../../../numberConversions.kt","webpack://hazthenewestapp/../../../../../_DigitChars.kt","webpack://hazthenewestapp/../../../../../regex.kt","webpack://hazthenewestapp/../../../../../DurationUnit.kt","webpack://hazthenewestapp/../../../../../UShort.kt","webpack://hazthenewestapp/../../../../../Enum.kt","webpack://hazthenewestapp/../../../../../arrays.kt","webpack://hazthenewestapp/../../../../../noPackageHacks.kt","webpack://hazthenewestapp/../../../../../bitUtils.kt","webpack://hazthenewestapp/../../../../../charSequence.kt","webpack://hazthenewestapp/../../../../../numberConversion.kt","webpack://hazthenewestapp/../../../../../<js-code>","webpack://hazthenewestapp/../../../../../collectionsHacks.kt","webpack://hazthenewestapp/../../../../../compareTo.kt","webpack://hazthenewestapp/../../../../../coreRuntime.kt","webpack://hazthenewestapp/../../../../../typeCheckUtils.kt","webpack://hazthenewestapp/../../../../../hacks.kt","webpack://hazthenewestapp/../../../../../longjs.kt","webpack://hazthenewestapp/../../../../../numbers.kt","webpack://hazthenewestapp/../../../../../misc.kt","webpack://hazthenewestapp/../../../../../rangeTo.kt","webpack://hazthenewestapp/../../../../../exceptions.kt","webpack://hazthenewestapp/../../../../../jsOperators.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/api.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/attributes.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/delegating-map.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/finalize-consumer.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-attr-traits.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-enums.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-b.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-d.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-f.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-h.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-i.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-l.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-o.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-p.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-s.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tags-t.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/htmltag.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/jsMain/kotlin/dom-js.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/jsMain/kotlin/generated/gen-event-attrs-js.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/jsMain/kotlin/visit-js.kt","webpack://hazthenewestapp/../../../../src/main/kotlin/DataTypes.kt","webpack://hazthenewestapp/../../../../src/main/kotlin/Logic.kt","webpack://hazthenewestapp/../../../../src/main/kotlin/OutputTexts.kt","webpack://hazthenewestapp/../../../../src/main/kotlin/Utilities.kt","webpack://hazthenewestapp/../../../../../math.kt","webpack://hazthenewestapp/../../../../src/main/kotlin/client.kt","webpack://hazthenewestapp/../../../../../org.w3c.dom.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/jsMain/kotlin/generated/gen-consumer-tags-js.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tag-groups.kt","webpack://hazthenewestapp/../../../../../RegexExtensions.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-tag-unions.kt","webpack://hazthenewestapp/../../../../src/main/kotlin/other-calcs.kt","webpack://hazthenewestapp/../../../../src/main/kotlin/strings.kt","webpack://hazthenewestapp/../../../../../AbstractCollection.kt","webpack://hazthenewestapp/../../../../../AbstractSet.kt","webpack://hazthenewestapp/../../../../../Unit.kt","webpack://hazthenewestapp/../../../../../EqualityComparator.kt","webpack://hazthenewestapp/../../../../../InternalMap.kt","webpack://hazthenewestapp/../../../../../regexp.kt","webpack://hazthenewestapp/../../../../../Z:/buildAgent/work/ebbae481da7e109e/src/commonMain/kotlin/generated/gen-attributes.kt","webpack://hazthenewestapp/webpack/bootstrap","webpack://hazthenewestapp/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hazthenewestapp\"] = factory();\n\telse\n\t\troot[\"hazthenewestapp\"] = factory();\n})(this, function() {\nreturn ",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"import kotlin.js.Date\n\ndata class Strings(\n    val answer: String,\n    val headerline: String,\n    val headerlinemubtadia: String,\n    val writedown: String,\n    val allahknows: String,\n    val currentpaki: String,\n    val currenthaiz: String,\n    val situationmaychange:String,\n    val haizend: String,\n    val beforepregheader: String,\n    val preg: String,\n    val birth: String,\n    val afterpregheader:String,\n    val earlymiscarriage: String,\n    val ihtiyatighusl: String,\n    val sexnotallowed: String,\n    val endofpaki: String,\n    val habit: String,\n    val haizdays: String,\n    val haizdaysinsolution:String,\n    val istihazadays: String,\n    val nifasdays: String,\n    val nifasdaysinsolution:String,\n    val blooddays: String,\n    val solution: String,\n    val istihazadetailslineone: String,\n    val istihazadetailslinetwo: String,\n    val continuosbleeding: String,\n    val pakidays:String,\n    val tuhrfasid:String,\n    val tuhrfasidwithaddition:String,\n    val twomonthstuhr: String,\n    val dashesline: String,\n    val becamemutadah:String,\n    val thereisnoaadat:String,\n    val aadatofhaizonly:String,\n    val selectLanguage:String,\n    val dateOnly:String,\n    val dateAndTime:String,\n    val urdu:String,\n    val english:String,\n    val haizAadat:String,\n    val tuhrAadat:String,\n    val mawjoodahTuhr:String,\n    val faasid:String,\n    val nifasAadat:String,\n    val pregnancyStartTime:String,\n    val birthMiscarrriageTime:String,\n    val startTime:String,\n    val endTime:String,\n    val calculate:String,\n    val incorrectAadat:String,\n    val nifas:String,\n    val mustabeenUlKhilqa: String,\n    val errorEnterAadat: String,\n    val errorEnterMawjoodaPaki:String,\n    val errorEnterNifasAadat:String,\n    val passwordRequired:String,\n    val warningOnlyAuthorizedPersonnel:String,\n    val typeOfInput: String,\n    val duration: String,\n    val damOrTuhr: String,\n    val dam: String,\n    val tuhr: String,\n    val durationDam: String,\n    val durationPaki:String,\n    val durationTuhrefasid:String,\n    val durationTuhreFasidWithAddition:String,\n    val durationHaiz:String,\n    val durationNifas:String,\n    val startingFromIstehaza:String,\n    val startingFromHaiz:String,\n    val followedByistehazaAfter:String,\n    val followedByHaizAfter:String,\n    val khatimaplusnewline:String,\n    val birthduration: String,\n    val pregduration:String,\n    val startingFromNifas:String,\n    val bleedingstopsbeforethree:String,\n    val bleedingstopsbeforethreemaslachanges: String,\n    val afterfortydays:String,\n    val aftertendays:String,\n    val considerTuhrInGhiarMustabeenIsqaatIkhtilaf:String,\n    val ikhtilafimasail: String,\n    val aadatIncreasingAtEndOfDaurIkhtilaf:String,\n    val beforetendaysayyameqabliyyaallconsideredhaiz:String,\n    val endofistehazaayyameqabliyya:String,\n    val daysayyameqabliyya:String,\n    val mubtadia:String,\n    val mutada:String,\n    val typeOfMasla:String,\n    val askagainnodate:String,\n    val tendaysdoghusl:String,\n    val habitwithnifas: String,\n    val earlymiscarriageduration: String,\n    val ayyameqabliyyaikhtilaf:String,\n    val mubtadiaikhitilaf:String,\n    )\n\n\n\n\nenum class LanguageNames { ENGLISH, URDU }\n\ndata class AllTheInputs(\n    val entries: List<Entry>?= null,\n    val preMaslaValues: PreMaslaValues = PreMaslaValues(null,null, null, false),\n    val typeOfMasla:TypesOfMasla = TypesOfMasla.MUTADAH,\n    val pregnancy: Pregnancy? = null,\n    val typeOfInput: TypesOfInputs = TypesOfInputs.DATE_ONLY,\n    val language:String = \"urdu\",\n    val ikhtilaafaat:Ikhtilaafaat = Ikhtilaafaat(false,false,false,false),\n\n\n)\n\ndata class PreMaslaValues(\n    val inputtedAadatHaiz:Long? = null,\n    val inputtedAadatTuhr:Long? = null,\n    val inputtedMawjoodahTuhr:Long? = null,\n    val isMawjoodaFasid:Boolean = false,\n\n)\n\ndata class Ikhtilaafaat(\n    val ghairMustabeenIkhtilaaf:Boolean = false,\n    val daurHaizIkhtilaf:Boolean = false,\n    val ayyameQabliyyaIkhtilaf: Boolean = false,\n    val mubtadiaIkhitilaf: Boolean = false\n)\n\n\n\nenum class TypesOfInputs {\n    DATE_ONLY,\n    DATE_AND_TIME,\n    DURATION\n}\n\nenum class TypesOfMasla {\n    MUBTADIA,\n    MUTADAH,\n    NIFAS\n}\n\ndata class Entry(\n    val startTime: Date,\n    val endTime: Date\n)\nenum class TypesOfFutureDates {\n    A3_CHANGING_TO_A2,\n    END_OF_AADAT_HAIZ,\n    END_OF_AADAT_TUHR,\n    BEFORE_THREE_DAYS_MASLA_WILL_CHANGE,\n    BEFORE_THREE_DAYS,\n    AFTER_TEN_DAYS,\n    FORTY_DAYS,\n    IC_FORBIDDEN_DATE,\n    IHTIYATI_GHUSL,\n    BEFORE_TEN_DAYS_AYYAMEQABLIYYAH,\n    START_OF_AADAT_AYYAMEQABLIYYA,\n    TEN_DAYS_EXACTLY\n\n}\n\nclass FutureDateType(\n    val date:Date,\n    val futureDates:TypesOfFutureDates,\n    val date2:Date? = null,\n)\nclass EndingOutputValues(\n    val filHaalPaki:Boolean?,\n    val aadats:AadatsOfHaizAndTuhr?,\n    val futureDateType: MutableList<FutureDateType>\n)\nclass OutputTexts (\n    var englishText:String,\n    var urduText: String,\n    var haizDatesText:String,\n    var hazDatesList: MutableList<Entry>,\n    var endingOutputValues:EndingOutputValues,\n    var fixedDurations: MutableList<FixedDuration>\n)\n\n\nclass InfoForCompareTable(\n    val headerList: List<Date>,\n    val listOfColorsOfDaysList: List<List<Int>>,\n    val resultColors:List<Int>\n)\n\n\ndata class Pregnancy(\n    val pregStartTime:Date,\n    val birthTime:Date,\n    var aadatNifas:Long? = 40*MILLISECONDS_IN_A_DAY,\n    val mustabeenUlKhilqat:Boolean,\n    var newAadatNifas: Long? = -1L\n)\n\nenum class DurationType {\n    DAM,\n    TUHR,\n    TUHREFAASID,\n    TUHR_IN_HAML,\n    TUHREFAASID_IN_HAML,\n    NIFAS,\n    DAM_IN_HAML,\n    DAM_IN_NIFAS_PERIOD,\n    ISTIHAZA_BEFORE,\n    ISTIHAZA_AFTER,\n    HAIZ,\n    LESS_THAN_3_HAIZ,\n    HAML,\n    WILADAT_ISQAT,\n    TUHR_BIGGER_THAN_6_MONTHS,\n    TUHR_MUBTADIA_BECAME_A_MUTADA_NOW,\n    DAM_MUBTADIA,\n    TUHR_MUBTADIA,\n    TUHREFAASID_MUBTADIA,\n    TUHREFAASID_MUBTADIA_WITH_ISTEHAZA,\n    TUHREFAASID_WITH_ISTEHAZA,\n    ISTEHAZA_AYYAMEQABLIYYA,\n    START_OF_AADAT_AYYAMEQABLIYYA\n}\n\nclass DateTypeList (\n    val date:Date,\n    val type: DateTypes\n)\nenum class DateTypes {START,END, YAQEENI_PAKI,YAQEENI_NA_PAKI,AYYAAM_E_SHAKK_DUKHOOL, AYYAAM_E_SHAKK_KHUROOJ}\n\nclass DurationTypes (\n    val startTime: Date,\n    val endTime: Date,\n    val type: DateTypes\n)\n\nenum class Soortain {\n    A_1, A_2, A_3, B_2, B_3\n}\n\ndata class Duration(\n    val type: DurationType,\n    val timeInMilliseconds: Long,\n    var startTime: Date\n) {\n    val days: Double get() = timeInMilliseconds / MILLISECONDS_IN_A_DAY.toDouble()\n    val endDate: Date get() = Date(startTime.getTime().toLong() + (timeInMilliseconds))\n\n}\n\ndata class FixedDuration(\n    var type: DurationType,\n    var timeInMilliseconds: Long,\n    var indices: MutableList<Int> = mutableListOf(),\n    var istihazaAfter: Long = 0,\n    var ayyameqabliyya:AyyameQabliyya? = null,\n    var biggerThanTen: BiggerThanTenDm? = null,\n    var biggerThanForty: BiggerThanFortyNifas? = null,\n    var startDate: Date = Date(1,1,1),\n) {\n    val days: Double get() = timeInMilliseconds / MILLISECONDS_IN_A_DAY.toDouble()\n    val endDate: Date get() = addTimeToDate(this.startDate, this.timeInMilliseconds)\n}\n\ndata class AyyameQabliyya(\n    var ayyameqabliyya: Long,\n    var aadatHaiz: Long,\n    var aadatTuhr: Long\n)\n\ndata class BiggerThanTenDm(\n    var mp: Long, //mawjooda paki\n    var gp: Long, //aadat of Tuhr before solving this\n    var dm: Long, //dam\n    var hz: Long, //aadat of haiz before solving this\n    var qism: Soortain, //name of that case A-1, A-2, A-3, B-2, B-3\n    var istihazaBefore: Long, //number of days of istihaza before haiz\n    var haiz:Long, //number of days of haiz (also aadat of haiz before istimrar)\n    var istihazaAfter: Long, //number of days of istihaza after haiz\n    var aadatHaiz:Long, //aadat of haiz after end of istimrar\n    var aadatTuhr:Long, //aadat of tuhur after solving this\n    var durationsList: MutableList<Duration>\n\n)\ndata class BiggerThanFortyNifas(\n    var nifas: Long, //muddate nifas\n    var istihazaAfter: Long, //number of days of istihaza after nifas\n    var haiz:Long, //aadat of haiz before solving this\n    var aadatHaiz:Long, //aadat of haiz after solving this\n    var aadatTuhr:Long, //aadat of tuhur after solving this\n    var durationsList: MutableList<Duration>\n)\n\ndata class AadatsOfHaizAndTuhr(\n    var aadatHaiz: Long,\n    var aadatTuhr: Long\n)\n\ndata class AadaatWithChangeability(\n    var aadaat:AadatsOfHaizAndTuhr,\n    var isChangeable:Boolean\n)\n\ndata class AadatAfterIndexOfFixedDuration(\n    var aadat: Long,\n    var index: Int\n)\n\ndata class OutputStringsLanguages(\n    var urduString:String,\n    var englishString: String\n)","@file:Suppress(\"SpellCheckingInspection\")\n\nimport kotlinx.browser.window\nimport kotlin.js.Date\n\n//output line 1 is indices of all the things durations that make up the sum of this thingy.\n// we should only write it, if there is more than one index\n//output line 2 is printing if an istihaza after was added too. it contains amount of istihazaAfter\n//output line 3 is mp,gp, dm, hz, soorat, as well as istihazaBefore, Haiz, IstihazaAfter, and AadatHaiz/AaadatTuhr\n// at the end of it.b\n//output line 3, can be used to generate the daur lines.\n//After this should come output in dates:\n//if we passed dateTime at the start of this thingy, we could use\n// istihazaBefore, Haiz, and IstihazaAfter to generate them\n// and generate daur too\n\nlateinit var firstStartTime:Date\n\nfun handleEntries(allTheInputs: AllTheInputs): OutputTexts {\n    firstStartTime = allTheInputs.entries!![0].startTime\n    val times = allTheInputs.entries\n        .flatMap { entry -> listOf(entry.startTime, entry.endTime) }\n        .map { it.getTime().toLong() }\n    require(times == times.sorted())\n    //step 1 - create an array of dam and tuhur durations\n    var isDam = true\n    val durations = times.zipWithNext { firstTime, secondTime ->\n        val type = if (isDam) DurationType.DAM else DurationType.TUHR\n        isDam = !isDam\n        Duration(type, secondTime - firstTime, Date(firstTime))\n    }\n    val fixedDurations = durations\n        .map { duration ->\n            FixedDuration(duration.type, duration.timeInMilliseconds,startDate = duration.startTime)\n        }\n        .toMutableList()\n\n    addIndicesToFixedDurations(fixedDurations)\n\n    val noOutput = OutputTexts(\"\",\"\",\"\", mutableListOf(), EndingOutputValues(true, null, mutableListOf()), mutableListOf())\n    val adatsOfHaizList = mutableListOf<AadatAfterIndexOfFixedDuration>()\n    val adatsOfTuhrList = mutableListOf<AadatAfterIndexOfFixedDuration>()\n\n    adatsOfHaizList +=AadatAfterIndexOfFixedDuration(-1,-1)\n    adatsOfTuhrList +=AadatAfterIndexOfFixedDuration(-1,-1)\n\n    if(allTheInputs.typeOfMasla==TypesOfMasla.NIFAS){\n        return handleNifas(allTheInputs, fixedDurations, adatsOfHaizList, adatsOfTuhrList, noOutput)\n    }else if(allTheInputs.typeOfMasla==TypesOfMasla.MUBTADIA){\n        return handleMubtadia(allTheInputs,fixedDurations,adatsOfHaizList,adatsOfTuhrList, noOutput)\n    }else{//is mutadah\n        return handleMutadah(allTheInputs, fixedDurations,adatsOfHaizList,adatsOfTuhrList, noOutput)\n    }\n}\nfun handleMubtadia(allTheInputs: AllTheInputs, fixedDurations: MutableList<FixedDuration>, adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>, adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>, noOutput: OutputTexts):OutputTexts{\n    removeTuhrLessThan15(fixedDurations)\n    removeDamLessThan3(fixedDurations)\n    addStartDateToFixedDurations(fixedDurations)\n    if(!allTheInputs.ikhtilaafaat.mubtadiaIkhitilaf){\n        val aadats = dealWithMubtadiaDam(\n            fixedDurations,\n            adatsOfHaizList,\n            adatsOfTuhrList,\n            allTheInputs.ikhtilaafaat,\n            allTheInputs.preMaslaValues,\n            allTheInputs.language\n        )\n        if(aadats==null){ return noOutput }\n        markAllMubtadiaDamsAndTuhrsAsMubtadia(fixedDurations, allTheInputs.ikhtilaafaat.mubtadiaIkhitilaf)\n        //if we got aadats, the we run this portion\n        if (aadats.aadatHaiz!=-1L && aadats.aadatTuhr!=-1L){\n            dealWithBiggerThan10Dam(\n                fixedDurations,\n                allTheInputs.preMaslaValues,\n                allTheInputs.language,\n                adatsOfHaizList,\n                adatsOfTuhrList,\n                allTheInputs.ikhtilaafaat.daurHaizIkhtilaf\n            )\n        }\n    }else{//mubtadia ikhtilaf is on, solve masla as a mutadah\n        dealWithBiggerThan10Dam(\n            fixedDurations,\n            PreMaslaValues(10*MILLISECONDS_IN_A_DAY,\n                20*MILLISECONDS_IN_A_DAY,\n                20*MILLISECONDS_IN_A_DAY),\n            allTheInputs.language,\n            adatsOfHaizList,\n            adatsOfTuhrList,\n            allTheInputs.ikhtilaafaat.daurHaizIkhtilaf\n        )\n    }\n    addDurationsToDams(fixedDurations, allTheInputs.ikhtilaafaat.daurHaizIkhtilaf)\n    checkForAyyameQabliyya(fixedDurations,\n        adatsOfHaizList,\n        adatsOfTuhrList,\n        allTheInputs.preMaslaValues.inputtedMawjoodahTuhr,\n        allTheInputs.ikhtilaafaat.ayyameQabliyyaIkhtilaf)\n    val endingOutputValues = calculateEndingOutputValues(fixedDurations,\n        allTheInputs.preMaslaValues,\n        adatsOfHaizList,\n        adatsOfTuhrList, -1L, TypesOfMasla.MUBTADIA)\n    return generateOutputStringMubtadia(fixedDurations,\n        endingOutputValues,\n        allTheInputs.typeOfInput)\n\n}\nfun handleNifas(allTheInputs: AllTheInputs, fixedDurations: MutableList<FixedDuration>, adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>, adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>, noOutput:OutputTexts):OutputTexts{\n    addStartDateToFixedDurations(fixedDurations)\n\n    markAllTuhrsInPregnancyAsHaml(fixedDurations, allTheInputs.pregnancy!!, allTheInputs.ikhtilaafaat.ghairMustabeenIkhtilaaf)\n    //the above also added start of pregnancy\n\n    if(allTheInputs.pregnancy.mustabeenUlKhilqat){\n        return handleMustabeenUlKhilqa(allTheInputs,fixedDurations,adatsOfHaizList,adatsOfTuhrList,noOutput)\n    }else{\n        return handleGhairMustabeenUlKhilqa(allTheInputs,fixedDurations,adatsOfHaizList,adatsOfTuhrList,noOutput)\n    }\n\n}\nfun handleGhairMustabeenUlKhilqa(allTheInputs: AllTheInputs, //isqaat\n                                 fixedDurations: MutableList<FixedDuration>,\n                                 adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>,\n                                 adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>,\n                                 noOutput:OutputTexts):OutputTexts{\n    //if it's not mustabeen ulkhilqat, deal with it like haiz\n    removeTuhrLessThan15(fixedDurations)\n    removeTuhrLessThan15InPregnancy(fixedDurations)\n    removeDamLessThan3(fixedDurations)\n    addStartDateToFixedDurations(fixedDurations)\n    val mawjoodahIsNotAadat = checkIfMawjoodahPakiIsTuhrInHaml(\n        fixedDurations,\n        allTheInputs.pregnancy!!,\n        allTheInputs.preMaslaValues.inputtedMawjoodahTuhr,\n        allTheInputs.preMaslaValues.isMawjoodaFasid,\n        allTheInputs.ikhtilaafaat.ghairMustabeenIkhtilaaf\n    )\n    if(!dealWithBiggerThan10Dam(\n            fixedDurations,\n            PreMaslaValues(\n                allTheInputs.preMaslaValues.inputtedAadatHaiz,\n                allTheInputs.preMaslaValues.inputtedAadatTuhr,\n                allTheInputs.preMaslaValues.inputtedMawjoodahTuhr,\n                mawjoodahIsNotAadat),\n            allTheInputs.language,\n            adatsOfHaizList,\n            adatsOfTuhrList,\n            allTheInputs.ikhtilaafaat.daurHaizIkhtilaf\n        )){return noOutput}\n    addDurationsToDams(fixedDurations, allTheInputs.ikhtilaafaat.daurHaizIkhtilaf)\n    checkForAyyameQabliyya(fixedDurations,\n        adatsOfHaizList,\n        adatsOfTuhrList,\n        allTheInputs.preMaslaValues.inputtedMawjoodahTuhr,\n        allTheInputs.ikhtilaafaat.ayyameQabliyyaIkhtilaf)\n    addWiladat(fixedDurations, allTheInputs.pregnancy)\n    addStartOfPregnancy(fixedDurations, allTheInputs.pregnancy)\n    val endingOutputValues = calculateEndingOutputValues(fixedDurations,\n        PreMaslaValues( null,\n            allTheInputs.preMaslaValues.inputtedAadatTuhr,\n            allTheInputs.preMaslaValues.inputtedMawjoodahTuhr,\n            mawjoodahIsNotAadat),\n        adatsOfHaizList,\n        adatsOfTuhrList,\n        -1L, TypesOfMasla.NIFAS)\n    return generateOutputStringPregnancy(fixedDurations,\n        allTheInputs.pregnancy,\n        endingOutputValues,\n        allTheInputs.typeOfInput)\n\n}\nfun handleMustabeenUlKhilqa(allTheInputs: AllTheInputs, //wiladat\n                            fixedDurations: MutableList<FixedDuration>,\n                            adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>,\n                            adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>,\n                            noOutput:OutputTexts):OutputTexts{\n    //mark all dam in pregnancy as isithaza.\n    markAllDamsInPregnancyAsHaml(fixedDurations, allTheInputs.pregnancy!!)\n    removeTuhrLessThan15(fixedDurations)//do this before the next, cuz why not, mkes thigns simpler in joining dams\n    addStartDateToFixedDurations(fixedDurations)//cuz the last shoulda messed it up\n    makeAllDamInFortyAfterWiladatAsMuttasil(fixedDurations,allTheInputs.pregnancy) //also, marking them as Dam in\n    if(!dealWithDamInMuddateNifas(fixedDurations,allTheInputs.pregnancy, allTheInputs.language)){return noOutput}\n    removeDamLessThan3(fixedDurations) //this won't effect dam in muddat e haml\n    addStartDateToFixedDurations(fixedDurations)\n    if(!dealWithBiggerThan10Dam(\n            fixedDurations,\n            allTheInputs.preMaslaValues,\n            allTheInputs.language,\n            adatsOfHaizList,\n            adatsOfTuhrList,\n            allTheInputs.ikhtilaafaat.daurHaizIkhtilaf\n        )){return noOutput}\n    addDurationsToDams(fixedDurations, allTheInputs.ikhtilaafaat.daurHaizIkhtilaf)\n    checkForAyyameQabliyya(fixedDurations,\n        adatsOfHaizList,\n        adatsOfTuhrList,allTheInputs.preMaslaValues.inputtedMawjoodahTuhr,\n        allTheInputs.ikhtilaafaat.ayyameQabliyyaIkhtilaf)\n    addWiladat(fixedDurations, allTheInputs.pregnancy)\n    addStartOfPregnancy(fixedDurations, allTheInputs.pregnancy)\n    val endingOutputValues = calculateEndingOutputValues(fixedDurations,\n        allTheInputs.preMaslaValues,\n        adatsOfHaizList,\n        adatsOfTuhrList,\n        allTheInputs.pregnancy.aadatNifas, TypesOfMasla.NIFAS)\n    return generateOutputStringPregnancy(fixedDurations,\n        allTheInputs.pregnancy,\n        endingOutputValues, allTheInputs.typeOfInput)\n\n}\nfun handleMutadah(allTheInputs: AllTheInputs,fixedDurations: MutableList<FixedDuration>,adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>,adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>, noOutput: OutputTexts):OutputTexts{\n    removeTuhrLessThan15(fixedDurations)\n    removeDamLessThan3(fixedDurations)\n    addStartDateToFixedDurations(fixedDurations)\n    if(!dealWithBiggerThan10Dam(\n            fixedDurations,\n            allTheInputs.preMaslaValues,\n            allTheInputs.language,\n            adatsOfHaizList,\n            adatsOfTuhrList,\n            allTheInputs.ikhtilaafaat.daurHaizIkhtilaf\n        )){return noOutput}\n    addDurationsToDams(fixedDurations, allTheInputs.ikhtilaafaat.daurHaizIkhtilaf)\n    checkForAyyameQabliyya(fixedDurations,\n        adatsOfHaizList,\n        adatsOfTuhrList,\n        allTheInputs.preMaslaValues.inputtedMawjoodahTuhr,\n        allTheInputs.ikhtilaafaat.ayyameQabliyyaIkhtilaf)\n    val endingOutputValues = calculateEndingOutputValues(fixedDurations,\n        allTheInputs.preMaslaValues,\n        adatsOfHaizList,\n        adatsOfTuhrList,\n        -1L, TypesOfMasla.MUTADAH)\n    return generateOutputStringMutadah(fixedDurations, endingOutputValues, allTheInputs.typeOfInput)\n\n}\n\nfun checkIfMawjoodahPakiIsTuhrInHaml(fixedDurations:MutableList<FixedDuration>, pregnancy:Pregnancy, inputtedMawjoodaTuhr:Long?,isMawjoodaFasid:Boolean,isTuhrInHamlAadatInGhairMustabeenIkhtilaf:Boolean):Boolean{\n    if(isMawjoodaFasid){\n        return true\n    }\n    else if(inputtedMawjoodaTuhr == null){\n        return false\n    }\n    else if(isTuhrInHamlAadatInGhairMustabeenIkhtilaf){\n        return false\n    }\n    else{\n        val pregStartTime = pregnancy.pregStartTime\n        val pregEndTime = pregnancy.birthTime\n        val mawjoodahPakiEndDate = fixedDurations.first().startDate\n        val mawjoodahPakiStartDate = addTimeToDate(mawjoodahPakiEndDate, -inputtedMawjoodaTuhr)\n        if((mawjoodahPakiEndDate.getTime()>pregStartTime.getTime()&&mawjoodahPakiEndDate.getTime()<=pregEndTime.getTime())||\n           (mawjoodahPakiStartDate.getTime()>=pregStartTime.getTime()&&mawjoodahPakiStartDate.getTime()<pregEndTime.getTime())||\n           (mawjoodahPakiStartDate.getTime()<=pregStartTime.getTime()&& mawjoodahPakiEndDate.getTime()>=pregEndTime.getTime())){\n            //either mawjoodah paki start or end date is during preg, or the 2 dates are on either side of preg\n            return true\n        }\n    }\n    return false\n}\n\nfun markAllMubtadiaDamsAndTuhrsAsMubtadia(fixedDurations:MutableList<FixedDuration>, mubtadiaIkhtilaf: Boolean){\n    for(fixedDuration in fixedDurations) {\n        if(mubtadiaIkhtilaf){//mubtadia is over after first bigger THAN 10\n            if(fixedDuration.type == DurationType.DAM ) {\n                fixedDuration.type = DurationType.DAM_MUBTADIA\n                if(fixedDuration.days>10){\n                    return\n                }\n            }else if(fixedDuration.type==DurationType.TUHR) {\n                fixedDuration.type = DurationType.TUHR_MUBTADIA\n            }else if(fixedDuration.type==DurationType.TUHREFAASID) {\n                fixedDuration.type = DurationType.TUHREFAASID_MUBTADIA\n            }else {\n                return\n            }\n        }else{\n            when (fixedDuration.type) {\n                DurationType.DAM -> fixedDuration.type = DurationType.DAM_MUBTADIA\n                DurationType.TUHR -> fixedDuration.type = DurationType.TUHR_MUBTADIA\n                DurationType.TUHREFAASID -> fixedDuration.type = DurationType.TUHREFAASID_MUBTADIA\n                DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW -> return\n                else -> return\n            }\n        }\n    }\n}\nfun dealWithMubtadiaDam(fixedDurations:MutableList<FixedDuration>,\n                        adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>,\n                        adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>,\n                        ikhtilaafaat: Ikhtilaafaat,\n                        preMaslaValues: PreMaslaValues,\n                        language: String,\n):AadatsOfHaizAndTuhr?{\n    //this is not in case of pregnancy\n    //the job of this function is to just tell how much of it from the start is istehaza,\n    // how much is haiz, and what the aadat at the end of this is\n    //if we get an aadat, we return true, otherwise return false\n    val endOfDaurIkhtilaf=ikhtilaafaat.daurHaizIkhtilaf\n    val mubtadiaIkhtilaf=ikhtilaafaat.mubtadiaIkhitilaf\n    val inputtedAadatHaz = preMaslaValues.inputtedAadatHaiz\n    val inputtedMawjoodaTuhr = preMaslaValues.inputtedMawjoodahTuhr\n\n\n\n    var aadatHaz:Long = -1L\n    var aadatTuhr:Long = -1L\n    var iztirariAadatHaiz:Long = 10*MILLISECONDS_IN_A_DAY\n    var iztirariAadatTuhr:Long = 20*MILLISECONDS_IN_A_DAY\n    if(inputtedAadatHaz!=null){\n        aadatHaz=inputtedAadatHaz\n        adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,-1)\n        iztirariAadatHaiz = aadatHaz\n        iztirariAadatTuhr = 30*MILLISECONDS_IN_A_DAY - iztirariAadatHaiz\n    }\n\n\n\n    var i = 0\n    while (i<fixedDurations.size){\n        //iterate through the dimaa\n        if(fixedDurations[i].type==DurationType.DAM &&\n            fixedDurations[i].days<=10 &&\n            fixedDurations[i].days>=3){\n            //we have a haiz aadat!\n            aadatHaz = fixedDurations[i].timeInMilliseconds\n            adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i)\n            //change iztirari aadat of Tuhr\n            iztirariAadatTuhr = 30*MILLISECONDS_IN_A_DAY - aadatHaz\n            iztirariAadatHaiz = aadatHaz\n\n            //check if next Tuhr is saheeh. if it is, declare it aadat\n            if(i<fixedDurations.size-1 && fixedDurations[i+1].type==DurationType.TUHR){\n                aadatTuhr=fixedDurations[i+1].timeInMilliseconds\n                //once we have a tuhr habit too. so we have a mutadah, so we should stop now\n                //println(\"Mubtadia Soorat 1: Haiz Sahih, Tuhr Saheeh\")\n                //return aadat\n                adatsOfTuhrList+=AadatAfterIndexOfFixedDuration(aadatTuhr,i)\n                fixedDurations[i+1].type = DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW\n                return AadatsOfHaizAndTuhr(aadatHaz,aadatTuhr)\n            }\n        }else if(fixedDurations[i].type==DurationType.DAM && fixedDurations[i].days>10){//this is where bigger than 10 starts\n//            println(\"dam fasid, tuhr-e-fasid\")\n            //if there is tuhr behind it, check how long it is\n            var istehazaBefore: Long = 0\n            var haiz:Long\n            var istehazaAfter:Long\n            //if there is an addat of tuhr, we would not be in mubtadia any more, so check iztirari\n            var mawjoodahTuhr=-1L\n            if(i>0 &&\n                (fixedDurations[i-1].type==DurationType.TUHR||\n                        fixedDurations[i-1].type==DurationType.TUHREFAASID)){\n//                println(\"2\")\n//                println(\"dam-e-fasid tuhr-e-fasid type 1\")\n                //if there is a duration before this one, and it is either atuhr or a tuhr-e fasid\n                //then mawjoodah tuhr will be that + any istihaza after associated with it\n                mawjoodahTuhr = fixedDurations[i-1].timeInMilliseconds+fixedDurations[i-1].istihazaAfter\n            }else if(inputtedMawjoodaTuhr!=null){\n                mawjoodahTuhr=inputtedMawjoodaTuhr\n            }\n            if(aadatHaz!=-1L&&mawjoodahTuhr==-1L){\n                //give error\n                if(language==\"english\"){\n                    window.alert(StringsOfLanguages.ENGLISH.errorEnterMawjoodaPaki)\n                }else if(language==\"urdu\"){\n                    window.alert(StringsOfLanguages.URDU.errorEnterMawjoodaPaki)\n                }\n                return null\n            }\n\n\n            if(mawjoodahTuhr < iztirariAadatTuhr && mawjoodahTuhr !=-1L){\n//                println(\"3\")\n//                println(\"dam-e-fasid tuhr-e-fasid type2\")\n                //if mawjoodah paki is less than iztirari aadat, then make the difference from the start istehaza\n                istehazaBefore = iztirariAadatTuhr-mawjoodahTuhr\n            }else{//if either mawjoodah tuhr was long, or it began with a long haiz\n                //istehazabefore remains 0. we don't really need this else\n//                println(\"4\")\n\n            }\n            //follow this by haiz\n            if(fixedDurations[i].timeInMilliseconds-istehazaBefore<= iztirariAadatHaiz){//no daur sitch\n//                println(\"5\")\n                haiz = fixedDurations[i].timeInMilliseconds-istehazaBefore\n                //we have an aadat of haiz!!\n                //in this case, haiz and aadat of haiz is the same\n                aadatHaz = haiz\n                adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i)\n                iztirariAadatHaiz = aadatHaz\n                //check if the tuhr after this is saheeh\n                if(i<fixedDurations.size - 1 && fixedDurations[i+1].type == DurationType.TUHR){\n                    aadatTuhr = fixedDurations[i+1].timeInMilliseconds\n                    adatsOfTuhrList+=AadatAfterIndexOfFixedDuration(aadatTuhr,i)\n                    //we have a mutadah\n                    val biggerThanTen = BiggerThanTenDm(0,0,0,0,Soortain.A_1,istehazaBefore, haiz, 0L, haiz, -1, mutableListOf())\n                    fixedDurations[i].biggerThanTen = biggerThanTen\n                    fixedDurations[i+1].type = DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW\n                    return AadatsOfHaizAndTuhr(aadatHaz,aadatTuhr)\n                }else{//no tuhr aadat yet\n                    val biggerThanTen = BiggerThanTenDm(0,0,0,0,Soortain.A_1,istehazaBefore, haiz, 0L, haiz, -1L, mutableListOf())\n                    fixedDurations[i].biggerThanTen = biggerThanTen\n                    iztirariAadatTuhr=30*MILLISECONDS_IN_A_DAY-haiz\n                }\n            }else{//we have an istehaza after sitch\n//                println(\"6\")\n\n                haiz = iztirariAadatHaiz\n                istehazaAfter = fixedDurations[i].timeInMilliseconds-istehazaBefore-iztirariAadatHaiz\n\n                //now we gotta check if a daur happened\n                iztirariAadatHaiz = dealWithIstihazaAfter(istehazaAfter, haiz, iztirariAadatTuhr, fixedDurations, i, endOfDaurIkhtilaf)\n//                println(\"7\")\n//                println(\"istehaza after was ${istehazaAfter/MILLISECONDS_IN_A_DAY}\")\n//                println(\"deal with istihaza after returned this aadat ${iztirariAadatHaiz/MILLISECONDS_IN_A_DAY} \")\n\n                //now we wanna check if aadat did change.\n                //a bit hackish but..\n                val remainder = istehazaAfter%(30*MILLISECONDS_IN_A_DAY)\n//                println(\"remainder was $remainder\")\n                if(iztirariAadatHaiz<10*MILLISECONDS_IN_A_DAY ||\n                    (iztirariAadatHaiz==10*MILLISECONDS_IN_A_DAY && remainder==10*MILLISECONDS_IN_A_DAY)){\n//                    println(\"8\")\n\n                    //in this case we gotta check further\n                    //if iztirari aadat of haiz is 10, the of tuhr is def 20.\n                    //so istihazaAfter must be a number that gives a remainder of 10, when divided by 30\n\n                    //adat did change, so do the aadat shtick\n                    //we have an aadat of haiz!!\n                    aadatHaz = iztirariAadatHaiz\n                    adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i)\n                    //check if the tuhr after this is saheeh\n                    if(i<fixedDurations.size - 1 && fixedDurations[i+1].type == DurationType.TUHR){\n                        aadatTuhr = fixedDurations[i+1].timeInMilliseconds\n                        adatsOfTuhrList+=AadatAfterIndexOfFixedDuration(aadatTuhr,i)\n                        //we have a mutadah\n                        val biggerThanTen = BiggerThanTenDm(0,0,0,0,Soortain.A_1,istehazaBefore, haiz, istehazaAfter, aadatHaz, -1, mutableListOf())\n                        fixedDurations[i].biggerThanTen = biggerThanTen\n                        fixedDurations[i+1].type = DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW\n                        return AadatsOfHaizAndTuhr(aadatHaz,aadatTuhr)\n                    }else{//no adat for tuhr yet\n                        val biggerThanTen = BiggerThanTenDm(0,0,0,0,Soortain.A_1,istehazaBefore, haiz, istehazaAfter, aadatHaz, -1L, mutableListOf())\n                        fixedDurations[i].biggerThanTen = biggerThanTen\n                        iztirariAadatTuhr=30*MILLISECONDS_IN_A_DAY-aadatHaz\n                    }\n                }\n                val biggerThanTen = BiggerThanTenDm(0,0,0,0,Soortain.A_1,istehazaBefore, haiz, istehazaAfter, aadatHaz, -1L, mutableListOf())\n                fixedDurations[i].biggerThanTen = biggerThanTen\n                if(mubtadiaIkhtilaf){\n                    return AadatsOfHaizAndTuhr(iztirariAadatHaiz,iztirariAadatTuhr)\n                }\n//                println(\"9\")\n\n            }\n        }\n        i++\n    }\n    return AadatsOfHaizAndTuhr(aadatHaz,aadatTuhr)\n}\n\nfun dealWithDamInMuddateNifas(fixedDurations:MutableList<FixedDuration>,pregnancy:Pregnancy, language: String):Boolean{\n    var i = 0\n    while (i<fixedDurations.size){\n        if(fixedDurations[i].type==DurationType.DAM_IN_NIFAS_PERIOD){\n            if(fixedDurations[i].timeInMilliseconds > 40*MILLISECONDS_IN_A_DAY){\n                //if nifas exceeded 40\n                if(pregnancy.aadatNifas==null){\n                    //give error\n                    if(language==\"english\"){\n                        window.alert(StringsOfLanguages.ENGLISH.errorEnterNifasAadat)\n                    }else if(language==\"urdu\"){\n                        window.alert(StringsOfLanguages.URDU.errorEnterNifasAadat)\n                    }\n                    pregnancy.aadatNifas=-1\n                    return false\n                }\n                val istihazaAfter = fixedDurations[i].timeInMilliseconds-pregnancy.aadatNifas!!\n                val nifasInfo = BiggerThanFortyNifas(\n                    pregnancy.aadatNifas!!, istihazaAfter,-1, -1,\n                    -1, mutableListOf())\n                fixedDurations[i].biggerThanForty=nifasInfo\n                pregnancy.newAadatNifas=pregnancy.aadatNifas\n                //the rest of this is dealt with in bigger than 10\n                //break it up into dam and tuhr?\n                //maybe do that later in bigger than 10\n                //as that is the only way to get aadat.\n                break\n            }else{//it is 40 or less\n                //do nothing to this. don't even bother to update aadat.\n                //maybe update aadat? if it's working, why fix?\n                //do update aadat\n                pregnancy.newAadatNifas = fixedDurations[i].timeInMilliseconds\n\n\n            }\n        }\n\n        i++\n    }\n    return true\n}\n\nfun makeAllDamInFortyAfterWiladatAsMuttasil(fixedDurations:MutableList<FixedDuration>,pregnancy:Pregnancy){\n    val birthDate:Long = pregnancy.birthTime.getTime().toLong()\n    val fortyPlusBD = birthDate+(40*MILLISECONDS_IN_A_DAY)\n    var i = 0\n    while (i<fixedDurations.size){\n        val startTime = fixedDurations[i].startDate.getTime()\n        if(startTime>=birthDate &&\n                startTime<=fortyPlusBD &&\n                fixedDurations[i].type == DurationType.DAM){\n            //if a dam starts after or at birth, and before or at 40\n            //then check the dam before it if it exists, is it in nifas period.\n            if(i>1 && fixedDurations[i-2].type==DurationType.DAM_IN_NIFAS_PERIOD){\n                //if it is, then extend last Dam to cover this one\n                fixedDurations[i-2].timeInMilliseconds += fixedDurations[i-1].timeInMilliseconds + fixedDurations[i].timeInMilliseconds\n                fixedDurations[i-2].indices.addAll(fixedDurations[i-1].indices)\n                fixedDurations[i-2].indices.addAll(fixedDurations[i].indices)\n                fixedDurations.removeAt(i-1)\n                fixedDurations.removeAt(i-1)\n                i -= 2\n            }else{//there is no dam before this in nifas period\n                val newDuration:Long = startTime.toLong()-birthDate\n                fixedDurations[i].startDate=pregnancy.birthTime\n                fixedDurations[i].timeInMilliseconds += newDuration\n                fixedDurations[i].type = DurationType.DAM_IN_NIFAS_PERIOD\n                //since we added time to this one, we gotta subtract it from the one before.\n                //if it exists\n                if(i>0){\n                    fixedDurations[i-1].timeInMilliseconds-=newDuration\n                }\n            }\n        }\n        if(startTime>fortyPlusBD){\n            break\n        }\n        i++\n    }\n}\n\n\nfun markAllTuhrsInPregnancyAsHaml(fixedDurations: MutableList<FixedDuration>, pregnancy:Pregnancy, isTuhrInHamlAadatInGhairMustabeenIkhtilaf:Boolean){\n    for (i in fixedDurations.indices){\n        val endDateOfFixedDuration = fixedDurations[i].endDate\n        if(fixedDurations[i].type == DurationType.TUHR &&\n            fixedDurations[i].startDate.getTime() < pregnancy.birthTime.getTime() &&\n            endDateOfFixedDuration.getTime() > pregnancy.pregStartTime.getTime()){\n            if(isTuhrInHamlAadatInGhairMustabeenIkhtilaf && !pregnancy.mustabeenUlKhilqat){\n                //in non mustabeen ulkhilqah, when the ikhtilafi masla is on, do not mark tuhr as tuhr in haml\n            }else{\n                fixedDurations[i].type = DurationType.TUHR_IN_HAML\n\n            }\n        }\n    }\n}\n\nfun markAllDamsInPregnancyAsHaml(fixedDurations: MutableList<FixedDuration>, pregnancy:Pregnancy){\n    var i =0\n    val startDateOfHaml = pregnancy.pregStartTime.getTime().toLong()\n    val endDateOfHaml = pregnancy.birthTime.getTime().toLong()\n\n    while(i<fixedDurations.size){\n        val endDateOfFixedDuration = fixedDurations[i].endDate\n\n        //this dam started before pregnancy, ends in the middle of pregnancy\n        //  ---(pregnancy---  birth)\n        if(fixedDurations[i].type == DurationType.DAM &&\n                fixedDurations[i].startDate.getTime()<startDateOfHaml &&\n                endDateOfFixedDuration.getTime()>startDateOfHaml &&\n                endDateOfFixedDuration.getTime()<=endDateOfHaml){\n            //mark the portion in pregnancy as dam in haml. we're gonna have to make more dam???\n            //or, we could just shorten it to prepregnancy stae, and leave it as is. who cares about dam in haml?\n            //we can even put it in istihazaAfter.\n            //maybe that's a bad idea, as it could trigger daur...\n            //for now, we are just shortening it.\n            val newDuration = startDateOfHaml - fixedDurations[i].startDate.getTime().toLong()\n            val timeInHaml = fixedDurations[i].timeInMilliseconds-newDuration\n            fixedDurations[i].timeInMilliseconds = newDuration\n            //maybe we really should leave an istihaz after here????\n            //we gotta figure out what to do with indices here\n            val newFixedDuration = FixedDuration(DurationType.DAM_IN_HAML,timeInHaml, startDate = addTimeToDate(fixedDurations[i].startDate, newDuration))\n            fixedDurations.add(i+1, newFixedDuration)\n        }\n        //this started in the middle, ended in the middle of it\n        //  (pregnancy ---- birth)\n        if(fixedDurations[i].type == DurationType.DAM &&\n                    endDateOfFixedDuration.getTime() <= endDateOfHaml &&\n                    fixedDurations[i].startDate.getTime() >= startDateOfHaml\n            ){\n\n            //mark it as dam in haml, aka, istihaza.\n            fixedDurations[i].type = DurationType.DAM_IN_HAML\n        }\n        //this starts in the middle of pregnancy, ends after it.\n        // (pregnancy   ---birth)---\n        if(fixedDurations[i].type == DurationType.DAM &&\n                    fixedDurations[i].startDate.getTime()<endDateOfHaml &&\n                    fixedDurations[i].startDate.getTime()>=startDateOfHaml &&\n                    endDateOfFixedDuration.getTime()>endDateOfHaml\n                ){\n\n            val firstDuration = pregnancy.birthTime.getTime().toLong()-fixedDurations[i].startDate.getTime().toLong()\n            val secondDuration = fixedDurations[i].timeInMilliseconds-firstDuration\n            val secondFixedDuration = FixedDuration(DurationType.DAM,secondDuration, startDate = pregnancy.birthTime)\n            fixedDurations.add(i+1,secondFixedDuration)\n            fixedDurations[i].timeInMilliseconds = firstDuration\n            fixedDurations[i].type=DurationType.DAM_IN_HAML\n\n        }\n        //this started before pregnancy began, ends after pregnancy ended\n        //  ---(pregnancy----birth)---\n        if(fixedDurations[i].type == DurationType.DAM &&\n                fixedDurations[i].startDate.getTime()<startDateOfHaml &&\n                endDateOfFixedDuration.getTime()>endDateOfHaml){\n            //make 1 at the start, one at the end, and 1 in the middle\n            val firstDuration = startDateOfHaml-fixedDurations[i].startDate.getTime().toLong()\n            val secondDuration = endDateOfHaml-startDateOfHaml\n            val thirdDuration = fixedDurations[i].timeInMilliseconds-firstDuration-secondDuration\n\n            val secondFixedDuration = FixedDuration(DurationType.DAM_IN_HAML,secondDuration, startDate = pregnancy.pregStartTime)\n            val thirdFixedDuration = FixedDuration(DurationType.DAM,thirdDuration, startDate = pregnancy.birthTime)\n            fixedDurations.add(i+1, secondFixedDuration)\n            fixedDurations.add(i+2, thirdFixedDuration)\n            fixedDurations[i].timeInMilliseconds=firstDuration\n\n\n        }\n\n        i++\n    }\n}\n\n\nfun addStartDateToFixedDurations(fixedDurations: MutableList<FixedDuration>){\n    var date:Date = firstStartTime\n    for (fixedDuration in fixedDurations){\n        fixedDuration.startDate = date\n        date = addTimeToDate(date,fixedDuration.timeInMilliseconds)\n    }\n}\nfun addIndicesToFixedDurations(fixedDurations: MutableList<FixedDuration>){\n    //this is so we can know the indics comparison between duration and fixed duration\n    var i =0\n    while(i<fixedDurations.size){\n        fixedDurations[i].indices.add(i)\n        i++\n    }\n}\n\nfun removeTuhrLessThan15InPregnancy (fixedDurations: MutableList<FixedDuration>){\n    var i=0\n    while(i < fixedDurations.size){//iterate through durations\n        //if there is a tuhr less than 15\n        if(fixedDurations[i].days<15 && fixedDurations[i].type== DurationType.TUHR_IN_HAML){\n            //it must be surrounded by dams on either side. increase size of damBefore. delete tuhr and dam after\n            fixedDurations[i-1].timeInMilliseconds += fixedDurations[i].timeInMilliseconds + fixedDurations[i+1].timeInMilliseconds\n            fixedDurations[i-1].indices.addAll(fixedDurations[i].indices)\n            fixedDurations.removeAt(i)\n            fixedDurations[i-1].indices.addAll(fixedDurations[i].indices)\n            fixedDurations.removeAt(i)\n        } else {\n            i++\n        }\n    }\n}\n\n\n//step 2 - Remove tuhr-e-naaqis (less than 15 days):\n//          iterate through array. if we find a tuhur less than 15, it must be surrounded\n//          by dam. add all 3 duration values together, delete the originals, and set type as dam.\n//          We want to keep the original list. Perumably the unflattened one will remain.\n\n\nfun removeTuhrLessThan15 (fixedDurations: MutableList<FixedDuration>){\n    var i=0\n    while(i < fixedDurations.size){//iterate through durations\n        //if there is a tuhr less than 15\n        if(fixedDurations[i].days<15 && fixedDurations[i].type== DurationType.TUHR){\n            //it must be surrounded by dams on either side. increase size of damBefore. delete tuhr and dam after\n            fixedDurations[i-1].timeInMilliseconds += fixedDurations[i].timeInMilliseconds + fixedDurations[i+1].timeInMilliseconds\n            fixedDurations[i-1].indices.addAll(fixedDurations[i].indices)\n            fixedDurations.removeAt(i)\n            fixedDurations[i-1].indices.addAll(fixedDurations[i].indices)\n            fixedDurations.removeAt(i)\n        } else {\n            i++\n        }\n    }\n}\n\n//step 3 - Remove dam less than 3\n//          iterate through array. when we find a dam less than 3, check if\n//          there is a tuhur behind it. and in front of it. if there is then add all the 3 durations\n//          together. set type as a new type tuhr-e-faasid. delete the originals.\nfun removeDamLessThan3 (fixedDurations: MutableList<FixedDuration>){\n    var i=0\n    while (i<fixedDurations.size-1){\n        if(fixedDurations[i].type==DurationType.DAM && fixedDurations[i].days<3){\n            if(i>0){//there is tuhur behind this and in front of it\n                if(fixedDurations[i-1].type==DurationType.TUHR){//if there is one behind it\n                    fixedDurations[i-1].type = DurationType.TUHREFAASID\n                    fixedDurations[i-1].timeInMilliseconds += fixedDurations[i].timeInMilliseconds\n                    fixedDurations[i-1].indices.addAll(fixedDurations[i].indices)\n\n                    if(fixedDurations[i+1].type==DurationType.TUHR){\n                        fixedDurations[i-1].timeInMilliseconds += fixedDurations[i+1].timeInMilliseconds\n                        fixedDurations[i-1].indices.addAll(fixedDurations[i+1].indices)\n                        fixedDurations.removeAt(i+1)\n\n                    }\n                    fixedDurations.removeAt(i)\n                    i--\n                }\n            }\n        }\n        i++\n    }\n}\n//step 4 - Deal with bigger than 10 dam\n//          iterate through array. getting aadat on the way. each time you encounter a dam\n//          less than 10, update it into HazAadat. each time you encounter a tuhur\n//          (not a tuhr-e-faasid), update it into aadat too.\n\nfun dealWithBiggerThan10Dam(fixedDurations: MutableList<FixedDuration>,\n                            preMaslaValues: PreMaslaValues,\n                            language: String,\n                            adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>,\n                            adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>,\n                            endOfDaurIkhtilaf: Boolean):Boolean{\n\n    //This basically adds this info to each fixed duration of dam:\n    // - istihaza before haiz duration\n    // - haiz duration\n    // - amount of dam left after haiz\n    // - new aadats of haiz and tuhr\n    // - we use a function dealWithIstihazaAfter, to figure out if aadat of haiz needs to be updated in case of daur\n//    println(\"started bigger than 10\")\n    val inputtedAadatHaz = preMaslaValues.inputtedAadatHaiz\n    val inputtedAadatTuhr = preMaslaValues.inputtedAadatTuhr\n    val inputtedMawjoodaTuhr = preMaslaValues.inputtedMawjoodahTuhr\n    val isMawjoodaFasid  = preMaslaValues.isMawjoodaFasid\n\n\n    var aadatHaz:Long = -1\n    var aadatTuhr:Long = -1\n    var mawjoodaTuhr:Long = -1\n\n    if (inputtedAadatHaz != null && inputtedAadatHaz>=3*MILLISECONDS_IN_A_DAY && inputtedAadatHaz<=10*MILLISECONDS_IN_A_DAY){\n        aadatHaz = inputtedAadatHaz\n        adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,-1)\n    }\n    if (inputtedAadatTuhr!= null && inputtedAadatTuhr>=15*MILLISECONDS_IN_A_DAY){\n        aadatTuhr = inputtedAadatTuhr\n        adatsOfTuhrList+=AadatAfterIndexOfFixedDuration(aadatTuhr,-1)\n    }\n    if (inputtedMawjoodaTuhr!= null && inputtedMawjoodaTuhr>=15*MILLISECONDS_IN_A_DAY){\n        mawjoodaTuhr = inputtedMawjoodaTuhr\n    }\n\n    for (i in fixedDurations.indices){\n        //iterate through fixedDurations\n\n        //get aadat if dam is less than 10\n        if(fixedDurations[i].type==DurationType.DAM && fixedDurations[i].days<=10&&fixedDurations[i].days>=3){\n            aadatHaz = fixedDurations[i].timeInMilliseconds\n            adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i)\n            if(i>0 && fixedDurations[i-1].type==DurationType.TUHR){\n                aadatTuhr = fixedDurations[i-1].timeInMilliseconds\n                //if aadat is bigger than or equal to 6 months\n                if(aadatTuhr>=30*6*MILLISECONDS_IN_A_DAY){\n                    //make aadat 2 months\n                    aadatTuhr = 30*2*MILLISECONDS_IN_A_DAY\n                    //mark that tuhr as a super long tuhr\n                    fixedDurations[i-1].type= DurationType.TUHR_BIGGER_THAN_6_MONTHS\n                }\n                adatsOfTuhrList+=AadatAfterIndexOfFixedDuration(aadatTuhr,i)\n            }else if(i==0 && mawjoodaTuhr!=-1L && !isMawjoodaFasid){\n                aadatTuhr = mawjoodaTuhr\n                //if aadat is bigger than or equal to 6 months\n                if(aadatTuhr>=30*6*MILLISECONDS_IN_A_DAY){\n                    //make aadat 2 months\n                    aadatTuhr = 30*2*MILLISECONDS_IN_A_DAY\n                }\n                adatsOfTuhrList+=AadatAfterIndexOfFixedDuration(aadatTuhr,i)\n            }\n\n        }else if(fixedDurations[i].type==DurationType.DAM_IN_NIFAS_PERIOD && fixedDurations[i].days>40){\n            //check if we have aadaat.\n            // first check for nifas aadat\n            val aadatNifas = fixedDurations[i].biggerThanForty!!.nifas\n            val istihazaAfter = fixedDurations[i].biggerThanForty!!.istihazaAfter\n\n            //if istihaza after is less than 15, so ther is no possibilty of daur,\n            // and it is followed by a Tuhr-e tamm, then we don't need aadats just yet\n            if((istihazaAfter<18*MILLISECONDS_IN_A_DAY && i != fixedDurations.lastIndex)||\n                    istihazaAfter<15*MILLISECONDS_IN_A_DAY){\n                //we do not need aadaat yet\n                //I'm going to run this with a bogus aadat cuz we need it for other stuff\n                dealWithIstihazaAfter(istihazaAfter,3*MILLISECONDS_IN_A_DAY,15*MILLISECONDS_IN_A_DAY,fixedDurations, i, endOfDaurIkhtilaf)\n                val nifasInfo = BiggerThanFortyNifas(aadatNifas, istihazaAfter, aadatHaz,aadatHaz, aadatTuhr, mutableListOf())\n                fixedDurations[i].biggerThanForty=nifasInfo\n            }else{\n                //we do need aadaat\n                //we don't need mawjoodah paki\n                if(aadatHaz==(-1).toLong() ||aadatTuhr==(-1).toLong()){\n                    //give error message\n                    if(language==\"english\"){\n                        window.alert(StringsOfLanguages.ENGLISH.errorEnterAadat)\n                    }else if(language==\"urdu\"){\n                        window.alert(StringsOfLanguages.URDU.errorEnterAadat)\n                    }\n                    return false\n                }\n\n                val haiz = aadatHaz\n                aadatHaz = dealWithIstihazaAfter(istihazaAfter,aadatHaz,aadatTuhr,fixedDurations, i, endOfDaurIkhtilaf)\n                adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i)\n                val nifasInfo = BiggerThanFortyNifas(aadatNifas, istihazaAfter, haiz,aadatHaz, aadatTuhr, mutableListOf())\n                fixedDurations[i].biggerThanForty=nifasInfo\n            }\n\n        }else if(fixedDurations[i].type==DurationType.DAM && fixedDurations[i].days>10){\n\n            //if we hit a dam bigger than 10, check to see if we have aadat\n            if(aadatHaz==-1L ||aadatTuhr==-1L){\n                //give error message\n                if(language==\"english\"){\n                    window.alert(StringsOfLanguages.ENGLISH.errorEnterAadat)\n                }else if(language==\"urdu\"){\n                    window.alert(StringsOfLanguages.URDU.errorEnterAadat)\n                }\n                return false\n            }\n            else{//we have aadat\n                if(mawjoodaTuhr==-1L && i<1){//if mawjoodah tuhr doesn't exist and the first period is bigger than 10\n                    //give error message\n                    if(language==\"english\"){\n                        window.alert(StringsOfLanguages.ENGLISH.errorEnterMawjoodaPaki)\n                    }else if(language==\"urdu\"){\n                        window.alert(StringsOfLanguages.URDU.errorEnterMawjoodaPaki)\n                    }\n                    return false\n                }else{\n\n                    //set the mawjoodah tuhr to previous tuhr, if it exists\n                    if(i>0){\n                        mawjoodaTuhr = fixedDurations[i-1].timeInMilliseconds + fixedDurations[i-1].istihazaAfter\n                    }\n                }\n                val mp:Long = mawjoodaTuhr\n                val gp:Long = aadatTuhr\n                val dm:Long = fixedDurations[i].timeInMilliseconds\n                val hz:Long = aadatHaz\n                val output:FiveSoortainOutput = fiveSoortain(mp, gp, dm, hz)\n\n                //deal with output\n                //update aadats\n                aadatHaz = output.haiz\n                adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i)\n\n                if(output.aadatTuhrChanges && ((i<1 && !isMawjoodaFasid) ||\n                            (i>0 && fixedDurations[i-1].type==DurationType.TUHR))){//and it exists\n                    //if mp is not tuhrefaasid or tuhr in haml\n                    aadatTuhr = mp\n                    //if aadat is bigger than or equal to 6 months\n                    if(aadatTuhr>=30*6*MILLISECONDS_IN_A_DAY){\n                        //make aadat 2 months\n                        aadatTuhr = 30*2*MILLISECONDS_IN_A_DAY\n                        //mark that tuhr as a super long tuhr\n                        //if it exists\n                        if(i>0){\n                            fixedDurations[i-1].type= DurationType.TUHR_BIGGER_THAN_6_MONTHS\n                        }\n                    }\n                    adatsOfTuhrList+=AadatAfterIndexOfFixedDuration(aadatTuhr,i)\n\n                }\n                val hall =  BiggerThanTenDm(mp,gp,dm,hz, output.soorat, output.istihazaBefore,\n                    output.haiz, output.istihazaAfter, aadatHaz,aadatTuhr, mutableListOf())\n                fixedDurations[i].biggerThanTen=hall\n\n                aadatHaz = dealWithIstihazaAfter(output.istihazaAfter,aadatHaz,aadatTuhr,fixedDurations, i, endOfDaurIkhtilaf)\n                adatsOfHaizList+=AadatAfterIndexOfFixedDuration(aadatHaz,i) //this is the second aadat that goes to this i\n\n            }\n        }\n    }\n    return true\n}\n\nfun dealWithIstihazaAfter(istihazaAfter: Long, aadatHaz: Long, aadatTuhr: Long, fixedDurations: MutableList<FixedDuration>, i: Int, daurHaizIkhtilaf: Boolean):Long {\n    //this basically does 2 things:\n    // it returns the aadat of haiz at the end of istimrar, if it ended at haiz\n    // it adds the right amount of istehaza to the next tuhr, and marks it as fasid, if it ended at istehaza.\n\n    //if istihazaAfter is bigger than addatTuhr +3, run daur\n    var returnAadatHaiz = aadatHaz\n    if (istihazaAfter>=aadatTuhr+(3*MILLISECONDS_IN_A_DAY)){\n        //find  remainder\n\n        val remainder = istihazaAfter%(aadatHaz+aadatTuhr)\n        if(daurHaizIkhtilaf && remainder+aadatHaz<=10*MILLISECONDS_IN_A_DAY){//ikhtlafi masla\n            returnAadatHaiz = remainder+aadatHaz\n        }else if (remainder<aadatTuhr + (3*MILLISECONDS_IN_A_DAY)){//it ended in tuhr or right between haz and tuhr\n            //add istihazaAfter to next Tuhur mark it as fasid\n            //if it exists\n            //if remainder is not equal to zero\n            if(i<fixedDurations.lastIndex && remainder>0 &&\n                (fixedDurations[i+1].type==DurationType.TUHR||\n                        fixedDurations[i+1].type==DurationType.TUHREFAASID)){//there is a tuhur after this\n                fixedDurations[i+1].type=DurationType.TUHREFAASID\n                fixedDurations[i+1].istihazaAfter=remainder\n            }else if(i<fixedDurations.lastIndex && remainder>0 &&\n                (fixedDurations[i+1].type==DurationType.TUHR_IN_HAML||\n                        fixedDurations[i+1].type==DurationType.TUHREFAASID_IN_HAML)){\n                //there is a tuhur after this\n                fixedDurations[i+1].type=DurationType.TUHREFAASID_IN_HAML\n                fixedDurations[i+1].istihazaAfter=remainder\n            }\n\n\n        }else{//it ended in less than haiz\n            //change aadatHaiz\n            returnAadatHaiz = remainder-aadatTuhr\n\n        }\n\n    }else if(istihazaAfter==0L){\n\n    }else{\n\n        //else add istihazaAfter to next Tuhr, mark it as fasid\n        //if it exists\n        if(i<fixedDurations.size-1 &&\n            (fixedDurations[i+1].type==DurationType.TUHR||\n                    fixedDurations[i+1].type==DurationType.TUHREFAASID)){\n            fixedDurations[i+1].type=DurationType.TUHREFAASID\n            fixedDurations[i+1].istihazaAfter = istihazaAfter\n        }else if(i<fixedDurations.size-1 &&\n            (fixedDurations[i+1].type==DurationType.TUHR_IN_HAML||\n                    fixedDurations[i+1].type==DurationType.TUHREFAASID_IN_HAML)){\n            fixedDurations[i+1].type=DurationType.TUHREFAASID_IN_HAML\n            fixedDurations[i+1].istihazaAfter = istihazaAfter\n        }\n\n\n    }\n    return returnAadatHaiz\n}\n\nclass FiveSoortainOutput (\n    val soorat: Soortain,\n    val istihazaBefore: Long,\n    val haiz:Long,\n    val istihazaAfter: Long,\n    val aadatTuhrChanges:Boolean\n)\n\nfun fiveSoortain(mp: Long, gp: Long, dm: Long, hz:Long):FiveSoortainOutput{\n    val soorat: Soortain\n    val istihazaBefore:Long\n    val haiz:Long\n    val istihazaAfter:Long\n    val aadatTuhrChanges:Boolean // 0 for gp, 1 for mp (change)\n\n    if (mp <= gp) {    //Qism A\n        if (hz <= dm - (gp - mp)) {\t                  // soorat A-1\n            // if GP==MP, we would output 0 istihaza, not good!\n            // 0 istihaza is ok, for now. just no negative numbers, please\n            soorat = Soortain.A_1\n            istihazaBefore = gp-mp\n            haiz = hz\n            istihazaAfter = dm-(gp-mp)-hz\n            aadatTuhrChanges = false\n        }\n        else if (3*MILLISECONDS_IN_A_DAY <= dm-(gp-mp) && dm-(gp-mp) < hz) {  // soorat A-2\n            soorat = Soortain.A_2\n            istihazaBefore = gp-mp\n            haiz = dm-(gp-mp)\n            istihazaAfter = 0\n            aadatTuhrChanges = false\n        }\n        else{ //if (dm - (gp - mp) < 3*MILLISECONDS_IN_A_DAY) {                  // soorat A-3\n            soorat = Soortain.A_3\n            istihazaBefore = 0\n            haiz = hz\n            istihazaAfter = dm-hz\n            aadatTuhrChanges = true\n        }\n    }else {\t// mp>gp qism B\n        if (hz - (mp - gp) >= 3*MILLISECONDS_IN_A_DAY) {\t\t\t\t\t\t\t// soorat B-2\n            soorat = Soortain.B_2\n            istihazaBefore = 0\n            haiz = hz-(mp-gp)\n            istihazaAfter = dm-(hz-(mp-gp))\n            aadatTuhrChanges = true\n        }else{ //if (hz - (mp - gp) < 3*MILLISECONDS_IN_A_DAY) {\t\t\t\t\t\t// soorat B-3\n            soorat = Soortain.B_3\n            istihazaBefore = 0\n            haiz = hz\n            istihazaAfter = dm-hz\n            aadatTuhrChanges = true\n        }\n    }\n  return FiveSoortainOutput(soorat,istihazaBefore,haiz,istihazaAfter, aadatTuhrChanges)\n}\nfun checkForAyyameQabliyya(fixedDurations: MutableList<FixedDuration>,adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>,adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>, inputtedMawjoodaTuhr: Long?, ayyameQabliyyaIkhtilaf: Boolean){\n    if(!ayyameQabliyyaIkhtilaf){\n        //figure out aadat for the last fixed duration\n        //for that, we need aadats befor it\n        //we need to find out what aadats were, at this point.\n        var hz = adatsOfHaizList[0].aadat\n        var gp = adatsOfTuhrList[0].aadat\n        for(adat in adatsOfHaizList){\n            if(adat.index<fixedDurations.lastIndex){\n                hz= adat.aadat\n            }else{\n                break\n            }\n        }\n        for(adat in adatsOfTuhrList){\n            if(adat.index<fixedDurations.lastIndex){\n                gp= adat.aadat\n            }else{\n                break\n            }\n        }\n        //now we have aadaat\n        var mp = inputtedMawjoodaTuhr\n        if(fixedDurations.size>1){\n            mp = fixedDurations[fixedDurations.size-2].timeInMilliseconds+\n                    fixedDurations[fixedDurations.size-2].istihazaAfter\n        }\n\n        if(mp!=null&&mp!=-1L&&hz!=-1L&&gp!=-1L){\n            val ayyaameqabliyyah = gp-mp\n            if(ayyaameqabliyyah+hz>10*MILLISECONDS_IN_A_DAY &&\n                ayyaameqabliyyah<18*MILLISECONDS_IN_A_DAY&&\n                fixedDurations.last().timeInMilliseconds<ayyaameqabliyyah){//hasn't entered into aadat yet\n                fixedDurations.last().type = DurationType.ISTEHAZA_AYYAMEQABLIYYA\n                fixedDurations.last().ayyameqabliyya=AyyameQabliyya(ayyaameqabliyyah, hz, gp)\n            }\n\n        }\n    }else{\n        //do nothing\n    }\n\n\n}\nfun addDurationsToDams(fixedDurations: MutableList<FixedDuration>, endOfDaurIkhtilaf:Boolean){\n    //What this function does?\n    //It creates a list of durations associated with each fixed duration\n    //each duration contains it's type, it's starting date, and it's duration\n    //so, for example 15B could have a first 3 days of istihaza before, then\n    // 7 days of haiz, then 3 days of istihaza after. this will make all those duration.\n\n    for (i in fixedDurations.indices){\n        if(fixedDurations[i].type==DurationType.DAM && //as this is the last dam, less than 3 can be made haiz\n            fixedDurations[i].days>10 &&\n            fixedDurations[i].biggerThanTen!!.qism==Soortain.A_3 &&\n            i==fixedDurations.lastIndex){//A-3 switching to aadat\n            val diffInPakis = fixedDurations[i].biggerThanTen!!.gp-fixedDurations[i].biggerThanTen!!.mp\n            if(fixedDurations[i].timeInMilliseconds>=diffInPakis){\n                fixedDurations[i].biggerThanTen!!.durationsList += Duration(DurationType.ISTIHAZA_BEFORE,diffInPakis,fixedDurations[i].startDate)\n                if(diffInPakis > fixedDurations[i].timeInMilliseconds){\n                    val haizStartDate = addTimeToDate(fixedDurations[i].startDate, diffInPakis)\n                    val haizDuration = fixedDurations[i].timeInMilliseconds-diffInPakis\n                    fixedDurations[i].biggerThanTen!!.durationsList += Duration(DurationType.LESS_THAN_3_HAIZ,haizDuration, haizStartDate)\n                }\n                return\n            }\n        }\n        if((fixedDurations[i].type==DurationType.DAM||\n                    fixedDurations[i].type==DurationType.DAM_MUBTADIA)\n            && fixedDurations[i].days>10){\n\n            //bigger than 10\n            val istihazaBefore = fixedDurations[i].biggerThanTen!!.istihazaBefore\n            val istihazaBeforeStartDate:Date = fixedDurations[i].startDate\n\n            if (istihazaBefore>0){\n                fixedDurations[i].biggerThanTen!!.durationsList += Duration(DurationType.ISTIHAZA_BEFORE,istihazaBefore,istihazaBeforeStartDate)\n            }\n            val haizStartDate = addTimeToDate(istihazaBeforeStartDate, (istihazaBefore))\n            val haiz = fixedDurations[i].biggerThanTen!!.haiz\n            fixedDurations[i].biggerThanTen!!.durationsList += Duration(DurationType.HAIZ,haiz,haizStartDate)\n\n            val istihazaAfterStartDate = addTimeToDate(haizStartDate, (haiz))\n            val istihazaAfter = fixedDurations[i].biggerThanTen!!.istihazaAfter\n\n            var aadatTuhr = fixedDurations[i].biggerThanTen!!.aadatTuhr\n            var aadatHaz = fixedDurations[i].biggerThanTen!!.aadatHaiz\n\n            //this is calculating iztirari aadaat in case we don't have aadat for mubtadia\n            if(aadatTuhr==-1L){\n                if(aadatHaz==-1L){\n                    aadatHaz=10*MILLISECONDS_IN_A_DAY\n                }\n                aadatTuhr=30*MILLISECONDS_IN_A_DAY-haiz\n            }\n\n            if(istihazaAfter>0){\n                if(istihazaAfter>=aadatTuhr+3*MILLISECONDS_IN_A_DAY||\n                    (istihazaAfter>aadatTuhr &&\n                            istihazaAfter<aadatTuhr+3*MILLISECONDS_IN_A_DAY &&\n                            i==fixedDurations.lastIndex)){\n\n                    //daur\n                    //find quotient and remainder\n                    var remainder = istihazaAfter%(haiz+aadatTuhr)\n                    var quotient = ((istihazaAfter-remainder)/(haiz+aadatTuhr))\n                    if(endOfDaurIkhtilaf && remainder+aadatHaz<=10*MILLISECONDS_IN_A_DAY){\n                        quotient--\n                        remainder += aadatTuhr + aadatHaz\n                    }\n                    var aadatTuhrStartDate:Date = istihazaAfterStartDate\n                    var aadatTuhrEndDate:Date\n                    var aadatHaizEndDate:Date\n\n                    for(j in 1 .. quotient){\n                        //add a quotient number of tuhr/hazes\n                        aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,(aadatTuhr))\n                        aadatHaizEndDate = addTimeToDate(aadatTuhrEndDate,(haiz))\n\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,aadatTuhr,aadatTuhrStartDate)\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.HAIZ,haiz,aadatTuhrEndDate)\n                        aadatTuhrStartDate=aadatHaizEndDate\n                    }\n                    //now deal with remiander\n\n\n                    if(remainder==0L){\n                        //there is nothing more to be added\n                    }else if(remainder>aadatHaz+aadatTuhr){//this is in case of the ikhtlafi masla\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,aadatTuhr,aadatTuhrStartDate)\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.HAIZ,remainder-aadatTuhr,addTimeToDate(aadatTuhrStartDate,aadatTuhr))\n                    }else if(remainder>aadatTuhr\n                        && remainder<aadatTuhr+3*MILLISECONDS_IN_A_DAY\n                        && i==fixedDurations.lastIndex){//it is the last period, and ends in less than 3 haiz\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,aadatTuhr,aadatTuhrStartDate)\n                        aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,(aadatTuhr))\n                        val lastHaiz = remainder-aadatTuhr\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.LESS_THAN_3_HAIZ,lastHaiz,aadatTuhrEndDate)\n                    }else if(remainder<aadatTuhr+3*MILLISECONDS_IN_A_DAY){\n                        //it ends in tuhr\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,remainder,aadatTuhrStartDate)\n                    }else{\n                        //there is full tuhur, followed by a partial haiz\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,aadatTuhr,aadatTuhrStartDate)\n                        aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,(aadatTuhr))\n                        val lastHaiz = remainder-aadatTuhr\n                        fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.HAIZ,lastHaiz,aadatTuhrEndDate)\n                    }\n\n                }else{\n                    //no daur\n                    fixedDurations[i].biggerThanTen!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,istihazaAfter,istihazaAfterStartDate)\n\n                }\n            }\n\n        }else if(fixedDurations[i].type==DurationType.DAM_IN_NIFAS_PERIOD&&fixedDurations[i].days>40){\n            //bigger than 40 nifas\n            val aadatNifas = fixedDurations[i].biggerThanForty!!.nifas\n            //make nifas period\n            fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.NIFAS,aadatNifas,fixedDurations[i].startDate)\n            //now deal with istihaza after\n            //I'm copy/pasting from above, with minor changes\n\n            val istihazaAfterStartDate = addTimeToDate(fixedDurations[i].startDate, (aadatNifas))\n            val istihazaAfter = fixedDurations[i].biggerThanForty!!.istihazaAfter\n            var aadatTuhr = fixedDurations[i].biggerThanForty!!.aadatTuhr\n            var aadatHaz = fixedDurations[i].biggerThanForty!!.haiz\n\n            //this ought to fix if we got here without an aadat. persumably, we did it cuz there was no daur\n            if(aadatTuhr==-1L){\n                aadatTuhr=15*MILLISECONDS_IN_A_DAY\n            }\n            if(aadatHaz==-1L){\n                aadatHaz=3*MILLISECONDS_IN_A_DAY\n            }\n\n            if(istihazaAfter>0){//if there is istehaza after\n                if(istihazaAfter>=aadatTuhr+3*MILLISECONDS_IN_A_DAY||\n                    (istihazaAfter>aadatTuhr &&\n                            istihazaAfter<aadatTuhr+3*MILLISECONDS_IN_A_DAY &&\n                            i == fixedDurations.lastIndex)){\n\n                    //daur\n                    //find quotient and remainder\n                    val remainder = istihazaAfter%(aadatHaz+aadatTuhr)\n                    val quotient = ((istihazaAfter-remainder)/(aadatHaz+aadatTuhr))\n                    var aadatTuhrStartDate:Date = istihazaAfterStartDate\n                    var aadatTuhrEndDate:Date\n                    var aadatHaizEndDate:Date\n\n                    for(j in 1 .. quotient){\n                        //add a quotient number of tuhr/hazes\n                        aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,(aadatTuhr))\n                        aadatHaizEndDate = addTimeToDate(aadatTuhrEndDate,(aadatHaz))\n\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,aadatTuhr,aadatTuhrStartDate)\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.HAIZ,aadatHaz,aadatTuhrEndDate)\n                        aadatTuhrStartDate=aadatHaizEndDate\n                    }\n                    //now deal with remiander\n                    if(remainder==0L){\n                        //there is nothing more to be added\n                    }else if(remainder>aadatTuhr\n                        && remainder<aadatTuhr+3*MILLISECONDS_IN_A_DAY\n                        && i==fixedDurations.lastIndex){//it is the last period, and ends in less than 3 haiz\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,aadatTuhr,aadatTuhrStartDate)\n                        aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,(aadatTuhr))\n                        val lastHaiz = remainder-aadatTuhr\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.LESS_THAN_3_HAIZ,lastHaiz,aadatTuhrEndDate)\n                    }else if(remainder<aadatTuhr+3*MILLISECONDS_IN_A_DAY){\n                        //it ends in tuhr\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,remainder,aadatTuhrStartDate)\n                    }else{\n                        //there is full tuhur, followed by a partial haiz\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,aadatTuhr,aadatTuhrStartDate)\n                        aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,(aadatTuhr))\n                        val lastHaiz = remainder-aadatTuhr\n                        fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.HAIZ,lastHaiz,aadatTuhrEndDate)\n                    }\n\n                }else{\n                    //no daur\n                    fixedDurations[i].biggerThanForty!!.durationsList+=Duration(DurationType.ISTIHAZA_AFTER,istihazaAfter,istihazaAfterStartDate)\n\n                }\n            }\n\n        }\n        if(fixedDurations[i].type==DurationType.TUHREFAASID||\n            fixedDurations[i].type==DurationType.TUHREFAASID_MUBTADIA){\n            //check if it has istehaza attached\n\n            if(fixedDurations[i].istihazaAfter>0){\n                if(fixedDurations[i].type==DurationType.TUHREFAASID){\n                    fixedDurations[i].type = DurationType.TUHREFAASID_WITH_ISTEHAZA\n                }else if( fixedDurations[i].type==DurationType.TUHREFAASID_MUBTADIA){\n                    fixedDurations[i].type=DurationType.TUHREFAASID_MUBTADIA_WITH_ISTEHAZA\n                }\n            }\n        }\n    }\n\n}\n\nfun getHaizDatesList(fixedDurations: MutableList<FixedDuration>):MutableList<Entry>{\n    val hazDatesList = mutableListOf<Entry>()\n\n    for(fixedDuration in fixedDurations){\n        if(fixedDuration.type==DurationType.DAM && fixedDuration.days <=10){\n            //less than 3 were eliminated earlier\n            hazDatesList+=Entry(fixedDuration.startDate,fixedDuration.endDate)\n        }else if(fixedDuration.type==DurationType.DAM && fixedDuration.days>10){\n            for(duration in fixedDuration.biggerThanTen!!.durationsList){\n                if(duration.type==DurationType.HAIZ\n                    ||duration.type == DurationType.LESS_THAN_3_HAIZ){\n                    hazDatesList+=Entry(duration.startTime,duration.endDate)\n                }\n            }\n        }else if(fixedDuration.type==DurationType.DAM_IN_NIFAS_PERIOD && fixedDuration.days<=40){\n            hazDatesList+=Entry(fixedDuration.startDate,fixedDuration.endDate)\n        }else if(fixedDuration.type==DurationType.DAM_IN_NIFAS_PERIOD && fixedDuration.days>40){\n            for(duration in fixedDuration.biggerThanForty!!.durationsList){\n                if(duration.type==DurationType.HAIZ\n                    ||duration.type == DurationType.NIFAS\n                    ||duration.type == DurationType.LESS_THAN_3_HAIZ){\n                    hazDatesList+=Entry(duration.startTime,duration.endDate)\n                }\n            }\n        }\n    }\n\n    return hazDatesList\n\n}\nfun addWiladat(fixedDurations: MutableList<FixedDuration>, pregnancy: Pregnancy){\n    for(i in fixedDurations.indices){\n        if(fixedDurations[i].endDate.getTime()>pregnancy.birthTime.getTime()||\n                fixedDurations[i].type==DurationType.DAM_IN_NIFAS_PERIOD){\n            val newFixedDuration = FixedDuration(DurationType.WILADAT_ISQAT, 0L, mutableListOf(),startDate = pregnancy.birthTime)\n            fixedDurations.add(i,newFixedDuration)\n            break\n        }\n        if(i==fixedDurations.lastIndex){\n            //if we got to the last one without anything happening, just add it anyway\n            val newFixedDuration = FixedDuration(DurationType.WILADAT_ISQAT, 0L, mutableListOf(),startDate = pregnancy.birthTime)\n            fixedDurations.add(i+1,newFixedDuration)\n        }\n    }\n}\nfun addStartOfPregnancy(fixedDurations: MutableList<FixedDuration>,pregnancy: Pregnancy){\n    //add start of pregnancy in fixed periods\n    for(i in fixedDurations.indices){\n        if(fixedDurations[i].endDate.getTime()>pregnancy.pregStartTime.getTime()){\n            val newFixedDuration= FixedDuration(DurationType.HAML,0L, mutableListOf(), startDate = pregnancy.pregStartTime)\n            fixedDurations.add(i,newFixedDuration)\n            break\n        }\n        if(i==fixedDurations.size-1){\n            //if we got to the last one without anything happening, just add it anyway\n            val newFixedDuration= FixedDuration(DurationType.HAML,0L, mutableListOf(), startDate = pregnancy.pregStartTime)\n            fixedDurations.add(i,newFixedDuration)\n        }\n    }\n\n}\n\n\nfun generatInfoForCompareTable(listOfLists: MutableList<List<Entry>>):InfoForCompareTable {\n    var earliestStartTime = listOfLists[0][0].startTime\n    var latestEndTime=listOfLists[0].last().endTime\n    for (list in listOfLists) {\n        if (list[0].startTime.getTime() <earliestStartTime.getTime())\n            earliestStartTime = list[0].startTime\n        if (list[list.lastIndex].endTime.getTime() > latestEndTime.getTime())\n            latestEndTime = list.last().endTime\n    }\n    val firstLast = Entry(earliestStartTime, latestEndTime)\n\n    val ndays = ((latestEndTime.getTime()-earliestStartTime.getTime())/MILLISECONDS_IN_A_DAY).toInt()\n\n    val headerList = mutableListOf<Date>()\n    for(day in 0..(ndays)){//header list is one longer than ndays\n        val dateOfDay = addTimeToDate(firstLast.startTime, (day)*MILLISECONDS_IN_A_DAY)\n        if(headerList.size<ndays+1){\n            headerList+=dateOfDay\n        }\n    }\n\n    val listOfColorsOfDaysList = mutableListOf<MutableList<Int>>()\n    for (list in listOfLists){//in the lists\n        val colorsOfDaysList = mutableListOf<Int>()\n\n        for(i in 0 until ndays){//go through each day\n            val header = headerList[i]\n            //check if this date is in between a startTime and an endtime\n            for(entry in list) {//check the list to see if it is a haiz day\n                if (header.getTime() >= entry.startTime.getTime() && header.getTime() < entry.endTime.getTime()) {\n                    //that date is a haiz\n                    colorsOfDaysList +=1\n                    break\n                }else if (header.getTime() < entry.startTime.getTime()) {\n                    //that date is a tuhur\n                    colorsOfDaysList +=0\n                    break\n                }else if(header.getTime()>=list.last().endTime.getTime()){\n                    colorsOfDaysList +=0\n                    break\n                }\n            }\n        }\n        listOfColorsOfDaysList +=colorsOfDaysList\n    }\n\n    //this bit describes which days are yaqeeni paki, yaqeeni napaki, or shakk\n    val resultColors = mutableListOf<Int>()\n    for(day in listOfColorsOfDaysList[0].indices){\n        //for each day\n        var compare = 0\n        for(list in listOfColorsOfDaysList){\n            val color = list[day]\n            compare +=color\n        }\n        val maxColor = listOfColorsOfDaysList.size\n        val minColor = 0\n        resultColors += when (compare) {\n            minColor -> 0 //yaqeeni paki\n            maxColor ->  2 //yaqeeni napaki\n            else -> 1//ayyam-e-shakk\n        }\n    }\n\n    return InfoForCompareTable(headerList,listOfColorsOfDaysList,resultColors)\n\n}\n\n//fun getDifferenceFromMultiple (listOfLists:List<List<Entry>>):String{\n//    //find out number of lists\n//    var numberOfLists = listOfLists.size\n//\n//    //step 1: merge them into one list\n//    var dateTypeList = mutableListOf<DateTypeList>()\n//\n//    for (list in listOfLists){\n//        for(date in list){\n//            dateTypeList += DateTypeList(date.startTime,DateTypes.START)\n//            dateTypeList += DateTypeList(date.endTime,DateTypes.END)\n//        }\n//    }\n//\n//    //step 2: order list by date\n//    dateTypeList.sortBy { it.date.getTime() }\n//\n//    //step 3: create a counter\n//    var counter = 0\n//\n//    //step 4: step through the list, create an output list\n//    var counterMin = 0 //at counter min, it is yaqeeni paki\n//    var counterMax = numberOfLists //at counter max, it is yaqeeni na-paki\n//    //all other counter values are ayyam-e-shakk\n//\n//    var outputList = mutableListOf<DateTypeList>()\n//    for(dateType in dateTypeList){\n//        //plus 1 for every start time, -1 for every end time\n//        if(dateType.type==DateTypes.START){\n//            counter++\n//        }else{//the type is end\n//            counter--\n//        }\n//\n//        if(counter == counterMin){\n//            outputList += DateTypeList(dateType.date, DateTypes.YAQEENI_PAKI)\n//        }else if(counter == counterMax){//\n//            outputList += DateTypeList(dateType.date, DateTypes.YAQEENI_NA_PAKI)\n//        }else{\n//            outputList += DateTypeList(dateType.date, DateTypes.AYYAAM_E_SHAKK)\n//        }\n//    }\n//\n//    //create a people-friendly version of output list\n//    println(\"starting peoplefriendly\")\n//    var str = \"\"\n//    var durationTypes = mutableListOf<DurationTypes>()\n//    var i=0\n//\n//    while (i<outputList.size-1){\n//        var startTime = outputList[i].date\n//        var endTime = outputList[i+1].date\n//        if(startTime.getTime()!=endTime.getTime()){//to prevent 0 duration\n//            //in more than 1, there will be repeated ayyam-e-shakk. this is to prevent that\n//            if(outputList[i].type!=DateTypes.AYYAAM_E_SHAKK){\n//                durationTypes += DurationTypes(startTime,endTime,outputList[i].type)\n//            }else{//It is ayyame shakk\n//                //check all next ones to until there is a non aayam-e-shakk\n//                var j = i\n//                while(j<outputList.size-1){\n//                    if(outputList[j+1].type!=DateTypes.AYYAAM_E_SHAKK){\n//                        break\n//                    }\n//                    j++\n//                }\n//                endTime = outputList[j+1].date\n//                i=j\n//                durationTypes += DurationTypes(startTime,endTime,outputList[i].type)\n//            }\n//        }\n//\n//        i++\n//    }\n//    println(\"after a while\")\n//    println(durationTypes)\n//\n//    str += generateGetDifferenceString(durationTypes)\n//    println(str)\n//\n//    return str\n//}\n\nfun getDifferenceFromMultiple (listOfLists:List<List<Entry>>):String{\n    //find out number of lists\n    val numberOfLists = listOfLists.size\n\n    //step 1: merge them into one list\n    val dateTypeList = mutableListOf<DateTypeList>()\n\n    for (list in listOfLists){\n        for(date in list){\n            dateTypeList += DateTypeList(date.startTime,DateTypes.START)\n            dateTypeList += DateTypeList(date.endTime,DateTypes.END)\n        }\n    }\n\n    //step 2: order list by date\n    //since we want to prioritize khurooj, we should reverse order\n    dateTypeList.sortBy { it.date.getTime() }\n\n    //step 3: create a counter\n    var counter = 0\n\n    //step 4: step through the list, create an output list\n    val counterMin = 0 //at counter min, it is yaqeeni paki\n    val counterMax = numberOfLists //at counter max, it is yaqeeni na-paki\n    //all other counter values are ayyam-e-shakk\n\n    val outputList = mutableListOf<DateTypeList>()\n    for(dateType in dateTypeList){\n        //plus 1 for every start time, -1 for every end time\n        if(dateType.type==DateTypes.START){\n            counter++\n            //this is definitely a dukhool, and can lead to yaqeeni napaki\n            //this cannot be yaqeeni paki, or khurooj\n            //though it could simultaneously be a khurooj some other way\n            if(counter==counterMax){\n                outputList+=DateTypeList(dateType.date, DateTypes.YAQEENI_NA_PAKI)\n            }else{//it is dukhool shakk\n                outputList+=DateTypeList(dateType.date, DateTypes.AYYAAM_E_SHAKK_DUKHOOL)\n            }\n        }else{//the type is end\n            counter--\n            //this is a khurooj or yaqeeni paki\n            if(counter==counterMin){\n                outputList+=DateTypeList(dateType.date, DateTypes.YAQEENI_PAKI)\n            }else{\n                outputList+=DateTypeList(dateType.date, DateTypes.AYYAAM_E_SHAKK_KHUROOJ)\n            }\n        }\n    }\n\n    //create a people-friendly version of output list\n    var str = \"\"\n    val durationTypes = mutableListOf<DurationTypes>()\n    var i=0\n\n    while (i<outputList.size-1){\n        val startTime = outputList[i].date\n        val endTime = outputList[i+1].date\n        durationTypes += DurationTypes(startTime,endTime,outputList[i].type)\n        i++\n    }\n    //clean up the junk in durationTypes list now\n//    var j = 0\n//    while (j <= durationTypes.lastIndex){\n//        var duration=durationTypes[j]\n//        //remove things with duration 0\n//        if(duration.endTime.getTime()==duration.startTime.getTime()){\n//            durationTypes.removeAt(j)\n//            j--\n//        }\n//        j++\n//    }\n//    //remove things wherebthe next one is the same type as this one.\n//    //if there is a next one\n//    else if(j+1<durationTypes.size && durationTypes[j+1].type==duration.type){\n//        durationTypes.add(j, DurationTypes(duration.startTime, durationTypes[i+1].endTime, duration.type))\n//        durationTypes.removeAt(j+1)\n//        durationTypes.removeAt(j+1)\n//    }\n\n\n    str += generateGetDifferenceString(durationTypes)\n\n    return str\n}\n\nfun calculateEndingOutputValues(fixedDurations: MutableList<FixedDuration>,\n                                preMaslaValues: PreMaslaValues,\n                                adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>,\n                                adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>,\n                                aadatNifas:Long?, typesOfMasla: TypesOfMasla):EndingOutputValues{\n//    println(\"calc ending output\")\n    val inputtedAadatTuhr = preMaslaValues.inputtedAadatTuhr\n    val inputtedMawjoodaTuhr = preMaslaValues.inputtedMawjoodahTuhr\n    val isMawjoodaFasid = preMaslaValues.isMawjoodaFasid\n\n    val filHaalPaki = calculateFilHaal(fixedDurations,adatsOfHaizList,adatsOfTuhrList,inputtedMawjoodaTuhr)\n    val aadaat = finalAadats(fixedDurations, inputtedAadatTuhr, inputtedMawjoodaTuhr, isMawjoodaFasid, adatsOfHaizList, adatsOfTuhrList)\n\n    val futureDates = futureDatesOfInterest(fixedDurations, aadaat, filHaalPaki, aadatNifas, adatsOfHaizList, adatsOfTuhrList, inputtedMawjoodaTuhr, typesOfMasla)\n    return EndingOutputValues(filHaalPaki,aadaat,futureDates)\n}\n\nfun futureDatesOfInterest(fixedDurations: MutableList<FixedDuration>,\n                          aadats: AadatsOfHaizAndTuhr,\n                          fillHaalPaki:Boolean?,\n                          aadatNifas: Long?,\n                          adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>,\n                          adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>,\n                          inputtedMawjoodaTuhr: Long?, typesOfMasla: TypesOfMasla):MutableList<FutureDateType>{\n//    println(\"got to future dates\")\n    val futureDatesList = mutableListOf<FutureDateType>()\n//    println(fixedDurations.last())\n\n    //bigger than 10\n    if(fixedDurations.last().days>10&&fixedDurations.last().type==DurationType.DAM) {\n//        println(\"at least here!\")\n\n        val lastDuration = fixedDurations.last().biggerThanTen!!.durationsList.last()\n        val qism = fixedDurations.last().biggerThanTen!!.qism\n        //A-3\n        if(qism==Soortain.A_3){\n//            println(\"1 got here\")\n//            println(fixedDurations.last())\n            val mp = fixedDurations.last().biggerThanTen!!.mp\n            val gp = fixedDurations.last().biggerThanTen!!.gp\n            val startOfAadat = addTimeToDate(fixedDurations.last().startDate, gp-mp)//this is start of aadat\n            if(startOfAadat.getTime()>fixedDurations.last().endDate.getTime()){//A-3 hasn't entered aadat yet , but could experience duar!\n                futureDatesList+= FutureDateType(startOfAadat,TypesOfFutureDates.A3_CHANGING_TO_A2)\n                if((lastDuration.type==DurationType.HAIZ &&\n                            lastDuration.timeInMilliseconds<aadats.aadatHaiz)||\n                    lastDuration.type==DurationType.LESS_THAN_3_HAIZ){\n//                    println(\"5\")\n                    val endDateOfHaiz = addTimeToDate(lastDuration.startTime, aadats.aadatHaiz)\n                    if (endDateOfHaiz.getTime()<startOfAadat.getTime()){\n//                        println(\"6\")\n                        futureDatesList+=FutureDateType(endDateOfHaiz,TypesOfFutureDates.END_OF_AADAT_HAIZ)\n                        if(typesOfMasla!=TypesOfMasla.MUBTADIA){\n                            futureDatesList+=FutureDateType(endDateOfHaiz,TypesOfFutureDates.IC_FORBIDDEN_DATE)\n                        }\n                        futureDatesList+=FutureDateType(endDateOfHaiz,TypesOfFutureDates.IHTIYATI_GHUSL)\n                    }\n                    if(lastDuration.type==DurationType.LESS_THAN_3_HAIZ){\n                        val threeDays=addTimeToDate(lastDuration.startTime, 3*MILLISECONDS_IN_A_DAY)\n//                        println(\"2\")\n                        futureDatesList+=FutureDateType(threeDays,TypesOfFutureDates.BEFORE_THREE_DAYS)\n                    }\n                }else if(lastDuration.type==DurationType.ISTIHAZA_AFTER&& lastDuration.timeInMilliseconds<aadats.aadatTuhr){\n                    val endDateOfTuhr = addTimeToDate(fixedDurations.last().biggerThanTen!!.durationsList.last().startTime, aadats.aadatTuhr)\n                    if(endDateOfTuhr.getTime()<startOfAadat.getTime()){\n//                        println(\"3\")\n                        futureDatesList+=FutureDateType(endDateOfTuhr,TypesOfFutureDates.END_OF_AADAT_TUHR)\n                    }\n                }else if(lastDuration.type==DurationType.HAIZ&&lastDuration.timeInMilliseconds==aadats.aadatHaiz){\n                    val endDateOfTuhr = addTimeToDate(fixedDurations.last().biggerThanTen!!.durationsList.last().endDate, aadats.aadatTuhr)\n                    if(endDateOfTuhr.getTime()<startOfAadat.getTime()){\n//                        println(\"4\")\n                        futureDatesList+=FutureDateType(endDateOfTuhr,TypesOfFutureDates.END_OF_AADAT_TUHR)\n                    }\n                }else if(lastDuration.type==DurationType.ISTIHAZA_AFTER&&lastDuration.timeInMilliseconds==aadats.aadatTuhr){\n                    val endDateOfHaiz = addTimeToDate(fixedDurations.last().biggerThanTen!!.durationsList.last().endDate, aadats.aadatHaiz)\n                    if(endDateOfHaiz.getTime()<startOfAadat.getTime()){\n//                        println(\"7\")\n                        val threeDays = addTimeToDate(fixedDurations.last().biggerThanTen!!.durationsList.last().endDate, 3*MILLISECONDS_IN_A_DAY)\n                        futureDatesList+=FutureDateType(threeDays,TypesOfFutureDates.BEFORE_THREE_DAYS)\n                        futureDatesList+=FutureDateType(endDateOfHaiz,TypesOfFutureDates.END_OF_AADAT_HAIZ)\n                        if(typesOfMasla!=TypesOfMasla.MUBTADIA) {\n                            futureDatesList += FutureDateType(endDateOfHaiz, TypesOfFutureDates.IC_FORBIDDEN_DATE)\n                        }\n                        futureDatesList+=FutureDateType(endDateOfHaiz,TypesOfFutureDates.IHTIYATI_GHUSL)\n                    }\n                }\n\n            }else if(startOfAadat.getTime()<=fixedDurations.last().endDate.getTime()){//A-3 entered into aadat\n                if(lastDuration.type==DurationType.HAIZ){\n                    val lessThanThreeDate = addTimeToDate(lastDuration.startTime, 3*MILLISECONDS_IN_A_DAY)\n                    futureDatesList+= FutureDateType(lessThanThreeDate,TypesOfFutureDates.BEFORE_THREE_DAYS_MASLA_WILL_CHANGE)\n                }else{\n                    val lessThanThreeDate = addTimeToDate(lastDuration.endDate, 3*MILLISECONDS_IN_A_DAY)\n                    futureDatesList+= FutureDateType(lessThanThreeDate,TypesOfFutureDates.BEFORE_THREE_DAYS_MASLA_WILL_CHANGE)\n                }\n                val endofHaiz = addTimeToDate(startOfAadat, fixedDurations.last().biggerThanTen!!.haiz)\n                futureDatesList+= FutureDateType(endofHaiz, TypesOfFutureDates.END_OF_AADAT_HAIZ)\n                val icForbiddenDate = endofHaiz\n                if(typesOfMasla!=TypesOfMasla.MUBTADIA) {\n                    futureDatesList += FutureDateType(icForbiddenDate, TypesOfFutureDates.IC_FORBIDDEN_DATE)\n                }\n                val ihtiyatiGhuslDate = endofHaiz\n                futureDatesList+=FutureDateType(ihtiyatiGhuslDate, TypesOfFutureDates.IHTIYATI_GHUSL)\n            }\n        }else if(fixedDurations.last().biggerThanTen!!.istihazaAfter>=aadats.aadatTuhr){//daur\n//            println(\"daur\")\n            if(lastDuration.type==DurationType.ISTIHAZA_AFTER && lastDuration.timeInMilliseconds<aadats.aadatTuhr){\n                val endOfTuhr = addTimeToDate(lastDuration.startTime, aadats.aadatTuhr)\n                futureDatesList+= FutureDateType(endOfTuhr,TypesOfFutureDates.END_OF_AADAT_TUHR)\n            }else if(lastDuration.type==DurationType.HAIZ && lastDuration.timeInMilliseconds<aadats.aadatHaiz){\n                val endOfHaiz = addTimeToDate(lastDuration.startTime, aadats.aadatHaiz)\n                futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.END_OF_AADAT_HAIZ)\n                futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.IHTIYATI_GHUSL)\n                if(typesOfMasla!=TypesOfMasla.MUBTADIA) {\n                    futureDatesList += FutureDateType(endOfHaiz, TypesOfFutureDates.IC_FORBIDDEN_DATE)\n                }\n            }else if(lastDuration.type==DurationType.HAIZ){\n                val endOfTuhr = addTimeToDate(lastDuration.endDate, aadats.aadatTuhr)\n                futureDatesList+= FutureDateType(endOfTuhr,TypesOfFutureDates.END_OF_AADAT_TUHR)\n            }else if(lastDuration.type==DurationType.ISTIHAZA_AFTER){\n                val threeDays = addTimeToDate(lastDuration.endDate, 3*MILLISECONDS_IN_A_DAY)\n                futureDatesList+= FutureDateType(threeDays,TypesOfFutureDates.BEFORE_THREE_DAYS)\n                val endOfHaiz = addTimeToDate(lastDuration.endDate, aadats.aadatHaiz)\n                futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.END_OF_AADAT_HAIZ)\n                futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.IHTIYATI_GHUSL)\n                if(typesOfMasla!=TypesOfMasla.MUBTADIA) {\n                    futureDatesList += FutureDateType(endOfHaiz, TypesOfFutureDates.IC_FORBIDDEN_DATE)\n                }\n            }else if(lastDuration.type==DurationType.LESS_THAN_3_HAIZ){\n                val threeDays = addTimeToDate(lastDuration.startTime, 3*MILLISECONDS_IN_A_DAY)\n                futureDatesList+= FutureDateType(threeDays, TypesOfFutureDates.BEFORE_THREE_DAYS)\n                val endOfHaiz = addTimeToDate(lastDuration.startTime, aadats.aadatHaiz)\n                futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.END_OF_AADAT_HAIZ)\n                futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.IHTIYATI_GHUSL)\n                if(typesOfMasla!=TypesOfMasla.MUBTADIA) {\n                    futureDatesList += FutureDateType(endOfHaiz, TypesOfFutureDates.IC_FORBIDDEN_DATE)\n                }\n            }\n\n        }else{//not daur\n            if((qism==Soortain.A_1&&fixedDurations.last().biggerThanTen!!.istihazaAfter>0L) ||\n                qism==Soortain.B_2||\n                qism==Soortain.B_3){\n                //these all end on istihaza\n                val endOfTuhr = addTimeToDate(lastDuration.startTime, aadats.aadatTuhr)\n                if(endOfTuhr.getTime()!=lastDuration.endDate.getTime()){\n                    futureDatesList+= FutureDateType(endOfTuhr,TypesOfFutureDates.END_OF_AADAT_TUHR)\n                }else if(endOfTuhr.getTime()==lastDuration.endDate.getTime()){\n                    val endOfHaz = addTimeToDate(lastDuration.endDate, aadats.aadatHaiz)\n                    futureDatesList+= FutureDateType(endOfHaz, TypesOfFutureDates.END_OF_AADAT_HAIZ)\n                    futureDatesList+= FutureDateType(endOfHaz, TypesOfFutureDates.IHTIYATI_GHUSL)\n                    if(typesOfMasla!=TypesOfMasla.MUBTADIA) {\n                        futureDatesList += FutureDateType(endOfHaz, TypesOfFutureDates.IC_FORBIDDEN_DATE)\n                    }\n                }\n            }else if(qism==Soortain.A_2){\n                val previousHaizAadat = fixedDurations.last().biggerThanTen!!.hz\n                val endOfHaiz = addTimeToDate(lastDuration.startTime, previousHaizAadat)\n                futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.END_OF_AADAT_HAIZ)\n                if(typesOfMasla!=TypesOfMasla.MUBTADIA) {\n                    futureDatesList += FutureDateType(endOfHaiz, TypesOfFutureDates.IC_FORBIDDEN_DATE)\n                }\n                futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.IHTIYATI_GHUSL)\n            }else if(qism==Soortain.A_1&&fixedDurations.last().biggerThanTen!!.istihazaAfter==0L){\n                val endOfTuhr = addTimeToDate(lastDuration.endDate, aadats.aadatTuhr)\n                futureDatesList+= FutureDateType(endOfTuhr,TypesOfFutureDates.END_OF_AADAT_TUHR)\n\n            }\n        }\n    }else if(fixedDurations.last().type==DurationType.ISTEHAZA_AYYAMEQABLIYYA){\n        val endOfIstehazaDate = addTimeToDate(fixedDurations.last().startDate,fixedDurations.last().ayyameqabliyya!!.ayyameqabliyya)\n        futureDatesList+= FutureDateType(endOfIstehazaDate, TypesOfFutureDates.START_OF_AADAT_AYYAMEQABLIYYA)\n        val tenDays = addTimeToDate(fixedDurations.last().startDate, 10*MILLISECONDS_IN_A_DAY)\n        if(tenDays.getTime()>fixedDurations.last().endDate.getTime()){\n            futureDatesList+= FutureDateType(tenDays, TypesOfFutureDates.BEFORE_TEN_DAYS_AYYAMEQABLIYYAH)\n        }\n\n    }else if(fixedDurations.last().days<10 &&\n        (fixedDurations.last().type==DurationType.DAM||\n                fixedDurations.last().type==DurationType.DAM_MUBTADIA)){\n        //we should be using previous aadat in this case\n        val previousAadat = getSecondLastAadatOfHaiz(adatsOfHaizList,fixedDurations)\n\n        if(previousAadat!=-1L){//if aadat of haiz exists\n            var endOfAadat = addTimeToDate(fixedDurations.last().startDate, previousAadat)\n            val tenDays = addTimeToDate(fixedDurations.last().startDate, 10*MILLISECONDS_IN_A_DAY)\n            if(fixedDurations.last().days<3){//this is less than 3 dam, so prior aadat\n                val threeDays = addTimeToDate(fixedDurations.last().startDate, 3*MILLISECONDS_IN_A_DAY)\n                futureDatesList+=FutureDateType(threeDays, TypesOfFutureDates.BEFORE_THREE_DAYS)\n                if(typesOfMasla!=TypesOfMasla.MUBTADIA){\n                    futureDatesList+=FutureDateType(endOfAadat, TypesOfFutureDates.IC_FORBIDDEN_DATE)\n                }\n                futureDatesList+=FutureDateType(tenDays,TypesOfFutureDates.AFTER_TEN_DAYS)\n\n                //ihtiyati ghusl calculation\n                val ihtiyatiGhuslTime = ihtiyatiGhuslCalc(fixedDurations, adatsOfHaizList, adatsOfTuhrList, inputtedMawjoodaTuhr)\n                if (ihtiyatiGhuslTime!=null){\n                    futureDatesList+=FutureDateType(ihtiyatiGhuslTime,TypesOfFutureDates.IHTIYATI_GHUSL)\n                }\n\n            }else if(previousAadat!=-1L&&\n                fixedDurations.last().timeInMilliseconds<previousAadat){\n                //there is a prior aadat of haiz, and this is less than aadat, more than 3\n\n                endOfAadat = addTimeToDate(fixedDurations.last().startDate, previousAadat)\n                if(typesOfMasla!=TypesOfMasla.MUBTADIA){\n                    futureDatesList += FutureDateType(endOfAadat, TypesOfFutureDates.IC_FORBIDDEN_DATE)\n                }\n                futureDatesList+=FutureDateType(tenDays,TypesOfFutureDates.AFTER_TEN_DAYS)\n\n                //ihtiyati ghusl calculation\n                val ihtiyatiGhuslTime = ihtiyatiGhuslCalc(fixedDurations, adatsOfHaizList, adatsOfTuhrList, inputtedMawjoodaTuhr)\n                if (ihtiyatiGhuslTime!=null){\n                    futureDatesList+=FutureDateType(ihtiyatiGhuslTime,TypesOfFutureDates.IHTIYATI_GHUSL)\n                }\n\n            }else if(previousAadat!=-1L&&\n                fixedDurations.last().timeInMilliseconds>=previousAadat){\n                futureDatesList+=FutureDateType(tenDays, TypesOfFutureDates.AFTER_TEN_DAYS)\n                //ihtiyati ghusl calculation\n                val ihtiyatiGhuslTime = ihtiyatiGhuslCalc(fixedDurations, adatsOfHaizList, adatsOfTuhrList, inputtedMawjoodaTuhr)\n                if (ihtiyatiGhuslTime!=null){\n                    futureDatesList+=FutureDateType(ihtiyatiGhuslTime,TypesOfFutureDates.IHTIYATI_GHUSL)\n                }\n\n\n            }\n        }else{//blood is less than 10 and adat of haiz doesn't exists\n            if(fixedDurations.last().type == DurationType.DAM_MUBTADIA){\n                val after10Days = addTimeToDate(fixedDurations.last().startDate, 10*MILLISECONDS_IN_A_DAY)\n                futureDatesList+=FutureDateType(after10Days, TypesOfFutureDates.END_OF_AADAT_HAIZ)\n            }else{//mutadah or nifas\n                val after10Days = addTimeToDate(fixedDurations.last().startDate, 10*MILLISECONDS_IN_A_DAY)\n                futureDatesList+=FutureDateType(after10Days, TypesOfFutureDates.AFTER_TEN_DAYS)\n            }\n        }\n    }else if(fixedDurations.last().timeInMilliseconds==10*MILLISECONDS_IN_A_DAY&&\n        (fixedDurations.last().type==DurationType.DAM||\n                fixedDurations.last().type==DurationType.DAM_MUBTADIA)){\n        if(fixedDurations.last().type==DurationType.DAM_MUBTADIA){\n            futureDatesList+=FutureDateType(Date(0,0,0), TypesOfFutureDates.TEN_DAYS_EXACTLY)\n//            var endOfTuhr = addTimeToDate(fixedDurations.last().startDate, 30*MILLISECONDS_IN_A_DAY)\n//            futureDatesList+=FutureDateType(endOfTuhr,TypesOfFutureDates.END_OF_AADAT_TUHR)\n\n        }else{//regular dam mutadah, bleeding is 10\n            futureDatesList+=FutureDateType(Date(0,0,0), TypesOfFutureDates.TEN_DAYS_EXACTLY)\n        }\n    }else if(fixedDurations.last().days>40 && fixedDurations.last().type==DurationType.DAM_IN_NIFAS_PERIOD){\n        val lastDuration=fixedDurations.last().biggerThanForty!!.durationsList.last()\n        if(lastDuration.type==DurationType.ISTIHAZA_AFTER && lastDuration.timeInMilliseconds<aadats.aadatTuhr){\n            val endOfTuhr = addTimeToDate(lastDuration.startTime, aadats.aadatTuhr)\n            futureDatesList+= FutureDateType(endOfTuhr,TypesOfFutureDates.END_OF_AADAT_TUHR)\n        }else if(lastDuration.type==DurationType.HAIZ && lastDuration.timeInMilliseconds<aadats.aadatHaiz){\n            val endOfHaiz = addTimeToDate(lastDuration.startTime, aadats.aadatHaiz)\n            futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.END_OF_AADAT_HAIZ)\n            futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.IHTIYATI_GHUSL)\n            futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.IC_FORBIDDEN_DATE)\n        }else if(lastDuration.type==DurationType.HAIZ){\n            val endOfTuhr = addTimeToDate(lastDuration.startTime, aadats.aadatTuhr)\n            futureDatesList+= FutureDateType(endOfTuhr,TypesOfFutureDates.END_OF_AADAT_TUHR)\n        }else if(lastDuration.type==DurationType.ISTIHAZA_AFTER){\n            val endOfHaiz = addTimeToDate(lastDuration.startTime, aadats.aadatHaiz)\n            futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.END_OF_AADAT_HAIZ)\n            futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.IHTIYATI_GHUSL)\n            futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.IC_FORBIDDEN_DATE)\n        }\n    }else if(fixedDurations.last().type==DurationType.DAM_IN_NIFAS_PERIOD&&\n        fixedDurations.last().days<=40){\n        var nifasAadat = 40*MILLISECONDS_IN_A_DAY\n        if(aadatNifas!=null){nifasAadat=aadatNifas}\n        val fortyDays = addTimeToDate(fixedDurations.last().startDate, 40*MILLISECONDS_IN_A_DAY)\n        futureDatesList+=FutureDateType(fortyDays, TypesOfFutureDates.FORTY_DAYS)\n        if(fixedDurations.last().timeInMilliseconds<nifasAadat&&\n            aadatNifas!=40*MILLISECONDS_IN_A_DAY){\n            val aadatNifasEnd = addTimeToDate(fixedDurations.last().startDate, nifasAadat)\n            futureDatesList+=FutureDateType(aadatNifasEnd,TypesOfFutureDates.IC_FORBIDDEN_DATE)\n        }\n    }\n    else if(fixedDurations.last().type == DurationType.DAM_MUBTADIA&&\n        fixedDurations.last().days>10){\n        var izitrariAadatHaiz=-1L\n\n        if(adatsOfHaizList.size>1){\n            if(adatsOfHaizList.last().index!=fixedDurations.lastIndex){\n                izitrariAadatHaiz=adatsOfHaizList.last().aadat\n            }else{\n                izitrariAadatHaiz=adatsOfHaizList[adatsOfHaizList.lastIndex-1].aadat\n            }\n        }\n        if(izitrariAadatHaiz==-1L){izitrariAadatHaiz=10*MILLISECONDS_IN_A_DAY}\n        val iztirariTuhrAadat = 30*MILLISECONDS_IN_A_DAY-izitrariAadatHaiz\n        val lastDuration= fixedDurations.last().biggerThanTen!!.durationsList.last()\n        if(lastDuration.type==DurationType.ISTIHAZA_AFTER && lastDuration.timeInMilliseconds<iztirariTuhrAadat){\n            val endOfTuhr = addTimeToDate(lastDuration.startTime, iztirariTuhrAadat)\n            futureDatesList+= FutureDateType(endOfTuhr,TypesOfFutureDates.END_OF_AADAT_TUHR)\n        }else if(lastDuration.type==DurationType.HAIZ && lastDuration.timeInMilliseconds<izitrariAadatHaiz){\n            val endOfHaiz = addTimeToDate(lastDuration.startTime, izitrariAadatHaiz)\n            futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.END_OF_AADAT_HAIZ)\n            futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.IHTIYATI_GHUSL)\n        }else if(lastDuration.type==DurationType.HAIZ){\n            val endOfTuhr = addTimeToDate(lastDuration.endDate, iztirariTuhrAadat)\n            futureDatesList+= FutureDateType(endOfTuhr,TypesOfFutureDates.END_OF_AADAT_TUHR)\n        }else if(lastDuration.type==DurationType.ISTIHAZA_AFTER){\n            val endOfHaiz = addTimeToDate(lastDuration.endDate, izitrariAadatHaiz)\n            val threeDays = addTimeToDate(lastDuration.endDate, 3*MILLISECONDS_IN_A_DAY)\n            futureDatesList+= FutureDateType(threeDays, TypesOfFutureDates.BEFORE_THREE_DAYS)\n            futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.END_OF_AADAT_HAIZ)\n            futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.IHTIYATI_GHUSL)\n        }else if(lastDuration.type==DurationType.LESS_THAN_3_HAIZ){\n            val endOfHaiz = addTimeToDate(lastDuration.startTime, izitrariAadatHaiz)\n            val threeDays = addTimeToDate(lastDuration.startTime, 3*MILLISECONDS_IN_A_DAY)\n            futureDatesList+= FutureDateType(threeDays, TypesOfFutureDates.BEFORE_THREE_DAYS)\n            futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.END_OF_AADAT_HAIZ)\n            futureDatesList+= FutureDateType(endOfHaiz, TypesOfFutureDates.IHTIYATI_GHUSL)\n        }\n    }\n    return futureDatesList\n}\n\nfun finalAadats(fixedDurations: MutableList<FixedDuration>, inputtedAadatTuhr: Long?, inputtedMawjoodaTuhr: Long?, isMawjoodaFasid: Boolean, adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>, adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>):AadatsOfHaizAndTuhr{\n    if(fixedDurations.last().type==DurationType.DAM &&\n        fixedDurations.last().days>10 &&\n        fixedDurations.last().biggerThanTen!!.qism==Soortain.A_3 &&\n        fixedDurations.last().biggerThanTen!!.gp-fixedDurations.last().biggerThanTen!!.mp<=\n        fixedDurations.last().timeInMilliseconds){\n        //A-3 shifting to A-2, has entered aadat, but not 3 days into makan yet\n        //we will give it previous aadat of haiz and tuhr, according to A-1, though it could remain A-3\n        //as this is an unusual and unique thing, we deal with it first\n        return AadatsOfHaizAndTuhr(adatsOfHaizList[adatsOfHaizList.lastIndex-1].aadat,\n            adatsOfTuhrList[adatsOfTuhrList.lastIndex-1].aadat)\n    }\n    if(fixedDurations.last().type==DurationType.ISTEHAZA_AYYAMEQABLIYYA){\n        return AadatsOfHaizAndTuhr(fixedDurations.last().ayyameqabliyya!!.aadatHaiz, fixedDurations.last().ayyameqabliyya!!.aadatTuhr)\n    }\n    if(adatsOfHaizList.last().index!=-1 &&\n        adatsOfHaizList[adatsOfHaizList.lastIndex-1].index==fixedDurations.lastIndex){\n        //Anam says, that in case of daur, if it ends at less than the aadat of haiz...\n        //we give previous aadat of haiz, and not the current one\n        //when there are 2 aadats at same index, that indicates daur, with\n        // an aadat change at the end of it. So if the aadat changed at the last index, twice\n        //there was daur.\n        return AadatsOfHaizAndTuhr(adatsOfHaizList[adatsOfHaizList.lastIndex-1].aadat, adatsOfTuhrList.last().aadat)\n    }\n\n    return AadatsOfHaizAndTuhr(adatsOfHaizList.last().aadat,adatsOfTuhrList.last().aadat)\n\n\n//    if(fixedDurations.last().type==DurationType.DAM&&\n//        fixedDurations.last().days>10) {//ends at bigger than 10 mutadah\n//        val lastDurationOfBiggerThanTen = fixedDurations.last().biggerThanTen!!.durationsList.last()\n//        var haizAadat = -1L\n//        var tuhrAadat = -1L\n//\n//        if(fixedDurations.last().biggerThanTen!!.qism==Soortain.A_3 &&\n//                fixedDurations.last().biggerThanTen!!.gp-fixedDurations.last().biggerThanTen!!.mp<=\n//            fixedDurations.last().timeInMilliseconds){\n//            //A-3 shifting to A-2, has entered aadat, but not 3 days yet\n//            //we will give it previous aadat of haiz and tuhr, according to A-1, though it could remain A-3\n//            //as this is an unusual and unique thing, we deal with it first\n//            haizAadat=adatsOfHaizList[adatsOfHaizList.lastIndex-1].aadat\n//            tuhrAadat=adatsOfTuhrList[adatsOfTuhrList.lastIndex-1].aadat\n//        }else{\n//            if (lastDurationOfBiggerThanTen.type == DurationType.ISTIHAZA_AFTER||\n//                lastDurationOfBiggerThanTen.type == DurationType.LESS_THAN_3_HAIZ) {\n//                //if it ended in paki, last aadats are the right ones\n//                haizAadat=adatsOfHaizList.last().aadat\n//                tuhrAadat=adatsOfTuhrList.last().aadat\n//\n//            } else {\n//                //it ended in a haiz, bigger than 3, less than aadat.\n//                //Anam says we gotta give previous aadat here\n//                haizAadat=adatsOfHaizList[adatsOfHaizList.lastIndex-1].aadat\n//                tuhrAadat=adatsOfTuhrList.last().aadat\n//            }\n//        }\n//        if(lastDurationOfBiggerThanTen.type==DurationType.HAIZ &&\n//            lastDurationOfBiggerThanTen.timeInMilliseconds>fixedDurations.last().biggerThanTen!!.haiz){\n//            //this is probably unnecessary\n//            //TODO: we should write a test case for ikhtilafi masla\n//            //for ikhtilafi masla\n//            haizAadat=lastDurationOfBiggerThanTen.timeInMilliseconds\n//        }\n//\n//        return AadatsOfHaizAndTuhr(haizAadat,tuhrAadat)\n//    }\n//    else if(fixedDurations.last().type==DurationType.DAM_MUBTADIA&&\n//        fixedDurations.last().days>10){\n//        //this is a bigger than 10 mubtadia dam and the last thing\n//        return AadatsOfHaizAndTuhr(adatsOfHaizList.last().aadat, adatsOfTuhrList.last().aadat)\n//    }\n//    else if(fixedDurations.last().days>40 &&\n//        fixedDurations.last().type==DurationType.DAM_IN_NIFAS_PERIOD){\n//        val lastDurationBiggerThanForty = fixedDurations.last().biggerThanForty!!.durationsList.last()\n//\n//        return if(lastDurationBiggerThanForty.type==DurationType.ISTIHAZA_AFTER||\n//            lastDurationBiggerThanForty.type==DurationType.LESS_THAN_3_HAIZ){\n//            //if it ended in paki or in haiz less than 3, no tension\n//            AadatsOfHaizAndTuhr(adatsOfHaizList.last().aadat, adatsOfTuhrList.last().aadat)\n//        }else{//it ended in haiz, less than previous aadat\n//            //it ended in a hiaz more than 3. We are not going to give that haiz as aadat\n//            AadatsOfHaizAndTuhr(adatsOfHaizList[adatsOfHaizList.lastIndex-1].aadat, adatsOfTuhrList.last().aadat)\n//        }\n//    }\n//    else if(fixedDurations.last().days<=10 &&\n//        (fixedDurations.last().type==DurationType.DAM||\n//                fixedDurations.last().type==DurationType.DAM_MUBTADIA)){\n//        return AadatsOfHaizAndTuhr(adatsOfHaizList.last().aadat,adatsOfTuhrList.last().aadat)\n//    }\n//    else if(fixedDurations.last().days<=40 &&\n//        fixedDurations.last().type==DurationType.DAM_IN_NIFAS_PERIOD){\n//        return AadatsOfHaizAndTuhr(adatsOfHaizList.last().aadat, adatsOfTuhrList.last().aadat )\n//    }\n//    else if(fixedDurations.last().type==DurationType.ISTEHAZA_AYYAMEQABLIYYA){\n//        return AadatsOfHaizAndTuhr(fixedDurations.last().ayyameqabliyya!!.aadatHaiz, fixedDurations.last().ayyameqabliyya!!.aadatTuhr)\n//    }\n//    return AadatsOfHaizAndTuhr(-1L,-1L)\n}\n\nfun getSecondLastAadatOfHaiz(adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>,fixedDurations: MutableList<FixedDuration>):Long{\n    var previousAadat = -1L\n    if(adatsOfHaizList.last().index!=fixedDurations.lastIndex){\n        previousAadat = adatsOfHaizList.last().aadat\n    }else{\n        if(adatsOfHaizList.size>1){\n            previousAadat = adatsOfHaizList[adatsOfHaizList.lastIndex-1].aadat\n        }\n    }\n    return previousAadat\n}\n\nfun calculateFilHaal(fixedDurations: MutableList<FixedDuration>, adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>, adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>, inputtedMawjoodaTuhr: Long?):Boolean?{\n    //calculate filHaal status\n    var filHaalPaki:Boolean? = false\n\n    if(fixedDurations.last().type==DurationType.DAM){\n\n        if(fixedDurations.last().days>10){\n            val aadatTuhr = fixedDurations.last().biggerThanTen!!.aadatTuhr\n            val aadatHaz = fixedDurations.last().biggerThanTen!!.hz //previous aadat\n            val lastDurationType = fixedDurations.last().biggerThanTen!!.durationsList.last().type\n            val lastDurationTime = fixedDurations.last().biggerThanTen!!.durationsList.last().timeInMilliseconds\n            if(lastDurationType==DurationType.LESS_THAN_3_HAIZ){\n                filHaalPaki=false\n            }else if(lastDurationType==DurationType.HAIZ){//A-2, A-1, daur\n                if(aadatHaz>lastDurationTime){//in A-2, and daur only\n                    filHaalPaki=false\n                }else {//A-1, //daur\n                    filHaalPaki = true\n                }\n            }else if(lastDurationType==DurationType.ISTIHAZA_AFTER){//daur, A-3, B-3, B-2\n                if(aadatTuhr>lastDurationTime){\n                    val qism = fixedDurations.last().biggerThanTen!!.qism\n                    //this isn't actually about ayyame qabliya\n                    val ayyameQabliyya = fixedDurations.last().biggerThanTen!!.gp-fixedDurations.last().biggerThanTen!!.mp\n                    if(qism==Soortain.A_3 && //A-3 entered into aadat\n                        ayyameQabliyya<=fixedDurations.last().timeInMilliseconds) {\n                        filHaalPaki=false\n                    }else{\n                        filHaalPaki=true\n                    }\n                }else{\n                    filHaalPaki=false\n                }\n            }\n        }else if(fixedDurations.last().timeInMilliseconds==10*MILLISECONDS_IN_A_DAY){\n            filHaalPaki=null\n\n//            //if we had an aadat, figure out filhaal\n//            var gp = adatsOfTuhrList.last().aadat\n//            var hz = -1L\n//            if(adatsOfHaizList.size>1){\n//                hz = adatsOfHaizList[adatsOfHaizList.lastIndex-1].aadat\n//            }\n//            var mp = -1L\n//            if(inputtedMawjoodaTuhr!=null){\n//                mp=inputtedMawjoodaTuhr\n//            }\n//            if(fixedDurations.size>1&&\n//                (fixedDurations[fixedDurations.lastIndex-1].type == DurationType.TUHR||\n//                        fixedDurations[fixedDurations.lastIndex-1].type==DurationType.TUHREFAASID||\n//                        fixedDurations[fixedDurations.lastIndex-1].type==DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW)){\n//                mp = fixedDurations[fixedDurations.lastIndex-1].timeInMilliseconds+fixedDurations[fixedDurations.lastIndex-1].istihazaAfter\n//            }\n//            if(mp!=-1L&&gp!=-1L&&hz!=-1L){\n//                if(mp>gp){//B\n//                    filHaalPaki=true\n//                }else{//A\n//                    if(gp-mp+hz<=10*MILLISECONDS_IN_A_DAY){//A-1\n//                        filHaalPaki=true\n//                    }else if(mp+10*MILLISECONDS_IN_A_DAY>=gp){//has entered or is about to enter aadat\n//                        filHaalPaki=false\n//                    }else{//A-3\n//                        filHaalPaki=true\n//                    }\n//                }\n//            }else{\n//                filHaalPaki=null\n//            }\n        }else{\n            filHaalPaki=false\n        }\n    }else if(fixedDurations.last().type==DurationType.DAM_MUBTADIA){\n        if(fixedDurations.last().days>10){\n            val aadatTuhr:Long\n            var aadatHaz = -1L\n            if(adatsOfHaizList.size>1){\n                if(adatsOfHaizList.last().index!=fixedDurations.lastIndex){\n                    aadatHaz=adatsOfHaizList.last().aadat\n                }else{\n                    aadatHaz=adatsOfHaizList[adatsOfHaizList.lastIndex-1].aadat\n                }\n            }\n\n            val lastDurationType = fixedDurations.last().biggerThanTen!!.durationsList.last().type\n            val lastDurationTime = fixedDurations.last().biggerThanTen!!.durationsList.last().timeInMilliseconds\n            if(aadatHaz==-1L){\n                aadatHaz=10*MILLISECONDS_IN_A_DAY\n            }\n            aadatTuhr=30*MILLISECONDS_IN_A_DAY-aadatHaz\n            if(lastDurationType==DurationType.LESS_THAN_3_HAIZ){\n                filHaalPaki=false\n            }else if(lastDurationType==DurationType.HAIZ){\n                if(aadatHaz>lastDurationTime){\n                    filHaalPaki=false\n                }else{\n                    filHaalPaki=true\n                }\n            }else if(lastDurationType==DurationType.ISTIHAZA_AFTER){\n                if(aadatTuhr>lastDurationTime){\n                    filHaalPaki=true\n                }else{\n                    filHaalPaki=false\n                }\n            }\n        }else if(fixedDurations.last().timeInMilliseconds==10*MILLISECONDS_IN_A_DAY){\n            filHaalPaki=null\n        }\n    }else if(fixedDurations.last().type==DurationType.DAM_IN_NIFAS_PERIOD){\n        if(fixedDurations.last().days>40){\n            val aadatTuhr=fixedDurations.last().biggerThanForty!!.aadatTuhr\n            val aadatHaz = fixedDurations.last().biggerThanForty!!.aadatHaiz\n            val lastDurationType = fixedDurations.last().biggerThanForty!!.durationsList.last().type\n            val lastDurationTime = fixedDurations.last().biggerThanForty!!.durationsList.last().timeInMilliseconds\n            if(lastDurationType==DurationType.ISTIHAZA_AFTER){\n                if(aadatTuhr==-1L){\n                    filHaalPaki=true\n                }else if(aadatTuhr>lastDurationTime){\n                    filHaalPaki=true\n                }else{\n                    filHaalPaki=false\n                }\n            }else if(lastDurationType==DurationType.HAIZ){\n                if(aadatHaz==-1L){\n                    //this shouldn't happen\n                    filHaalPaki=false\n                }else if(aadatHaz>lastDurationTime){\n                    filHaalPaki=false\n                }else{\n                    filHaalPaki=true\n                }\n            }else if(lastDurationType==DurationType.LESS_THAN_3_HAIZ){\n                filHaalPaki=false\n            }\n        }\n    }else if(fixedDurations.last().type == DurationType.ISTEHAZA_AYYAMEQABLIYYA) {\n        if(fixedDurations.last().timeInMilliseconds>=fixedDurations.last().ayyameqabliyya!!.ayyameqabliyya) {\n            filHaalPaki = false\n        }else {\n            filHaalPaki=null\n        }\n    }else {\n        filHaalPaki = false\n    }\n    return filHaalPaki\n}\n\nfun ihtiyatiGhuslCalc(fixedDurations: MutableList<FixedDuration>,adatsOfHaizList: MutableList<AadatAfterIndexOfFixedDuration>,adatsOfTuhrList: MutableList<AadatAfterIndexOfFixedDuration>,inputtedMawjoodaTuhr: Long?):Date?{\n    //ihtiyati ghusl calculation\n    var ihtiyatiGhuslTime:Date? = null\n    var mp = -1L\n    var gp = adatsOfTuhrList.last().aadat\n    val hz = getSecondLastAadatOfHaiz(adatsOfHaizList,fixedDurations)\n\n    if(fixedDurations.size>1 &&\n        (fixedDurations[fixedDurations.size-2].type==DurationType.TUHR||\n                fixedDurations[fixedDurations.size-2].type==DurationType.TUHREFAASID||\n                fixedDurations[fixedDurations.size-2].type==DurationType.TUHREFAASID_WITH_ISTEHAZA||\n                fixedDurations[fixedDurations.size-2].type==DurationType.TUHR_MUBTADIA||\n                fixedDurations[fixedDurations.size-2].type==DurationType.TUHREFAASID_MUBTADIA||\n                fixedDurations[fixedDurations.size-2].type==DurationType.TUHREFAASID_MUBTADIA_WITH_ISTEHAZA||\n                fixedDurations[fixedDurations.size-2].type==DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW)){\n        mp = fixedDurations[fixedDurations.size-2].timeInMilliseconds+\n                fixedDurations[fixedDurations.lastIndex-1].istihazaAfter\n\n    }else if(inputtedMawjoodaTuhr!=null){\n        mp=inputtedMawjoodaTuhr\n    }\n    if(mp!=-1L && gp!=-1L && hz!=-1L && fixedDurations.last().type==DurationType.DAM){\n        if(mp>=gp){//aadat has already started, and may have ended\n            if(hz-(mp-gp)>=3*MILLISECONDS_IN_A_DAY){\n                ihtiyatiGhuslTime=addTimeToDate(fixedDurations.last().startDate, hz-(mp-gp))//B-2\n            }else{\n                ihtiyatiGhuslTime=addTimeToDate(fixedDurations.last().startDate, hz)\n            }\n        }else{//A\n            val crossingTen = addTimeToDate(fixedDurations.last().startDate, 10*MILLISECONDS_IN_A_DAY)\n            if(crossingTen.getTime()>=addTimeToDate(fixedDurations.last().startDate, gp-mp).getTime()){\n                //crossing 10 puts it in aadat or after it\n                ihtiyatiGhuslTime=addTimeToDate(fixedDurations.last().startDate, (gp-mp+hz))\n            }else{//A-3\n                    ihtiyatiGhuslTime=addTimeToDate(fixedDurations.last().startDate, hz)\n            }\n\n        }\n    }else if(fixedDurations.last().type==DurationType.DAM_MUBTADIA){\n        gp = 30*MILLISECONDS_IN_A_DAY - hz //iztirari tuhr aadat\n        if (mp>gp){\n            ihtiyatiGhuslTime = addTimeToDate(fixedDurations.last().startDate, hz)\n        }else{\n            ihtiyatiGhuslTime = addTimeToDate(fixedDurations.last().startDate, mp-gp+hz)\n        }\n    }\n\n    if (ihtiyatiGhuslTime != null) {\n        if(ihtiyatiGhuslTime.getTime()>fixedDurations.last().endDate.getTime() &&\n            ihtiyatiGhuslTime.getTime()!=Date(0,0,0).getTime()){\n            return ihtiyatiGhuslTime\n        }\n    }\n    return null\n\n}","@file:Suppress(\"SpellCheckingInspection\")\nimport kotlin.js.Date\n\nfun generateOutputStringPregnancy(fixedDurations: MutableList<FixedDuration>,\n                                  pregnancy: Pregnancy,\n                                  endingOutputValues: EndingOutputValues,\n                                  typeOfInput: TypesOfInputs):OutputTexts{\n    var englishStr = \"\"\n    var urduStr = \"\"\n    val hazDatesList = getHaizDatesList(fixedDurations)\n    urduStr+= generateLanguagedOutputStringPregnancy(fixedDurations,pregnancy, endingOutputValues, typeOfInput).urduString\n    englishStr+= generateLanguagedOutputStringPregnancy(fixedDurations,pregnancy, endingOutputValues, typeOfInput).englishString\n\n\n    return OutputTexts(englishStr,urduStr, \"\",hazDatesList,endingOutputValues, fixedDurations)\n}\nfun generateOutputStringMubtadia(fixedDurations: MutableList<FixedDuration>,\n                                 endingOutputValues: EndingOutputValues,\n                                 typeOfInput: TypesOfInputs):OutputTexts{\n    val hazDatesList = getHaizDatesList(fixedDurations)\n    val urduStr = generateOutputString(fixedDurations, endingOutputValues, typeOfInput).urduString\n    val englishStr = generateOutputString(fixedDurations, endingOutputValues, typeOfInput).englishString\n\n    val hazDatesStr = generateHazDatesStr(hazDatesList,typeOfInput)\n\n    return OutputTexts(englishStr,urduStr, hazDatesStr, hazDatesList,endingOutputValues, fixedDurations)\n}\nfun generateOutputStringMutadah(fixedDurations: MutableList<FixedDuration>,\n                                endingOutputValues: EndingOutputValues,\n                                typeOfInput: TypesOfInputs):OutputTexts{\n    val hazDatesList = getHaizDatesList(fixedDurations)\n\n//    while (index<fixedDurations.size){\n//        englishStr += outputStringHeaderLine(fixedDurations,index, isDateOnly)\n//        englishStr += outputStringSumOfIndicesLine(fixedDurations,durations, index, isDateOnly)\n//        englishStr += outputStringIstihazaAfterLine(fixedDurations, index, isDateOnly)\n//        englishStr += outputStringBiggerThan10Hall(fixedDurations, index, isDateOnly)\n//\n//\n//        index++\n//    }\n\n    val urduStr = generateOutputString(fixedDurations, endingOutputValues, typeOfInput).urduString\n    val englishStr = generateOutputString(fixedDurations, endingOutputValues, typeOfInput).englishString\n\n    val hazDatesStr = generateHazDatesStr(hazDatesList,typeOfInput)\n\n    return OutputTexts(englishStr,urduStr, hazDatesStr, hazDatesList,endingOutputValues, fixedDurations)\n}\n\nfun generateHazDatesStr(hazDatesList: MutableList<Entry>,typeOfInput: TypesOfInputs):String{\n    var str = \"\"\n    for(entry in hazDatesList){\n        str+=\"From ${englishDateFormat(entry.startTime,typeOfInput)} to ${englishDateFormat(entry.endTime,typeOfInput)}<br>\"\n    }\n    return str\n}\n\nfun generateLanguagedOutputStringPregnancy(fixedDurations: MutableList<FixedDuration>, pregnancy: Pregnancy, endingOutputValues: EndingOutputValues, typeOfInput: TypesOfInputs):OutputStringsLanguages{\n    val mustabeen = pregnancy.mustabeenUlKhilqat\n//    var startTimeOfPregnancy = pregnancy.pregStartTime.getTime()\n    val birthTime = pregnancy.birthTime\n    var strUrdu = StringsOfLanguages.URDU.answer\n    var strEnglish = StringsOfLanguages.ENGLISH.answer\n\n    if(mustabeen){\n        if(fixedDurations[0].type!=DurationType.HAML){\n            strUrdu += StringsOfLanguages.URDU.beforepregheader\n            strEnglish += StringsOfLanguages.ENGLISH.beforepregheader\n        }\n        for(index in fixedDurations.indices){\n            if(typeOfInput==TypesOfInputs.DURATION) {\n                strUrdu += outputStringHeaderLineDuration(fixedDurations,index).urduString\n                strEnglish += outputStringHeaderLineDuration(fixedDurations,index).englishString\n                strUrdu += outputStringBiggerThan10HallDurations(fixedDurations,index).urduString\n                strEnglish += outputStringBiggerThan10HallDurations(fixedDurations,index).englishString\n                strUrdu += outputStringBiggerThan40HallDuration(fixedDurations,index).urduString\n                strEnglish += outputStringBiggerThan40HallDuration(fixedDurations,index).englishString\n                if(fixedDurations[index].type==DurationType.HAML){\n                    strUrdu += StringsOfLanguages.URDU.pregduration\n                    strEnglish += StringsOfLanguages.ENGLISH.pregduration\n                }\n                if(fixedDurations[index].type==DurationType.WILADAT_ISQAT){\n                    strUrdu += StringsOfLanguages.URDU.birthduration\n                    strEnglish += StringsOfLanguages.ENGLISH.birthduration\n                }\n\n            }else{\n                strUrdu += outputStringHeaderLine(fixedDurations,index, typeOfInput).urduString\n                strEnglish += outputStringHeaderLine(fixedDurations,index, typeOfInput).englishString\n                strUrdu += outputStringBiggerThan10Hall(fixedDurations,index, typeOfInput).urduString\n                strEnglish += outputStringBiggerThan10Hall(fixedDurations,index, typeOfInput).englishString\n                strUrdu += outputStringBiggerThan40Hall(fixedDurations,index, typeOfInput).urduString\n                strEnglish += outputStringBiggerThan40Hall(fixedDurations,index, typeOfInput).englishString\n                if(fixedDurations[index].type==DurationType.HAML){\n                    strUrdu += StringsOfLanguages.URDU.preg\n                    strEnglish += StringsOfLanguages.ENGLISH.preg\n                }\n                if(fixedDurations[index].type==DurationType.WILADAT_ISQAT){\n                    strUrdu += StringsOfLanguages.URDU.birth.replace(\"date1\", urduDateFormat(birthTime, typeOfInput))\n                    strEnglish += StringsOfLanguages.ENGLISH.birth.replace(\"date1\",\n                        englishDateFormat(birthTime, typeOfInput)\n                    )\n                    if(index<fixedDurations.size-2){//if there is something after wiladat\n                        strUrdu += StringsOfLanguages.URDU.afterpregheader\n                        strEnglish += StringsOfLanguages.ENGLISH.afterpregheader\n                    }\n                }\n\n            }\n\n        }\n        strUrdu += outputStringFinalLines(endingOutputValues, typeOfInput, pregnancy).urduString\n        strEnglish += outputStringFinalLines(endingOutputValues, typeOfInput, pregnancy).englishString\n\n\n\n    }else{//if it is ghair mustabeenulkhilqat\n        strUrdu += StringsOfLanguages.URDU.headerline\n        strEnglish += StringsOfLanguages.ENGLISH.headerline\n\n        for(index in fixedDurations.indices){\n            if(typeOfInput==TypesOfInputs.DURATION){\n                strUrdu += outputStringHeaderLineDuration(fixedDurations,index, mustabeen).urduString\n                strEnglish += outputStringHeaderLineDuration(fixedDurations,index,mustabeen).englishString\n                strUrdu += outputStringBiggerThan10HallDurations(fixedDurations,index).urduString\n                strEnglish += outputStringBiggerThan10HallDurations(fixedDurations,index).englishString\n                if(fixedDurations[index].type==DurationType.HAML){\n                    strUrdu += StringsOfLanguages.URDU.preg\n                    strEnglish += StringsOfLanguages.ENGLISH.preg\n                }\n                if(fixedDurations[index].type==DurationType.WILADAT_ISQAT){\n                    strUrdu += StringsOfLanguages.URDU.earlymiscarriageduration\n                    strEnglish += StringsOfLanguages.ENGLISH.earlymiscarriageduration\n                    if(index<fixedDurations.size-2){//if there is something after wiladat\n                        strUrdu += StringsOfLanguages.URDU.afterpregheader\n                        strEnglish += StringsOfLanguages.ENGLISH.afterpregheader\n                    }\n                }\n\n            }else{\n                strUrdu += outputStringHeaderLine(fixedDurations,index, typeOfInput, mustabeen).urduString\n                strEnglish += outputStringHeaderLine(fixedDurations,index, typeOfInput, mustabeen).englishString\n                strUrdu += outputStringBiggerThan10Hall(fixedDurations,index, typeOfInput).urduString\n                strEnglish += outputStringBiggerThan10Hall(fixedDurations,index, typeOfInput).englishString\n                if(fixedDurations[index].type==DurationType.HAML){\n                    strUrdu += StringsOfLanguages.URDU.preg\n                    strEnglish += StringsOfLanguages.ENGLISH.preg\n                }\n                if(fixedDurations[index].type==DurationType.WILADAT_ISQAT){\n                    strUrdu += StringsOfLanguages.URDU.earlymiscarriage.replace(\"date1\",\n                        urduDateFormat(birthTime, typeOfInput)\n                    )\n                    strEnglish += StringsOfLanguages.ENGLISH.earlymiscarriage.replace(\"date1\",\n                        englishDateFormat(birthTime, typeOfInput)\n                    )\n                    if(index<fixedDurations.size-2){//if there is something after wiladat\n                        strUrdu += StringsOfLanguages.URDU.afterpregheader\n                        strEnglish += StringsOfLanguages.ENGLISH.afterpregheader\n                    }\n                }\n                if(fixedDurations[index].type==DurationType.WILADAT_ISQAT){\n                    strUrdu += StringsOfLanguages.URDU.earlymiscarriage.replace(\"date1\", \"${urduDateFormat(birthTime, typeOfInput)}\")\n                    strEnglish += StringsOfLanguages.ENGLISH.earlymiscarriage.replace(\"date1\", \"${englishDateFormat(birthTime, typeOfInput)}\")\n                    if(index<fixedDurations.size-2){//if there is something after wiladat\n                        strUrdu += StringsOfLanguages.URDU.afterpregheader\n                        strEnglish += StringsOfLanguages.ENGLISH.afterpregheader\n                    }\n                }\n\n            }\n\n        }\n        strUrdu += outputStringFinalLines (endingOutputValues, typeOfInput).urduString\n        strEnglish += outputStringFinalLines (endingOutputValues, typeOfInput).englishString\n\n    }\n\n\n    return OutputStringsLanguages(strUrdu,strEnglish)\n}\n\nfun generateOutputString(fixedDurations: MutableList<FixedDuration>, endingOutputValues: EndingOutputValues, typeOfInput: TypesOfInputs):OutputStringsLanguages{\n    //ToDo: figure out how to do languages for real\n    var strUrdu = StringsOfLanguages.URDU.answer //جواب:\n    var strEnglish = StringsOfLanguages.ENGLISH.answer //جواب:\n\n    strUrdu += StringsOfLanguages.URDU.headerline //اس ترتیب سے خون آیا اور پاکی ملی\n    strEnglish += StringsOfLanguages.ENGLISH.headerline //اس ترتیب سے خون آیا اور پاکی ملی\n    var index = 0\n    while (index<fixedDurations.size){\n        if(typeOfInput==TypesOfInputs.DURATION){\n            strUrdu += outputStringHeaderLineDuration(fixedDurations,index).urduString //اس تاریخ سے اس تاریخ تک اتنے دن حیض\n            strEnglish += outputStringHeaderLineDuration(fixedDurations,index).englishString //اس تاریخ سے اس تاریخ تک اتنے دن حیض\n            strUrdu += outputStringBiggerThan10HallDurations(fixedDurations,index).urduString\n            strEnglish += outputStringBiggerThan10HallDurations(fixedDurations,index).englishString\n            if(index==fixedDurations.size-1){//if this os the last index\n                strUrdu += outputStringFinalLines(endingOutputValues, typeOfInput).urduString\n                strEnglish += outputStringFinalLines(endingOutputValues, typeOfInput).englishString\n            }\n        }else{\n            strUrdu += outputStringHeaderLine(fixedDurations,index, typeOfInput).urduString //اس تاریخ سے اس تاریخ تک اتنے دن حیض\n            strEnglish += outputStringHeaderLine(fixedDurations,index, typeOfInput).englishString //اس تاریخ سے اس تاریخ تک اتنے دن حیض\n            strUrdu += outputStringBiggerThan10Hall(fixedDurations,index, typeOfInput).urduString\n            strEnglish += outputStringBiggerThan10Hall(fixedDurations,index, typeOfInput).englishString\n            if(index==fixedDurations.size-1){//if this os the last index\n                strUrdu += outputStringFinalLines(endingOutputValues, typeOfInput).urduString\n                strEnglish += outputStringFinalLines(endingOutputValues, typeOfInput).englishString\n            }\n        }\n        index++\n    }\n    return OutputStringsLanguages(strUrdu,strEnglish)\n}\nfun generateUrduOutputStringMubtadia(fixedDurations: MutableList<FixedDuration>, endingOutputValues: EndingOutputValues, typeOfInput: TypesOfInputs):String{\n    //ToDo: figure out how to do languages for real\n    var str = StringsOfLanguages.URDU.answer //جواب:\n    str += StringsOfLanguages.URDU.headerlinemubtadia //اس ترتیب سے خون آیا اور پاکی ملی\n    var index = 0\n    while (index<fixedDurations.size){\n        str += outputStringHeaderLine(fixedDurations,index, typeOfInput)\n        str += outputStringBiggerThan10Hall(fixedDurations,index, typeOfInput)\n        if(index==fixedDurations.size-1){//if this os the last index\n            str += outputStringFinalLines(endingOutputValues, typeOfInput)\n        }\n        index++\n    }\n    return str\n}\n\nfun outputStringFinalLines(endingOutputValues: EndingOutputValues, typeOfInput: TypesOfInputs, pregnancy: Pregnancy? = null):OutputStringsLanguages{\n\n    var strUrdu = \"\"\n    var strEnglish = \"\"\n    val aadats = endingOutputValues.aadats\n    strUrdu+=outputStringAadatLine(typeOfInput, aadats, pregnancy).urduString\n    strEnglish+=outputStringAadatLine(typeOfInput, aadats, pregnancy).englishString\n    if(typeOfInput==TypesOfInputs.DURATION){return OutputStringsLanguages(strUrdu,strEnglish)}\n    val filHaal = endingOutputValues.filHaalPaki\n    strUrdu+=outputStringFilHaalLine(filHaal).urduString\n    strEnglish+=outputStringFilHaalLine(filHaal).englishString\n    val futureDates = endingOutputValues.futureDateType\n    strUrdu+=outputStringAskAgainLine(typeOfInput,futureDates).urduString\n    strEnglish+=outputStringAskAgainLine(typeOfInput, futureDates).englishString\n\n    //plis note down line\n    strUrdu+=StringsOfLanguages.URDU.writedown\n    strEnglish+=StringsOfLanguages.ENGLISH.writedown\n\n    //Allahu Aaalam line\n    strUrdu+=StringsOfLanguages.URDU.allahknows\n    strEnglish+=StringsOfLanguages.ENGLISH.allahknows\n\n    return OutputStringsLanguages(strUrdu,strEnglish)\n}\nfun outputStringFilHaalLine(filHaalPaki:Boolean?):OutputStringsLanguages{\n    val filHaalPakiStrUrdu = StringsOfLanguages.URDU.currentpaki\n    val filHaalPakiStrEnglish = StringsOfLanguages.ENGLISH.currentpaki\n    val filHaalHaizStrUrdu = StringsOfLanguages.URDU.currenthaiz\n    val filHaalHaizStrEnglish = StringsOfLanguages.ENGLISH.currenthaiz\n    when (filHaalPaki) {\n        true -> return OutputStringsLanguages(filHaalPakiStrUrdu, filHaalPakiStrEnglish)\n        false -> return OutputStringsLanguages(filHaalHaizStrUrdu, filHaalHaizStrEnglish)\n        null -> return OutputStringsLanguages(\"\", \"\")\n\n//    //right now, we are just going to check to see what last halat is\n//    var istihazaAfter = fixedDurations[index].biggerThanTen?.istihazaAfter ?: return \"\"\n//    var aadatHaiz = fixedDurations[index].biggerThanTen?.aadatHaiz ?: return \"\"\n//    var aadatTuhr = fixedDurations[index].biggerThanTen?.aadatTuhr ?: return \"\"\n//    if(istihazaAfter==0L){//last halat is haiz\n//        strUrdu+=filHaalHaizStr\n//    }else if(istihazaAfter>=aadatTuhr+3){//last period is long istihaza, lets's figure out more\n//        //find remainder\n//        var remainder = istihazaAfter%(aadatHaiz+aadatTuhr)\n//\n//        if (remainder<aadatTuhr + 3 && remainder!=0L){//it ended in tuhr\n//            strUrdu+=filHaalPakiStr\n//        }else{//it ended in haiz or remainder is 0\n//             if (remainder!=0L){//it ended in haiz\n//                 strUrdu+=filHaalHaizStr\n//            }else{//it ended in tuhr\n//                strUrdu+=filHaalPakiStr\n//            }\n//        }\n//    }else{//last halat is short istihaza\n//        strUrdu+=filHaalPakiStr\n//    }\n\n//    return strUrdu\n    }\n}\n\nfun outputStringAskAgainLine(typeOfInput: TypesOfInputs, futureDates: MutableList<FutureDateType>):OutputStringsLanguages{\n    var strUrdu = \"\"\n    var strEnglish = \"\"\n\n    for(futureDate in futureDates){\n        val date = futureDate.date\n        val type= futureDate.futureDates\n        when (type) {\n            TypesOfFutureDates.END_OF_AADAT_HAIZ -> {\n                strUrdu += StringsOfLanguages.URDU.haizend.replace(\"date1\", urduDateFormat(date, typeOfInput))\n                strEnglish += StringsOfLanguages.ENGLISH.haizend.replace(\"date1\", englishDateFormat(date, typeOfInput))\n            }\n            TypesOfFutureDates.END_OF_AADAT_TUHR -> {\n                strUrdu += StringsOfLanguages.URDU.endofpaki.replace(\"date1\", urduDateFormat(date, typeOfInput))\n                strEnglish += StringsOfLanguages.ENGLISH.endofpaki.replace(\"date1\", englishDateFormat(date, typeOfInput))\n            }\n            TypesOfFutureDates.IC_FORBIDDEN_DATE -> {\n                strUrdu += StringsOfLanguages.URDU.sexnotallowed.replace(\"date1\", urduDateFormat(date, typeOfInput))\n                strEnglish += StringsOfLanguages.ENGLISH.sexnotallowed.replace(\"date1\",\n                    englishDateFormat(date, typeOfInput)\n                )\n            }\n            TypesOfFutureDates.AFTER_TEN_DAYS -> {\n                strUrdu += StringsOfLanguages.URDU.aftertendays.replace(\"date1\", urduDateFormat(date, typeOfInput))\n                strEnglish += StringsOfLanguages.ENGLISH.aftertendays.replace(\"date1\", englishDateFormat(date, typeOfInput))\n            }\n            TypesOfFutureDates.FORTY_DAYS -> {\n                strUrdu += StringsOfLanguages.URDU.afterfortydays.replace(\"date1\", urduDateFormat(date, typeOfInput))\n                strEnglish += StringsOfLanguages.ENGLISH.afterfortydays.replace(\"date1\",\n                    englishDateFormat(date, typeOfInput)\n                )\n            }\n            TypesOfFutureDates.BEFORE_THREE_DAYS_MASLA_WILL_CHANGE -> {\n                strUrdu += StringsOfLanguages.URDU.bleedingstopsbeforethreemaslachanges.replace(\"date1\",\n                    urduDateFormat(date, typeOfInput)\n                )\n                strEnglish += StringsOfLanguages.ENGLISH.bleedingstopsbeforethreemaslachanges.replace(\"date1\",\n                    englishDateFormat(date, typeOfInput)\n                )\n            }\n            TypesOfFutureDates.BEFORE_THREE_DAYS -> {\n                strUrdu += StringsOfLanguages.URDU.bleedingstopsbeforethree.replace(\"date1\",\n                    urduDateFormat(date, typeOfInput)\n                )\n                strEnglish += StringsOfLanguages.ENGLISH.bleedingstopsbeforethree.replace(\"date1\",\n                    englishDateFormat(date, typeOfInput)\n                )\n            }\n            TypesOfFutureDates.IHTIYATI_GHUSL -> {\n                strUrdu += StringsOfLanguages.URDU.ihtiyatighusl.replace(\"date1\", urduDateFormat(date, typeOfInput))\n                strEnglish += StringsOfLanguages.ENGLISH.ihtiyatighusl.replace(\"date1\",\n                    englishDateFormat(date, typeOfInput)\n                )\n            }\n            TypesOfFutureDates.A3_CHANGING_TO_A2 -> {\n                strUrdu += StringsOfLanguages.URDU.situationmaychange.replace(\"date1\", urduDateFormat(date, typeOfInput))\n                strEnglish += StringsOfLanguages.ENGLISH.situationmaychange.replace(\"date1\",\n                    englishDateFormat(date, typeOfInput)\n                )\n            }\n            TypesOfFutureDates.BEFORE_TEN_DAYS_AYYAMEQABLIYYAH -> {\n                strUrdu += StringsOfLanguages.URDU.beforetendaysayyameqabliyyaallconsideredhaiz.replace(\"date1\",\n                    urduDateFormat(date, typeOfInput)\n                )\n                strEnglish += StringsOfLanguages.ENGLISH.beforetendaysayyameqabliyyaallconsideredhaiz.replace(\"date1\",\n                    englishDateFormat(date, typeOfInput)\n                )\n            }\n            TypesOfFutureDates.START_OF_AADAT_AYYAMEQABLIYYA -> {\n                strUrdu += StringsOfLanguages.URDU.endofistehazaayyameqabliyya.replace(\"date1\",\n                    urduDateFormat(date, typeOfInput)\n                )\n                strEnglish += StringsOfLanguages.ENGLISH.endofistehazaayyameqabliyya.replace(\"date1\",\n                    englishDateFormat(date, typeOfInput)\n                )\n            }\n            TypesOfFutureDates.TEN_DAYS_EXACTLY -> {\n                strUrdu+= StringsOfLanguages.URDU.tendaysdoghusl\n                strUrdu+= StringsOfLanguages.URDU.askagainnodate\n                strEnglish+= StringsOfLanguages.ENGLISH.tendaysdoghusl\n                strEnglish+=StringsOfLanguages.ENGLISH.askagainnodate\n            }\n        }\n    }\n    return OutputStringsLanguages(strUrdu,strEnglish)\n}\nfun outputStringAadatLine(typeOfInput: TypesOfInputs, aadats:AadatsOfHaizAndTuhr?, pregnancy: Pregnancy?):OutputStringsLanguages{\n    var strUrdu = \"\"\n    var strEnglish = \"\"\n\n    return if (aadats==null) OutputStringsLanguages(\"\",\"\")\n    else {\n        val aadatTuhr = aadats.aadatTuhr\n        val aadatHaiz = aadats.aadatHaiz\n        if(aadatHaiz==-1L && aadatTuhr==-1L){\n            strUrdu += StringsOfLanguages.URDU.thereisnoaadat\n            strEnglish += StringsOfLanguages.ENGLISH.thereisnoaadat\n        }else if(aadatHaiz!=-1L && aadatTuhr==-1L){\n            strUrdu+= StringsOfLanguages.URDU.aadatofhaizonly\n                .replace(\"duration1\", daysHoursMinutesDigitalUrdu(aadatHaiz, typeOfInput))\n            strEnglish+= StringsOfLanguages.ENGLISH.aadatofhaizonly\n                .replace(\"duration1\", daysHoursMinutesDigitalEnglish(aadatHaiz, typeOfInput))\n        }else{\n            if(pregnancy?.newAadatNifas != null && pregnancy.newAadatNifas!=-1L){\n                strUrdu+= StringsOfLanguages.URDU.habitwithnifas\n                    .replace(\"duration1\", daysHoursMinutesDigitalUrdu(aadatHaiz, typeOfInput))\n                    .replace(\"duration2\", daysHoursMinutesDigitalUrdu(aadatTuhr, typeOfInput))\n                    .replace(\"duration3\", daysHoursMinutesDigitalUrdu(pregnancy.newAadatNifas!!, typeOfInput))\n                strEnglish+= StringsOfLanguages.ENGLISH.habitwithnifas\n                    .replace(\"duration1\", daysHoursMinutesDigitalEnglish(aadatHaiz, typeOfInput))\n                    .replace(\"duration2\", daysHoursMinutesDigitalEnglish(aadatTuhr, typeOfInput))\n                    .replace(\"duration3\", daysHoursMinutesDigitalEnglish(pregnancy.newAadatNifas!!, typeOfInput))\n            }\n            else{\n                strUrdu+= StringsOfLanguages.URDU.habit\n                    .replace(\"duration1\", daysHoursMinutesDigitalUrdu(aadatHaiz, typeOfInput))\n                    .replace(\"duration2\", daysHoursMinutesDigitalUrdu(aadatTuhr, typeOfInput))\n                strEnglish+= StringsOfLanguages.ENGLISH.habit\n                    .replace(\"duration1\", daysHoursMinutesDigitalEnglish(aadatHaiz, typeOfInput))\n                    .replace(\"duration2\", daysHoursMinutesDigitalEnglish(aadatTuhr, typeOfInput))\n            }\n        }\n        OutputStringsLanguages(strUrdu, strEnglish)\n    }\n\n//    var aadatHaiz = fixedDurations[index].biggerThanTen?.aadatHaiz ?: return \"\"\n//    var aadatTuhr = fixedDurations[index].biggerThanTen?.aadatTuhr ?: return \"\"\n//    var istihazaAfter = fixedDurations[index].biggerThanTen?.istihazaAfter ?: return \"\"\n//\n//    if (istihazaAfter>=aadatTuhr+3) {//if we have a long istihaza after, there is a possibility that aadat changed\n//        //find remainder\n//        var remainder = istihazaAfter % (aadatHaiz + aadatTuhr)\n//        if (remainder<aadatTuhr + 3 && remainder!=0L){//it ended in tuhr, so aadat doesn't change\n//\n//        }else{//it ended in haiz or remainder is 0 (which means ending in tuhr)\n//            //change aadatHaiz if remainder is not zero (if it is zero, aadat doesn't change, so shouldn't be printed\n//            if (remainder!=0L){\n//                val aadatHaiz = (remainder-aadatTuhr).toString()\n//            }\n//        }\n//    }\n//\n//    strUrdu+=\"${UnicodeChars.GREEN_CIRCLE} <b>عادت:: حیض: ${daysHoursMinutesDigitalUrdu(aadatHaiz, isDateOnly)}، طہر: ${daysHoursMinutesDigitalUrdu(aadatTuhr, isDateOnly)}</b>\\n\\n\"\n//\n//    return strUrdu\n}\nfun outputStringBiggerThan10HallDurations(fixedDurations: MutableList<FixedDuration>, index: Int):OutputStringsLanguages{\n    var strUrdu = \"\"\n    var strEnglish = \"\"\n    val typeOfInput = TypesOfInputs.DURATION\n\n    if((fixedDurations[index].days>10 &&\n                (fixedDurations[index].type==DurationType.DAM||\n                        fixedDurations[index].type==DurationType.DAM_MUBTADIA))){\n        strUrdu += UnicodeChars.ABACUS\n        strEnglish += UnicodeChars.ABACUS\n\n        for(duration in fixedDurations[index].biggerThanTen!!.durationsList){\n            if(duration.type == DurationType.ISTIHAZA_BEFORE){\n                strUrdu+= StringsOfLanguages.URDU.startingFromIstehaza.replace(\"duration1\",\n                    daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, typeOfInput)\n                )\n                strEnglish+= StringsOfLanguages.ENGLISH.startingFromIstehaza.replace(\"duration1\",\n                    daysHoursMinutesDigitalEnglish(duration.timeInMilliseconds, typeOfInput)\n                )\n\n            }else if(duration.type == DurationType.HAIZ){\n                if(duration==fixedDurations[index].biggerThanTen!!.durationsList[0]){\n                    strUrdu+= StringsOfLanguages.URDU.startingFromHaiz.replace(\"duration1\",\n                        daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, typeOfInput)\n                    )\n                    strEnglish+= StringsOfLanguages.ENGLISH.startingFromHaiz.replace(\"duration1\",\n                        daysHoursMinutesDigitalEnglish(duration.timeInMilliseconds, typeOfInput)\n                    )\n                }else{\n                    strUrdu+= StringsOfLanguages.URDU.followedByHaizAfter.replace(\"duration1\",\n                        daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, typeOfInput)\n                    )\n                    strEnglish+= StringsOfLanguages.ENGLISH.followedByHaizAfter.replace(\"duration1\",\n                        daysHoursMinutesDigitalEnglish(duration.timeInMilliseconds, typeOfInput)\n                    )\n                }\n            }else if(duration.type == DurationType.ISTIHAZA_AFTER){\n                strUrdu+= StringsOfLanguages.URDU.followedByistehazaAfter.replace(\"duration1\",\n                    daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, typeOfInput)\n                )\n                strEnglish+= StringsOfLanguages.ENGLISH.followedByistehazaAfter.replace(\"duration1\",\n                    daysHoursMinutesDigitalEnglish(duration.timeInMilliseconds, typeOfInput)\n                )\n\n            }else if(duration.type == DurationType.LESS_THAN_3_HAIZ){\n                strUrdu+= StringsOfLanguages.URDU.followedByHaizAfter.replace(\"duration1\",\n                    daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, typeOfInput)\n                )\n                strEnglish+= StringsOfLanguages.ENGLISH.followedByHaizAfter.replace(\"duration1\",\n                    daysHoursMinutesDigitalEnglish(duration.timeInMilliseconds, typeOfInput)\n                )\n                //maybe we'll wanna add something about itibaar bil khawateem\n            }else if(duration.type == DurationType.NIFAS){\n                strUrdu+= StringsOfLanguages.URDU.startingFromNifas\n                strEnglish+= StringsOfLanguages.ENGLISH.startingFromNifas\n            }\n        }\n    }\n    if(strUrdu!=\"\"&& strEnglish!=\"\"){\n        strUrdu+=StringsOfLanguages.URDU.khatimaplusnewline\n        strEnglish+=StringsOfLanguages.ENGLISH.khatimaplusnewline\n    }\n    return OutputStringsLanguages(strUrdu,strEnglish)\n}\n\nfun outputStringBiggerThan10Hall(fixedDurations: MutableList<FixedDuration>, index: Int, typeOfInput: TypesOfInputs):OutputStringsLanguages{\n    //legacy code this, I think it's unused\n    var strUrdu = \"\"\n    var strEnglish = \"\"\n\n    fun haizLine(sd:Date, ed:Date, typeOfInput: TypesOfInputs):OutputStringsLanguages{\n        return OutputStringsLanguages(\n            StringsOfLanguages.URDU.haizdaysinsolution.replace(\"date1\", urduDateFormat(sd, typeOfInput)).replace(\"date2\",\n                urduDateFormat(ed,typeOfInput)\n            ).replace(\"duration1\", daysHoursMinutesDigitalUrdu((difference(sd,ed)), typeOfInput)),\n            StringsOfLanguages.ENGLISH.haizdaysinsolution.replace(\"date1\", englishDateFormat(sd, typeOfInput)).replace(\"date2\",\n                englishDateFormat(ed,typeOfInput)\n            ).replace(\"duration1\", daysHoursMinutesDigitalEnglish((difference(sd,ed)), typeOfInput))\n        )\n    }\n    fun istihazaLine(sd:Date, ed:Date, typeOfInput: TypesOfInputs):OutputStringsLanguages{\n        return OutputStringsLanguages(\n            StringsOfLanguages.URDU.istihazadays.replace(\"date1\", urduDateFormat(sd, typeOfInput)).replace(\"date2\",\n                urduDateFormat(ed,typeOfInput)\n            ).replace(\"duration1\", daysHoursMinutesDigitalUrdu(difference(sd,ed), typeOfInput)),\n            StringsOfLanguages.ENGLISH.istihazadays.replace(\"date1\", englishDateFormat(sd, typeOfInput)).replace(\"date2\",\n                englishDateFormat(ed,typeOfInput)\n            ).replace(\"duration1\", daysHoursMinutesDigitalEnglish(difference(sd,ed), typeOfInput))\n\n        )\n    }\n\n    if((fixedDurations[index].days>10 &&\n        (fixedDurations[index].type==DurationType.DAM||\n        fixedDurations[index].type==DurationType.DAM_MUBTADIA))){\n\n        strUrdu += StringsOfLanguages.URDU.dashesline\n        strEnglish += StringsOfLanguages.ENGLISH.dashesline\n        strUrdu += StringsOfLanguages.URDU.solution\n        strEnglish += StringsOfLanguages.ENGLISH.solution\n\n        for(duration in fixedDurations[index].biggerThanTen!!.durationsList){\n            when (duration.type) {\n                DurationType.ISTIHAZA_BEFORE -> {\n                    strUrdu+= istihazaLine(duration.startTime,duration.endDate,typeOfInput).urduString\n                    strEnglish+= istihazaLine(duration.startTime,duration.endDate,typeOfInput).englishString\n                    strUrdu+= StringsOfLanguages.URDU.istihazadetailslineone\n                    strEnglish+= StringsOfLanguages.ENGLISH.istihazadetailslineone\n\n                }\n                DurationType.HAIZ -> {\n                    strUrdu+= haizLine(duration.startTime,duration.endDate,typeOfInput).urduString\n                    strEnglish+= haizLine(duration.startTime,duration.endDate,typeOfInput).englishString\n\n                }\n                DurationType.ISTIHAZA_AFTER -> {\n                    strUrdu+= istihazaLine(duration.startTime,duration.endDate,typeOfInput).urduString\n                    strEnglish+= istihazaLine(duration.startTime,duration.endDate,typeOfInput).englishString\n                    strUrdu+= StringsOfLanguages.URDU.istihazadetailslinetwo.replace(\"date1\",\n                        urduDateFormat(duration.startTime,typeOfInput)\n                    )\n                    strEnglish+= StringsOfLanguages.ENGLISH.istihazadetailslinetwo.replace(\"date1\",\n                        englishDateFormat(duration.startTime,typeOfInput)\n                    )\n                    strUrdu+= StringsOfLanguages.URDU.istihazadetailslineone\n                    strEnglish+= StringsOfLanguages.ENGLISH.istihazadetailslineone\n\n                }\n                DurationType.LESS_THAN_3_HAIZ -> {\n                    strUrdu+= haizLine(duration.startTime,duration.endDate,typeOfInput).urduString\n                    strEnglish+= haizLine(duration.startTime,duration.endDate,typeOfInput).englishString\n                    //maybe we'll wanna add something about itibaar bil khawateem\n                }\n            }\n        }\n\n        strUrdu += StringsOfLanguages.URDU.dashesline\n        strEnglish += StringsOfLanguages.ENGLISH.dashesline\n    }\n\n    return OutputStringsLanguages(strUrdu,strEnglish)\n}\nfun outputStringBiggerThan40HallDuration(fixedDurations: MutableList<FixedDuration>, index: Int):OutputStringsLanguages{\n    val typeOfInput=TypesOfInputs.DURATION\n    var strUrdu = \"\"\n    var strEnglish = \"\"\n    if(fixedDurations[index].days>40&&fixedDurations[index].type==DurationType.DAM_IN_NIFAS_PERIOD){\n        strUrdu+=UnicodeChars.ABACUS\n        strEnglish+=UnicodeChars.ABACUS\n        for(duration in fixedDurations[index].biggerThanForty!!.durationsList){\n            when (duration.type) {\n                DurationType.NIFAS -> {\n                    strUrdu+= StringsOfLanguages.URDU.startingFromNifas.replace(\"duration1\",\n                        daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, typeOfInput)\n                    )\n                    strEnglish+= StringsOfLanguages.ENGLISH.startingFromNifas.replace(\"duration1\",\n                        daysHoursMinutesDigitalEnglish(duration.timeInMilliseconds, typeOfInput)\n                    )\n                }\n                DurationType.ISTIHAZA_AFTER -> {\n                    strUrdu+= StringsOfLanguages.URDU.followedByistehazaAfter.replace(\"duration1\",\n                        daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, typeOfInput)\n                    )\n                    strEnglish+= StringsOfLanguages.ENGLISH.followedByistehazaAfter.replace(\"duration1\",\n                        daysHoursMinutesDigitalEnglish(duration.timeInMilliseconds, typeOfInput)\n                    )\n                }\n                DurationType.HAIZ -> {\n                    strUrdu+= StringsOfLanguages.URDU.followedByHaizAfter.replace(\"duration1\",\n                        daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, typeOfInput)\n                    )\n                    strEnglish+= StringsOfLanguages.ENGLISH.followedByHaizAfter.replace(\"duration1\",\n                        daysHoursMinutesDigitalEnglish(duration.timeInMilliseconds, typeOfInput)\n                    )\n                }\n                DurationType.LESS_THAN_3_HAIZ -> {\n                    strUrdu+= StringsOfLanguages.URDU.followedByHaizAfter.replace(\"duration1\",\n                        daysHoursMinutesDigitalUrdu(duration.timeInMilliseconds, typeOfInput)\n                    )\n                    strUrdu+= StringsOfLanguages.ENGLISH.followedByHaizAfter.replace(\"duration1\",\n                        daysHoursMinutesDigitalEnglish(duration.timeInMilliseconds, typeOfInput)\n                    )\n                    //maybe we'll wanna add something about itibaar bil khawateem\n                }\n            }\n        }\n         }\n    if(strUrdu!=\"\"&&strEnglish!=\"\"){\n        strUrdu+=StringsOfLanguages.URDU.khatimaplusnewline\n        strEnglish+=StringsOfLanguages.ENGLISH.khatimaplusnewline\n    }\n    return OutputStringsLanguages(strUrdu, strEnglish)\n}\nfun outputStringBiggerThan40Hall(fixedDurations: MutableList<FixedDuration>, index: Int, typeOfInput: TypesOfInputs):OutputStringsLanguages{\n\n    var strUrdu = \"\"\n    var strEnglish = \"\"\n\n    fun nifasLine(sd:Date, ed:Date, typeOfInput: TypesOfInputs):OutputStringsLanguages{\n        return OutputStringsLanguages(\n            StringsOfLanguages.URDU.nifasdaysinsolution.replace(\"date1\", urduDateFormat(sd, typeOfInput)).replace(\"date2\",\n                urduDateFormat(ed,typeOfInput)\n            ).replace(\"duration1\", daysHoursMinutesDigitalUrdu((difference(sd,ed)), typeOfInput)),\n            StringsOfLanguages.ENGLISH.nifasdaysinsolution.replace(\"date1\", englishDateFormat(sd, typeOfInput)).replace(\"date2\",\n                englishDateFormat(ed,typeOfInput)\n            ).replace(\"duration1\", daysHoursMinutesDigitalEnglish((difference(sd,ed)), typeOfInput))\n        )\n    }\n    fun haizLine(sd:Date, ed:Date, typeOfInput: TypesOfInputs):OutputStringsLanguages{\n        return OutputStringsLanguages(\n            StringsOfLanguages.URDU.haizdaysinsolution.replace(\"date1\", urduDateFormat(sd, typeOfInput)).replace(\"date2\",\n                urduDateFormat(ed, typeOfInput)\n            ).replace(\"duration1\", daysHoursMinutesDigitalUrdu((difference(sd,ed)), typeOfInput)),\n            StringsOfLanguages.ENGLISH.haizdaysinsolution.replace(\"date1\", englishDateFormat(sd, typeOfInput)).replace(\"date2\",\n                englishDateFormat(ed, typeOfInput)\n            ).replace(\"duration1\", daysHoursMinutesDigitalEnglish((difference(sd,ed)), typeOfInput))\n        )\n    }\n    fun istihazaLine(sd:Date, ed:Date, typeOfInput: TypesOfInputs):OutputStringsLanguages{\n        return OutputStringsLanguages(\n            StringsOfLanguages.URDU.istihazadays.replace(\"date1\", urduDateFormat(sd, typeOfInput)).replace(\"date2\",\n                urduDateFormat(ed,typeOfInput)\n            ).replace(\"duration1\", daysHoursMinutesDigitalUrdu(difference(sd,ed), typeOfInput)),\n            StringsOfLanguages.ENGLISH.istihazadays.replace(\"date1\", englishDateFormat(sd, typeOfInput)).replace(\"date2\",\n                englishDateFormat(ed,typeOfInput)\n            ).replace(\"duration1\", daysHoursMinutesDigitalEnglish(difference(sd,ed), typeOfInput))\n        )\n    }\n\n    if(fixedDurations[index].days>40&&fixedDurations[index].type==DurationType.DAM_IN_NIFAS_PERIOD){\n        strUrdu += StringsOfLanguages.URDU.dashesline\n        strEnglish += StringsOfLanguages.ENGLISH.dashesline\n        strUrdu += StringsOfLanguages.URDU.solution\n        strEnglish += StringsOfLanguages.ENGLISH.solution\n\n        for(duration in fixedDurations[index].biggerThanForty!!.durationsList){\n            when (duration.type) {\n                DurationType.NIFAS -> {\n                    strUrdu+= nifasLine(duration.startTime,duration.endDate, typeOfInput).urduString\n                    strEnglish+= nifasLine(duration.startTime,duration.endDate, typeOfInput).englishString\n                }\n                DurationType.ISTIHAZA_AFTER -> {\n                    strUrdu+= istihazaLine(duration.startTime,duration.endDate, typeOfInput).urduString\n                    strEnglish+= istihazaLine(duration.startTime,duration.endDate, typeOfInput).englishString\n                    strUrdu+= StringsOfLanguages.URDU.istihazadetailslinetwo.replace(\"date1\",\n                        urduDateFormat(duration.startTime,typeOfInput)\n                    )\n                    strEnglish+= StringsOfLanguages.ENGLISH.istihazadetailslinetwo.replace(\"date1\",\n                        englishDateFormat(duration.startTime,typeOfInput)\n                    )\n                    strUrdu+= StringsOfLanguages.URDU.istihazadetailslineone\n                    strEnglish+= StringsOfLanguages.ENGLISH.istihazadetailslineone\n\n                }\n                DurationType.HAIZ -> {\n                    strUrdu+= haizLine(duration.startTime,duration.endDate, typeOfInput).urduString\n                    strEnglish+= haizLine(duration.startTime,duration.endDate, typeOfInput).englishString\n\n                }\n                DurationType.LESS_THAN_3_HAIZ -> {\n                    strUrdu+= haizLine(duration.startTime,duration.endDate,typeOfInput).urduString\n                    strEnglish+= haizLine(duration.startTime,duration.endDate,typeOfInput).englishString\n                    //maybe we'll wanna add something about itibaar bil khawateem\n                }\n            }\n        }\n        strUrdu += StringsOfLanguages.URDU.dashesline\n        strEnglish += StringsOfLanguages.ENGLISH.dashesline\n    }\n\n    return OutputStringsLanguages(strUrdu,strEnglish)\n}\nfun outputStringHeaderLineDuration(fixedDurations: MutableList<FixedDuration>, index: Int, isMustabeen:Boolean = true):OutputStringsLanguages{\n    val typeOfInput=TypesOfInputs.DURATION\n    //in duration we just give the fixed duration\n    var outputStringUrdu = \"\"\n    var outputStringEnglish = \"\"\n    if (fixedDurations[index].type==DurationType.DAM||\n        fixedDurations[index].type==DurationType.DAM_MUBTADIA){\n        val sd:Date = fixedDurations[index].startDate\n        val et = fixedDurations[index].endDate\n        if(fixedDurations[index].days in 3.0..10.0){//if it's between 3 and 10, write haiz\n            outputStringUrdu = StringsOfLanguages.URDU.durationHaiz.replace(\"duration1\",\n                daysHoursMinutesDigitalUrdu((difference(sd,et)), typeOfInput)\n            )\n            outputStringEnglish = StringsOfLanguages.ENGLISH.durationHaiz.replace(\"duration1\",\n                daysHoursMinutesDigitalEnglish((difference(sd,et)), typeOfInput)\n            )\n        }else{//bigger than 10\n            outputStringUrdu = StringsOfLanguages.URDU.durationDam.replace(\"duration1\",\n                daysHoursMinutesDigitalUrdu((difference(sd,et)), typeOfInput)\n            )\n            outputStringEnglish = StringsOfLanguages.ENGLISH.durationDam.replace(\"duration1\",\n                daysHoursMinutesDigitalEnglish((difference(sd,et)), typeOfInput)\n            )\n        }\n\n    }else if (fixedDurations[index].type == DurationType.TUHR||\n        fixedDurations[index].type == DurationType.TUHR_MUBTADIA||\n        fixedDurations[index].type==DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW){\n        val time = fixedDurations[index].timeInMilliseconds\n        outputStringUrdu =  StringsOfLanguages.URDU.durationPaki.replace(\"duration1\",\n            daysHoursMinutesDigitalUrdu(time, typeOfInput)\n        )\n        outputStringEnglish =  StringsOfLanguages.ENGLISH.durationPaki.replace(\"duration1\",\n            daysHoursMinutesDigitalEnglish(time, typeOfInput)\n        )\n        if(fixedDurations[index].type == DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW){\n            outputStringUrdu+=StringsOfLanguages.URDU.becamemutadah\n            outputStringEnglish+=StringsOfLanguages.ENGLISH.becamemutadah\n        }\n\n    }else if (fixedDurations[index].type == DurationType.TUHREFAASID||fixedDurations[index].type==DurationType.TUHREFAASID_MUBTADIA){\n        outputStringUrdu =  StringsOfLanguages.URDU.durationTuhrefasid.replace(\"duration1\",\n            daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds, typeOfInput)\n        )\n        outputStringEnglish =  StringsOfLanguages.ENGLISH.durationTuhrefasid.replace(\"duration1\",\n            daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds, typeOfInput)\n        )\n    }else if (fixedDurations[index].type==DurationType.TUHREFAASID_WITH_ISTEHAZA||\n        fixedDurations[index].type==DurationType.TUHREFAASID_MUBTADIA_WITH_ISTEHAZA){\n        outputStringUrdu =  StringsOfLanguages.URDU.durationTuhreFasidWithAddition.replace(\"duration1\",\n            daysHoursMinutesDigitalUrdu(fixedDurations[index].istihazaAfter, typeOfInput)\n        ).replace(\"duration2\", daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds, typeOfInput)).replace(\"duration3\",\n            daysHoursMinutesDigitalUrdu((fixedDurations[index].istihazaAfter+fixedDurations[index].timeInMilliseconds), typeOfInput)\n        )\n        outputStringEnglish =  StringsOfLanguages.ENGLISH.durationTuhreFasidWithAddition.replace(\"duration1\",\n            daysHoursMinutesDigitalEnglish(fixedDurations[index].istihazaAfter, typeOfInput)\n        ).replace(\"duration2\", daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds, typeOfInput)).replace(\"duration3\",\n            daysHoursMinutesDigitalEnglish((fixedDurations[index].istihazaAfter+fixedDurations[index].timeInMilliseconds), typeOfInput)\n        )\n    }else if (fixedDurations[index].type == DurationType.DAM_IN_NIFAS_PERIOD){\n        val sd = fixedDurations[index].startDate\n        val et = fixedDurations[index].endDate\n        if(fixedDurations[index].days<=40){\n            outputStringUrdu = StringsOfLanguages.URDU.durationNifas.replace(\"duration1\",\n                daysHoursMinutesDigitalUrdu((difference(sd,et)), typeOfInput)\n            )\n            outputStringEnglish = StringsOfLanguages.ENGLISH.durationNifas.replace(\"duration1\",\n                daysHoursMinutesDigitalEnglish((difference(sd,et)), typeOfInput)\n            )\n        }else{//more than 40\n            outputStringUrdu = StringsOfLanguages.URDU.durationDam.replace(\"duration1\",\n                daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds,typeOfInput)\n            )\n            outputStringEnglish = StringsOfLanguages.ENGLISH.durationDam.replace(\"duration1\",\n                daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds,typeOfInput)\n            )\n        }\n    }else if (fixedDurations[index].type == DurationType.TUHR_IN_HAML){\n        if(!isMustabeen){\n            val time = fixedDurations[index].timeInMilliseconds\n            outputStringUrdu =  StringsOfLanguages.URDU.durationPaki.replace(\"duration1\",\n                daysHoursMinutesDigitalUrdu(time, typeOfInput)\n            )\n            outputStringEnglish =  StringsOfLanguages.ENGLISH.durationPaki.replace(\"duration1\",\n                daysHoursMinutesDigitalEnglish(time, typeOfInput)\n            )\n        }\n    }else if (fixedDurations[index].type == DurationType.TUHREFAASID_IN_HAML){\n        if(!isMustabeen){\n                outputStringUrdu =  StringsOfLanguages.URDU.durationTuhreFasidWithAddition.replace(\"duration1\",\n                    daysHoursMinutesDigitalUrdu(fixedDurations[index].istihazaAfter, typeOfInput)\n                ).replace(\"duration2\",\n                    daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds, typeOfInput)\n                ).replace(\"duration3\",\n                    daysHoursMinutesDigitalUrdu((fixedDurations[index].istihazaAfter+fixedDurations[index].timeInMilliseconds), typeOfInput)\n                )\n                outputStringEnglish =  StringsOfLanguages.ENGLISH.durationTuhreFasidWithAddition.replace(\"duration1\",\n                    daysHoursMinutesDigitalEnglish(fixedDurations[index].istihazaAfter, typeOfInput)\n                ).replace(\"duration2\",\n                    daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds, typeOfInput)\n                ).replace(\"duration3\",\n                    daysHoursMinutesDigitalEnglish((fixedDurations[index].istihazaAfter+fixedDurations[index].timeInMilliseconds), typeOfInput)\n                )\n        }\n    }else if (fixedDurations[index].type == DurationType.DAM_IN_HAML){\n\n    }else if (fixedDurations[index].type == DurationType.TUHR_BIGGER_THAN_6_MONTHS){\n        outputStringUrdu = StringsOfLanguages.URDU.twomonthstuhr.replace(\"duration1\",\n            daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds,typeOfInput)\n        )\n        outputStringEnglish = StringsOfLanguages.ENGLISH.twomonthstuhr.replace(\"duration1\",\n            daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds,typeOfInput)\n        )\n    }else if(fixedDurations[index].type == DurationType.ISTEHAZA_AYYAMEQABLIYYA){\n\n    }\n    return OutputStringsLanguages(outputStringUrdu, outputStringEnglish)\n}\nfun outputStringHeaderLine(fixedDurations: MutableList<FixedDuration>, index: Int, typeOfInput: TypesOfInputs, mustabeen:Boolean = true):OutputStringsLanguages{\n    var outputStringUrdu = \"\"\n    var outputStringEnglish = \"\"\n    if (fixedDurations[index].type==DurationType.DAM||\n        fixedDurations[index].type==DurationType.DAM_MUBTADIA){\n        val sd:Date = fixedDurations[index].startDate\n        val et = fixedDurations[index].endDate\n        if(fixedDurations[index].days in 3.0..10.0){//if it's between 3 and 10, write haiz\n            outputStringUrdu = StringsOfLanguages.URDU.haizdays.replace(\"date1\", urduDateFormat(sd, typeOfInput)).replace(\"date2\",\n                urduDateFormat(et,typeOfInput)\n            ).replace(\"duration1\", daysHoursMinutesDigitalUrdu((difference(sd,et)), typeOfInput))\n            outputStringEnglish = StringsOfLanguages.ENGLISH.haizdays.replace(\"date1\",\n                englishDateFormat(sd, typeOfInput)\n            ).replace(\"date2\", englishDateFormat(et,typeOfInput)).replace(\"duration1\",\n                daysHoursMinutesDigitalEnglish((difference(sd,et)), typeOfInput)\n            )\n        }else{//bigger than 10\n            if (fixedDurations[index].indices.size>1){//this dam is made up of more than 1\n                outputStringUrdu = StringsOfLanguages.URDU.continuosbleeding.replace(\"date1\",\n                    urduDateFormat(sd, typeOfInput)\n                ).replace(\"date2\", urduDateFormat(et, typeOfInput)).replace(\"duration1\",\n                    daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds,typeOfInput)\n                )\n                outputStringEnglish = StringsOfLanguages.ENGLISH.continuosbleeding.replace(\"date1\",\n                    englishDateFormat(sd, typeOfInput)\n                ).replace(\"date2\", englishDateFormat(et, typeOfInput)).replace(\"duration1\",\n                    daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds,typeOfInput)\n                )\n            }else{\n                outputStringUrdu = StringsOfLanguages.URDU.blooddays.replace(\"date1\", urduDateFormat(sd, typeOfInput)).replace(\"date2\",\n                    urduDateFormat(et, typeOfInput)\n                ).replace(\"duration1\",\n                    daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds,typeOfInput)\n                )\n                outputStringEnglish = StringsOfLanguages.ENGLISH.blooddays.replace(\"date1\",\n                    englishDateFormat(sd, typeOfInput)\n                ).replace(\"date2\", englishDateFormat(et, typeOfInput)).replace(\"duration1\",\n                    daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds,typeOfInput)\n                )\n            }\n        }\n\n    }else if (fixedDurations[index].type == DurationType.TUHR||\n        fixedDurations[index].type == DurationType.TUHR_MUBTADIA||\n        fixedDurations[index].type==DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW){\n        val time = fixedDurations[index].timeInMilliseconds\n        outputStringUrdu =  StringsOfLanguages.URDU.pakidays.replace(\"duration1\",\n            daysHoursMinutesDigitalUrdu(time, typeOfInput)\n        )\n        outputStringEnglish =  StringsOfLanguages.ENGLISH.pakidays.replace(\"duration1\",\n            daysHoursMinutesDigitalEnglish(time, typeOfInput)\n        )\n        if(fixedDurations[index].type == DurationType.TUHR_MUBTADIA_BECAME_A_MUTADA_NOW){\n            outputStringUrdu+=StringsOfLanguages.URDU.becamemutadah\n            outputStringEnglish+=StringsOfLanguages.ENGLISH.becamemutadah\n        }\n\n    }else if (fixedDurations[index].type == DurationType.TUHREFAASID||fixedDurations[index].type==DurationType.TUHREFAASID_MUBTADIA){\n        outputStringUrdu =  StringsOfLanguages.URDU.tuhrfasid.replace(\"duration1\",\n            daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds, typeOfInput)\n        )\n        outputStringEnglish =  StringsOfLanguages.ENGLISH.tuhrfasid.replace(\"duration1\",\n            daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds, typeOfInput)\n        )\n    }else if (fixedDurations[index].type==DurationType.TUHREFAASID_WITH_ISTEHAZA||\n        fixedDurations[index].type==DurationType.TUHREFAASID_MUBTADIA_WITH_ISTEHAZA){\n        outputStringUrdu =  StringsOfLanguages.URDU.tuhrfasidwithaddition.replace(\"duration1\",\n            daysHoursMinutesDigitalUrdu(fixedDurations[index].istihazaAfter, typeOfInput)\n        ).replace(\"duration2\", daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds, typeOfInput)).replace(\"duration3\",\n            daysHoursMinutesDigitalUrdu((fixedDurations[index].istihazaAfter+fixedDurations[index].timeInMilliseconds), typeOfInput)\n        )\n        outputStringEnglish =  StringsOfLanguages.ENGLISH.tuhrfasidwithaddition.replace(\"duration1\",\n            daysHoursMinutesDigitalEnglish(fixedDurations[index].istihazaAfter, typeOfInput)\n        ).replace(\"duration2\", daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds, typeOfInput)).replace(\"duration3\",\n            daysHoursMinutesDigitalEnglish((fixedDurations[index].istihazaAfter+fixedDurations[index].timeInMilliseconds), typeOfInput)\n        )\n    }else if (fixedDurations[index].type == DurationType.DAM_IN_NIFAS_PERIOD){\n        val sd = fixedDurations[index].startDate\n        val et = fixedDurations[index].endDate\n        if(fixedDurations[index].days<=40){\n            outputStringUrdu = StringsOfLanguages.URDU.nifasdays.replace(\"date1\", urduDateFormat(sd, typeOfInput)).replace(\"date2\",\n                urduDateFormat(et,typeOfInput)\n            ).replace(\"duration1\", daysHoursMinutesDigitalUrdu((difference(sd,et)), typeOfInput))\n            outputStringEnglish = StringsOfLanguages.ENGLISH.nifasdays.replace(\"date1\",\n                englishDateFormat(sd, typeOfInput)\n            ).replace(\"date2\", englishDateFormat(et,typeOfInput)).replace(\"duration1\",\n                daysHoursMinutesDigitalEnglish((difference(sd,et)), typeOfInput)\n            )\n        }else{//more than 40\n            outputStringUrdu = StringsOfLanguages.URDU.blooddays.replace(\"date1\", urduDateFormat(sd, typeOfInput)).replace(\"date2\",\n                urduDateFormat(et, typeOfInput)\n            ).replace(\"duration1\", daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds,typeOfInput))\n            outputStringEnglish = StringsOfLanguages.ENGLISH.blooddays.replace(\"date1\",\n                englishDateFormat(sd, typeOfInput)\n            ).replace(\"date2\", englishDateFormat(et, typeOfInput)).replace(\"duration1\",\n                daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds,typeOfInput)\n            )\n        }\n    }else if (fixedDurations[index].type == DurationType.TUHR_IN_HAML){\n        if(!mustabeen){\n            val time = fixedDurations[index].timeInMilliseconds\n            outputStringUrdu =  StringsOfLanguages.URDU.pakidays.replace(\"duration1\",\n                daysHoursMinutesDigitalUrdu(time, typeOfInput)\n            )\n            outputStringEnglish =  StringsOfLanguages.ENGLISH.pakidays.replace(\"duration1\",\n                daysHoursMinutesDigitalEnglish(time, typeOfInput)\n            )\n        }\n    }else if (fixedDurations[index].type == DurationType.TUHREFAASID_IN_HAML){\n        if(!mustabeen){\n            outputStringUrdu =  StringsOfLanguages.URDU.tuhrfasidwithaddition.replace(\"duration1\",\n                daysHoursMinutesDigitalUrdu(fixedDurations[index].istihazaAfter, typeOfInput)\n            ).replace(\"duration2\", daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds, typeOfInput)).replace(\"duration3\",\n                daysHoursMinutesDigitalUrdu((fixedDurations[index].istihazaAfter+fixedDurations[index].timeInMilliseconds), typeOfInput)\n            )\n            outputStringEnglish =  StringsOfLanguages.ENGLISH.tuhrfasidwithaddition.replace(\"duration1\",\n                daysHoursMinutesDigitalEnglish(fixedDurations[index].istihazaAfter, typeOfInput)\n            ).replace(\"duration2\",\n                daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds, typeOfInput)\n            ).replace(\"duration3\",\n                daysHoursMinutesDigitalEnglish((fixedDurations[index].istihazaAfter+fixedDurations[index].timeInMilliseconds), typeOfInput)\n            )\n        }\n    }else if (fixedDurations[index].type == DurationType.DAM_IN_HAML){\n\n    }else if (fixedDurations[index].type == DurationType.TUHR_BIGGER_THAN_6_MONTHS){\n        outputStringUrdu = StringsOfLanguages.URDU.twomonthstuhr.replace(\"duration1\",\n            daysHoursMinutesDigitalUrdu(fixedDurations[index].timeInMilliseconds,typeOfInput)\n        )\n        outputStringEnglish = StringsOfLanguages.ENGLISH.twomonthstuhr.replace(\"duration1\",\n            daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds,typeOfInput)\n        )\n    }else if (fixedDurations[index].type == DurationType.ISTEHAZA_AYYAMEQABLIYYA){\n        val sd = fixedDurations[index].startDate\n        val et = fixedDurations[index].endDate\n        outputStringUrdu = StringsOfLanguages.URDU.daysayyameqabliyya.replace(\"date1\", urduDateFormat(sd, typeOfInput)).replace(\"date2\",\n            urduDateFormat(et,typeOfInput)\n        ).replace(\"duration1\", daysHoursMinutesDigitalUrdu((difference(sd,et)), typeOfInput))\n        outputStringEnglish = StringsOfLanguages.ENGLISH.daysayyameqabliyya.replace(\"date1\",\n            englishDateFormat(sd, typeOfInput)\n        ).replace(\"date2\", englishDateFormat(et,typeOfInput)).replace(\"duration1\",\n            daysHoursMinutesDigitalEnglish((difference(sd,et)), typeOfInput)\n        )\n    }\n    return OutputStringsLanguages(outputStringUrdu,outputStringEnglish)\n}\n\n//fun outputStringHeaderLine(fixedDurations: MutableList<FixedDuration>, index:Int, isDateOnly: Boolean):String{\n//    if((index +1)< fixedDurations.size && fixedDurations[index+1].istihazaAfter>0){\n//        return \"<b>${daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds,isDateOnly)} ${fixedDurations[index].type}</b>\\n\"\n//    }else{\n//        return \"<b>${daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds,isDateOnly)} ${fixedDurations[index].type}</b>\\n\"\n//\n//    }\n//}\n//\n//fun outputStringSumOfIndicesLine(fixedDurations: MutableList<FixedDuration>, durations:List<Duration>, index:Int, isDateOnly: Boolean):String{\n//    if(fixedDurations[index].indices.size>1){\n//        var sum = 0L\n//        var str = \"\"\n//        for (index in fixedDurations[index].indices){\n//            sum+=durations[index].timeInMilliseconds\n//            str += \" + ${daysHoursMinutesDigitalEnglish(durations[index].timeInMilliseconds,isDateOnly)}\"\n//        }\n//        str=str.removePrefix(\" + \")\n//        return \"\\t${str} = ${daysHoursMinutesDigitalEnglish(sum,isDateOnly)}\\n\"\n//    }else{\n//        return \"\"\n//    }\n//}\n//\n//fun outputStringIstihazaAfterLine(fixedDurations: MutableList<FixedDuration>,index: Int, isDateOnly: Boolean):String{\n//    val istihazaAfter = fixedDurations[index].istihazaAfter\n//    var str = \"\"\n//    if(istihazaAfter!=0L){\n//        str +=\"\\t${daysHoursMinutesDigitalEnglish(fixedDurations[index].timeInMilliseconds,isDateOnly)} \" +\n//                \"tuhr + ${daysHoursMinutesDigitalEnglish(istihazaAfter,isDateOnly)} istihaza \" +\n//                \"= ${daysHoursMinutesDigitalEnglish((fixedDurations[index].timeInMilliseconds +\n//                        fixedDurations[index].istihazaAfter),isDateOnly)} tuhr-e-faasid\\n\"\n//    }\n//\n//    return str\n//}\n//\n//fun outputStringBiggerThan10Hall(fixedDurations: MutableList<FixedDuration>,index:Int, isDateOnly: Boolean):String{\n//    val mp = fixedDurations[index].biggerThanTen?.mp ?: return \"\"\n//    val gp = fixedDurations[index].biggerThanTen?.gp ?: return \"\"\n//    val dm = fixedDurations[index].biggerThanTen?.dm ?: return \"\"\n//    val hz = fixedDurations[index].biggerThanTen?.hz ?: return \"\"\n//    val qism = fixedDurations[index].biggerThanTen?.qism ?: return \"\"\n//    val istihazaBefore = fixedDurations[index].biggerThanTen?.istihazaBefore ?: return \"\"\n//    val haiz = fixedDurations[index].biggerThanTen?.haiz ?: return \"\"\n//    val istihazaAfter = fixedDurations[index].biggerThanTen?.istihazaAfter ?: return \"\"\n//    val aadatTuhr = fixedDurations[index].biggerThanTen?.aadatTuhr ?: return \"\"\n//    val aadatHaz = fixedDurations[index].biggerThanTen?.aadatHaiz ?: return \"\"\n//\n//\n//    //output hukm:\n//    var str =\"\"\n////    var str = \"Rough work \\n\"\n////    str += \"MP\\tGP\\tDm\\tHz\\tQism\\n\"\n//\n//    str += \"\\t${daysHoursMinutesDigitalEnglish(mp,isDateOnly)}\\t${daysHoursMinutesDigitalEnglish(gp,isDateOnly)}\\t\" +\n//            \"${daysHoursMinutesDigitalEnglish(dm,isDateOnly)}\\t${daysHoursMinutesDigitalEnglish(hz,isDateOnly)}\\t${qism}\\n\"\n//\n//    str +=\"\\tAadat: ${daysHoursMinutesDigitalEnglish(aadatHaz,isDateOnly)}/${daysHoursMinutesDigitalEnglish(aadatTuhr,isDateOnly)}\\n\"\n//\n//    str += \"\\tOut of ${daysHoursMinutesDigitalEnglish(dm,isDateOnly)}, the first \"\n//\n//    if (istihazaBefore>0){\n//        str += \"${daysHoursMinutesDigitalEnglish(istihazaBefore,isDateOnly)} are istihaza, then the next \"\n//    }\n//    str += \"${daysHoursMinutesDigitalEnglish(haiz,isDateOnly)} are haiz, \"\n//\n//    //if istihazaAfter is bigger than addatTuhr +3, run daur\n//    if (istihazaAfter>=aadatTuhr+3){\n//        //find quotient and remainder\n//        val remainder = istihazaAfter%(aadatHaz+aadatTuhr)\n//        val quotient = ((istihazaAfter-remainder)/(aadatHaz+aadatTuhr))\n//\n//        if(remainder == 0L){\n//            for (j in 1 until quotient){\n//                str+=\"then the next ${daysHoursMinutesDigitalEnglish(aadatTuhr,isDateOnly)} are istihaza, \" +\n//                        \"then the next ${daysHoursMinutesDigitalEnglish(aadatHaz,isDateOnly)} are haiz, \"\n//            }\n//            str+=\"then the next ${daysHoursMinutesDigitalEnglish(aadatTuhr,isDateOnly)} are istihaza, \" +\n//                    \"then the last ${daysHoursMinutesDigitalEnglish(aadatHaz,isDateOnly)} are haiz. \"\n//\n//        }else{//remainder exists\n//            for (j in 1 .. quotient){\n//                str+=\"then the next ${daysHoursMinutesDigitalEnglish(aadatTuhr,isDateOnly)} are istihaza, \" +\n//                        \"then the next ${daysHoursMinutesDigitalEnglish(aadatHaz,isDateOnly)} are haiz, \"\n//            }\n//            if (remainder<aadatTuhr + 3){//it ended in tuhr\n//                str+=\"then the last ${daysHoursMinutesDigitalEnglish(remainder,isDateOnly)} are istihaza.\\n\"\n//\n//            }else{//it ended in haiz\n//                str+=\"then the next ${daysHoursMinutesDigitalEnglish(aadatTuhr,isDateOnly)} are tuhr, \" +\n//                        \"then the last ${daysHoursMinutesDigitalEnglish(remainder-aadatTuhr,isDateOnly)} are haiz\\n\"\n//                //change aadatHaiz\n//                val newAadatHaz = remainder-aadatTuhr\n//                //add aadat line\n//                str+=\"\\tAadat: ${daysHoursMinutesDigitalEnglish(newAadatHaz,isDateOnly)}/${daysHoursMinutesDigitalEnglish(aadatTuhr,isDateOnly)}\\n\"\n//\n//            }\n//        }\n//    }else{\n//        str += \"and the last ${daysHoursMinutesDigitalEnglish(istihazaAfter,isDateOnly)} are istihaza.\\n\"\n//\n//    }\n//\n//    str+=\"\\t\\n\"\n//\n//    //output hukm in dates\n//    val istihazaBeforeStartDate:Date = fixedDurations[index].startDate\n//    val haizStartDate = addTimeToDate(istihazaBeforeStartDate, istihazaBefore)\n//    val istihazaAfterStartDate = addTimeToDate(haizStartDate, haiz)\n//    val istihazaAfterEndDate = addTimeToDate(istihazaAfterStartDate, istihazaAfter)\n//\n//    if(istihazaBefore!=0L){\n//        str+=\"\\tFrom ${englishDateFormat(istihazaBeforeStartDate, isDateOnly)} to ${englishDateFormat(haizStartDate, isDateOnly)} is istihaza, yaqeeni paki\\n\"\n//    }\n//    str+=\"\\tFrom ${englishDateFormat(haizStartDate, isDateOnly)} to ${englishDateFormat(istihazaAfterStartDate, isDateOnly)} is haiz\\n\"\n//    if(istihazaAfter!=0L){\n//        if (istihazaAfter>=aadatTuhr+3){\n//            //find quotient and remainder\n//            val remainder = istihazaAfter%(aadatHaz+aadatTuhr)\n//            val quotient = ((istihazaAfter-remainder)/(aadatHaz+aadatTuhr))\n//\n//\n//            var aadatTuhrStartDate:Date = istihazaAfterStartDate\n//            var aadatTuhrEndDate:Date\n//            var aadatHaizEndDate:Date\n//            for (j in 1 .. quotient){\n//                aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,aadatTuhr)\n//                aadatHaizEndDate = addTimeToDate(aadatTuhrEndDate,aadatHaz)\n//                str+= \"\\tFrom ${englishDateFormat(aadatTuhrStartDate, isDateOnly)} to ${englishDateFormat(aadatTuhrEndDate, isDateOnly)} is istihaza, yaqeeni paki\\n\"\n//                str+= \"\\tFrom ${englishDateFormat(aadatTuhrEndDate, isDateOnly)} to ${englishDateFormat(aadatHaizEndDate, isDateOnly)} is haiz\\n\"\n//                aadatTuhrStartDate=aadatHaizEndDate\n//            }\n//            if (remainder<aadatTuhr + 3 && remainder!=0L){//it ended in tuhr\n//                str+= \"\\tFrom ${englishDateFormat(aadatTuhrStartDate, isDateOnly)} to ${englishDateFormat(istihazaAfterEndDate, isDateOnly)} is istihaza, yaqeeni paki\\n\"\n//\n//            }else{//it ended in haiz or remainder is 0\n//                aadatTuhrEndDate = addTimeToDate(aadatTuhrStartDate,aadatTuhr)\n//                str+= \"\\tFrom ${englishDateFormat(aadatTuhrStartDate, isDateOnly)} to ${englishDateFormat(aadatTuhrEndDate, isDateOnly)} is istihaza, yaqeeni paki\\n\"\n//                str+= \"\\tFrom ${englishDateFormat(aadatTuhrEndDate, isDateOnly)} to ${englishDateFormat(istihazaAfterEndDate, isDateOnly)} is haiz\\n\"\n//\n//                //change aadatHaiz if remainder is not zero (if it is zero, aadat doesn't change, so shouldn't be printed\n//                if (remainder!=0L){\n//                    val newAadatHaz1 = remainder-aadatTuhr\n//                    //add aadat line\n//                    str+=\"\\tAadat: ${daysHoursMinutesDigitalEnglish(newAadatHaz1,isDateOnly)}/${daysHoursMinutesDigitalEnglish(aadatTuhr,isDateOnly)}\\n\"\n//                }\n//           }\n//\n//        }else{//no duar\n//            str+=\"\\tFrom ${englishDateFormat(istihazaAfterStartDate, isDateOnly)} to ${englishDateFormat(istihazaAfterEndDate, isDateOnly)} is istihaza, yaqeeni paki\\n\"\n//\n//        }\n//    }\n//   return str\n//}\n\nfun generateGetDifferenceString(durationTypes:MutableList<DurationTypes>):String {\n    var str = \"\"\n    for( durationType in durationTypes){\n        var type = \"\"\n        if (durationType.type==DateTypes.YAQEENI_PAKI){type=\"yaqeeni paki\"}\n        else if (durationType.type==DateTypes.YAQEENI_NA_PAKI){type=\"yaqeeni na paki\"}\n        else if (durationType.type==DateTypes.AYYAAM_E_SHAKK_KHUROOJ){type=\"shakk fil khurooj\"}\n        else if (durationType.type==DateTypes.AYYAAM_E_SHAKK_DUKHOOL){type=\"shakk fil dukhool\"}\n        val startTime=durationType.startTime\n        val endTime = durationType.endTime\n\n        if(durationType.type==DateTypes.AYYAAM_E_SHAKK_DUKHOOL){\n            str += \"${UnicodeChars.YELLOW_CIRCLE} <b><em>From ${englishDateFormat(startTime,TypesOfInputs.DATE_ONLY)} to ${englishDateFormat(endTime,TypesOfInputs.DATE_ONLY)} is ${type}</em></b>\\n\\n\"\n        }else if (durationType.type==DateTypes.YAQEENI_PAKI){\n            str += \"${UnicodeChars.WHITE_CIRCLE} From ${englishDateFormat(startTime,TypesOfInputs.DATE_ONLY)} to ${englishDateFormat(endTime,TypesOfInputs.DATE_ONLY)} is ${type}\\n\\n\"\n        }else if (durationType.type==DateTypes.YAQEENI_NA_PAKI){\n            str += \"${UnicodeChars.RED_CIRCLE} From ${englishDateFormat(startTime,TypesOfInputs.DATE_ONLY)} to ${englishDateFormat(endTime,TypesOfInputs.DATE_ONLY)} is ${type}\\n\\n\"\n        }else if (durationType.type==DateTypes.AYYAAM_E_SHAKK_KHUROOJ){\n            str += \"${UnicodeChars.GREEN_CIRCLE} <b><em>From ${englishDateFormat(startTime,TypesOfInputs.DATE_ONLY)} to ${englishDateFormat(endTime,TypesOfInputs.DATE_ONLY)} is ${type}</em></b>\\n\\n\"\n        }\n\n    }\n    return str\n}\n\n\n\n\n","import kotlinx.html.*\nimport kotlinx.html.consumers.onFinalize\nimport kotlinx.html.dom.createTree\nimport org.w3c.dom.*\nimport kotlin.js.Date\nimport kotlin.time.DurationUnit\nimport kotlin.time.ExperimentalTime\nimport kotlin.time.toDuration\n\n// VALS TO USE\nconst val MILLISECONDS_IN_A_DAY:Long = 86400000\nconst val MILLISECONDS_IN_AN_HOUR = 3600000\nconst val MILLISECONDS_IN_A_MINUTE = 60000\nconst val TAB:String = \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"\n\nval MonthNames = arrayOf(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\nval urduMonthNames = arrayOf(\"جنوری\", \"فروری\", \"مارچ\", \"اپریل\",\n    \"مئی\", \"جون\", \"جولائ\", \"اگست\", \"ستمبر\", \"اکتوبر\", \"نومبر\", \"دسمبر\")\n\nobject Events {\n    const val VISIBILITY_CHANGE = \"visibilitychange\"\n}\n\nobject UnicodeChars {\n    const val RED_CIRCLE = \"&#9830;&#65039;\"        // RED_DIAMOND\n    const val WHITE_CIRCLE = \"&#128160;\"            // WHITE_DIAMOND\n    const val YELLOW_CIRCLE = \"&#x1F538;\"           // ORANGE_DIAMOND\n    const val GREEN_CIRCLE = \"&#10052;&#65039;\"     // SNOWFLAKE\n    const val BLACK_SQUARE = \"&#9642;\"\n    const val FAT_DASH = \"&#x2796;\"\n    const val ROSE = \"&#128221;\"                    // MEMO\n    const val RAINBOW = \"&#9997;&#65039;\"           // HAND_WRITING\n    const val BLUE_SWIRL = \"\\uD83C\\uDF00\"\n    const val ABACUS = \"&#129518;\"\n}\n\nobject Styles {\n    const val TABLE_ROW_STYLE = \"float: left;\"\n    const val TABLE_CELL_STYLE = \"float: left; width:30px; height:24px; text-align:center; padding: 6px 0 0 0\"\n    const val TABLE_CELL_BORDER_STYLE = \"float: left; width:28px; height:22px; text-align:center; padding: 6px 0 0 0; border: 1px solid black\"\n    const val TABLE_HEAD_STYLE = \"float:left\"\n    const val TABLE_BODY_STYLE = \"float:left\"\n    const val NEW_ROW = \"clear:both\"\n    const val HALF_CELL = \"float: left; width:15px; height:30px; text-align:center\"\n    const val EMPTY_CELL_STYLE = \"float: left; width:28px; height:15px; border-left:1px solid black; border-right:1px solid black\"\n    const val EMPTY_HALF_CELL_STYLE = \"float: left; width:15px; height:15px\"\n    const val NA_PAKI = \"; background-color: red\"\n    const val AYYAAM_E_SHAKK = \"; background-color: yellow\"\n}\n\n// HTML DOM MANIP\nval Document.isHidden get() = this[\"hidden\"] as Boolean\n\nprivate fun insertRelative(\n    ownerDocument: Document,\n    block: TagConsumer<HTMLElement>.() -> Unit,\n    insert: (Element) -> Unit\n): List<HTMLElement> = ArrayList<HTMLElement>().also { result ->\n    ownerDocument.createTree().onFinalize { child, partial ->\n        if (!partial) {\n            result.add(child)\n            insert(child)\n        }\n    }.block()\n}\nprivate fun Element.insertRelative(block: TagConsumer<HTMLElement>.() -> Unit, insert: (Element) -> Unit = {}) =\n    insertRelative(ownerDocument!!, block, insert)\nprivate fun Node.insertRelative(block: TagConsumer<HTMLElement>.() -> Unit, insert: (Node) -> Unit) =\n    insertRelative(ownerDocument!!, block, insert)\nprivate fun ChildNode.insertRelative(block: TagConsumer<HTMLElement>.() -> Unit, insert: (ChildNode) -> Unit) =\n    insertRelative((this as Node).ownerDocument!!, block, insert)\n\nfun Node.appendChild(block: TagConsumer<HTMLElement>.() -> Unit) = insertRelative(block) { node -> appendChild(node) }\n@Suppress(\"MoveLambdaOutsideParentheses\", \"RedundantLambdaArrow\")\nfun Element.replaceChildren(block: TagConsumer<HTMLElement>.() -> Unit) =\n    replaceChildren(*insertRelative(block).toTypedArray())\nfun ChildNode.before(block: TagConsumer<HTMLElement>.() -> Unit) = insertRelative(block) { node -> before(node) }\nfun ChildNode.after(block: TagConsumer<HTMLElement>.() -> Unit) = insertRelative(block) { node -> after(node) }\n\nfun ParentNode.getChildById(id: String) = querySelector(\"#$id\")\n\nfun Element.replaceChildren(vararg nodes: Node) { asDynamic().replaceChildren.apply(this, nodes) }\n\ninline fun <reified T : Element> Element.getAncestor(predicate: (Element) -> Boolean = { true }): T? {\n    var parent: Element? = parentElement\n    while (true) {\n        if (parent == null) return null\n        if (parent is T && predicate(parent)) return parent\n        parent = parent.parentElement\n    }\n}\n\nvar Element.visibility: Boolean\n    get() = !classList.contains(CssC.INVIS)\n    set(visible) { classList.toggle(CssC.INVIS, !visible) }\n\nval HTMLTableRowElement.rowIndexWithinTableBody get() =\n    (parentElement as HTMLTableSectionElement).children.asList().indexOf(this)\n\n\n@HtmlTagMarker\nfun FlowOrInteractiveOrPhrasingContent.dateTimeLocalInputWithFallbackGuidelines(\n    classes: String? = null,\n    block: INPUT.() -> Unit = {}\n) {\n    dateTimeLocalInput(classes = classes) {\n        placeholder = \"YYYY-MM-DDThh:mm\"\n        pattern = \"[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}\"\n        block()\n    }\n}\n\n@HtmlTagMarker\nfun FlowOrInteractiveOrPhrasingContent.customDateTimeInput(\n    isDateOnly: Boolean,\n    classes: String? = null,\n    block: INPUT.() -> Unit = {}\n) {\n    if (isDateOnly)  dateInput(classes = classes, block = block)\n    else dateTimeLocalInputWithFallbackGuidelines(classes = classes, block = block)\n}\n\n\n/* Looks like the compiler argument for opting in to experimental features\n * ('-Xopt-in=kotlin.RequiresOptIn') is not actually enforced, so suppressing the warning about it's\n * requirement here for now..\n */\n@Suppress(\"EXPERIMENTAL_IS_NOT_ENABLED\")\n@OptIn(ExperimentalTime::class)\nfun Date.offsetLocalTimeToUtc() =\n    Date(getTime() - getTimezoneOffset().toDuration(DurationUnit.MINUTES).inWholeMilliseconds)\n\nfun parseToLocalDate(dateString: String, isDateOnly: Boolean): Date {\n    val date = Date(dateString)\n    return if (isDateOnly) date else date.offsetLocalTimeToUtc()\n}\n\nfun Date.toDateInputString(isDateOnly: Boolean): String {\n    val letterToTrimFrom = if (isDateOnly) 'T' else 'Z'\n    val string = toISOString().takeWhile { it != letterToTrimFrom }\n    return if (isDateOnly) string\n    else string.take(16) // Drop any precision below minutes (seconds, milliseconds, etc.)\n}\n\nfun convertInputValue(value: String, isDateOnly: Boolean): String {\n    if (value.isEmpty()) return \"\"\n    return parseToLocalDate(value, !isDateOnly) // Inverting the isDateOnly since we need to pass the existing state\n        .toDateInputString(isDateOnly)\n}\n\nfun currentTimeString(isDateOnly: Boolean) = Date().offsetLocalTimeToUtc().toDateInputString(isDateOnly)\n\nfun addTimeToDate(date: Date,timeInMilliseconds:Long):Date { return Date(date.getTime() + timeInMilliseconds) }\n\nfun parseDays(input: String): Long? {\n    if (input.isEmpty()) return null\n\n    val sections = input.split(':')\n\n    val days = sections[0].toLong()\n    var millisecs:Long = days * MILLISECONDS_IN_A_DAY\n\n    val hours = sections.getOrNull(1)?.toInt() ?: return millisecs\n    require(hours in 0 until 24) { \"Invalid hours value\" }\n    millisecs += hours * MILLISECONDS_IN_AN_HOUR\n\n    val minutes = sections.getOrNull(2)?.toInt() ?: return millisecs\n    require(minutes in 0 until 60) { \"Invalid minutes value\" }\n    millisecs += minutes * MILLISECONDS_IN_A_MINUTE\n\n    return millisecs\n}\n\nfun milliToDayHrMin(numberOfMilliseconds:Long): Array<Double> {\n    val days:Double = kotlin.math.floor((numberOfMilliseconds / MILLISECONDS_IN_A_DAY).toDouble())\n    var milisecsleft = numberOfMilliseconds - days * MILLISECONDS_IN_A_DAY\n    val hours:Double = kotlin.math.floor((milisecsleft / MILLISECONDS_IN_AN_HOUR))\n    milisecsleft -= hours * MILLISECONDS_IN_AN_HOUR\n    val minutes = kotlin.math.floor(milisecsleft / MILLISECONDS_IN_A_MINUTE)\n    return arrayOf(days, hours, minutes)\n}\n\nfun daysHoursMinutesDigitalUrdu(numberOfMilliseconds:Long, typeOfInput: TypesOfInputs):String {\n//    val days:Double = kotlin.math.floor((numberOfMilliseconds/MILLISECONDS_IN_A_DAY).toDouble())\n//    var milisecsleft = numberOfMilliseconds - days*MILLISECONDS_IN_A_DAY\n//    val hours:Double = kotlin.math.floor((milisecsleft/(3600000)))\n//    milisecsleft -= hours*3600000\n//    val minutes = kotlin.math.floor(milisecsleft/60000)\n    var isDateOnly = false\n    if(typeOfInput==TypesOfInputs.DATE_ONLY){isDateOnly=true}\n\n    val (days, hours, minutes) = milliToDayHrMin(numberOfMilliseconds)\n\n    val strHours = when (hours) {\n        1.0 -> \"$hours گھنٹہ\"\n        0.0 -> \"\"\n        else -> \"$hours گھنٹے\"\n    }\n    val strMinutes = if (minutes == 0.0) \"\" else \"$minutes منٹ\"\n    val strDays = if (days == 0.0) \"\" else \"$days دن\"\n\n//    if(hours == 1.0){\n//        strHours = \"$hours گھنٹہ\"\n//    }\n//    if(hours==0.0){\n//        strHours = \"\"\n//    }\n\n//    if(days==0.0){\n//        strDays = \"\"\n//    }\n//    if(minutes == 0.0){\n//        strMinutes = \"\"\n//    }\n\n    var returnStatement = \"$strDays $strHours $strMinutes\"\n    if (strDays.isEmpty() && strHours.isEmpty() && strMinutes.isEmpty())  returnStatement = \"0 منٹ\"\n    if (isDateOnly) returnStatement = strDays\n    return returnStatement.trim().trimEnd()\n}\n\nfun daysHoursMinutesDigitalEnglish(numberOfMilliseconds:Long, typeOfInput: TypesOfInputs):String{\n//    val days:Double = kotlin.math.floor((numberOfMilliseconds/MILLISECONDS_IN_A_DAY).toDouble())\n//    var milisecsleft = numberOfMilliseconds - days*MILLISECONDS_IN_A_DAY\n//    val hours:Double = kotlin.math.floor((milisecsleft/(3600000)))\n//    milisecsleft -= hours*3600000\n//    val minutes = kotlin.math.floor(milisecsleft/60000)\n    var isDateOnly = false\n    if(typeOfInput==TypesOfInputs.DATE_ONLY){isDateOnly=true}\n\n\n    val (days, hours, minutes) = milliToDayHrMin(numberOfMilliseconds)\n\n    var strHours = hours.toString()\n    var strMinutes = minutes.toString()\n    var strDays = days.toString()\n\n    when (days) {\n        1.0 -> strDays += \" day\"\n        0.0 -> strDays = \"\"\n        else -> strDays += \" days\"\n    }\n    when (hours) {\n        1.0 -> strHours += \" hour\"\n        0.0 -> strHours = \"\"\n        else -> strHours += \" hours\"\n    }\n    when (minutes) {\n        1.0 -> strMinutes += \" minute\"\n        0.0 -> strMinutes = \"\"\n        else -> strMinutes += \" minutes\"\n    }\n\n    var returnStatement =\n        if(strDays.isNotEmpty() && strHours.isNotEmpty() && strMinutes.isNotEmpty() ) \"$strDays, $strHours and $strMinutes\"\n\n        else if(strDays.isNotEmpty() && strHours.isNotEmpty()) \"$strDays and $strHours\"\n        else if(strDays.isNotEmpty() && strMinutes.isNotEmpty()) \"$strDays and $strMinutes\"\n        else if(strHours.isNotEmpty() && strMinutes.isNotEmpty()) \"$strHours and $strMinutes\"\n\n        else if(strDays.isEmpty() && strHours.isEmpty() && strMinutes.isEmpty()) \"0 minutes\"\n\n        else strDays + strHours + strMinutes\n\n    if(isDateOnly) returnStatement = if (days == 1.0) \"1 day\" else strDays\n\n    return returnStatement.trimEnd().trim()\n}\n\n fun englishDateFormat(date: Date, typeOfInput: TypesOfInputs):String{\n     var isDateOnly = false\n     if(typeOfInput==TypesOfInputs.DATE_ONLY){isDateOnly=true}\n\n     //   Sat, 05 Jun 2021 06:21:59 GMT\n     var dateStr = (date.toUTCString()).dropLast(18).drop(5)\n     if(dateStr.startsWith(\"0\")) dateStr = dateStr.drop(1)\n     var hours = (date.toUTCString()).dropLast(10).drop(17).toInt()\n     val minutesStr = (date.toUTCString()).dropLast(7).drop(20)\n     var ampm = \"am\"\n     if (hours >=12) {\n         hours -= 12\n         ampm = \"pm\"\n     }\n     if (hours == 0) hours = 12\n\n     val hoursStr:String = hours.toString()\n\n     return if (isDateOnly) dateStr //05 Jun 2021\n     else \"$dateStr at $hoursStr:$minutesStr $ampm\" //13 Dec at 7:30pm\n }\nfun difference(date1:Date,date2:Date):Long { return (date2.getTime()-date1.getTime()).toLong() }\n\n fun urduDateFormat(date: Date, typeOfInput: TypesOfInputs):String{\n     var isDateOnly = false\n     if(typeOfInput==TypesOfInputs.DATE_ONLY){isDateOnly=true}\n\n     val day = date.getUTCDate().toString()\n     val month = date.getUTCMonth()\n//     var urduMonth = \"\"\n//     when (month) {\n//         0 -> urduMonth = \"جنوری\"\n//         1 -> urduMonth = \"فروری\"\n//         2 -> urduMonth = \"مارچ\"\n//         3 -> urduMonth = \"اپریل\"\n//         4 -> urduMonth = \"مئی\"\n//         5 -> urduMonth = \"جون\"\n//         6 -> urduMonth = \"جولائ\"\n//         7 -> urduMonth = \"اگست\"\n//         8 -> urduMonth = \"ستمبر\"\n//         9 -> urduMonth = \"اکتوبر\"\n//         10 -> urduMonth = \"نومبر\"\n//         11 -> urduMonth = \"دسمبر\"\n//     }\n     val urduMonth = urduMonthNames[month]\n     val urduDay:String = if (day == \"1\") \"یکم\" else day\n\n     if (isDateOnly) return (\"$urduDay $urduMonth\")\n     else { //has time too\n         var hours = date.getUTCHours()\n         val minutes = date.getUTCMinutes()\n         val strMinutes:String = if(minutes < 10) \"0${minutes}\" else minutes.toString()\n\n         val ampm = when (hours) {\n             in 4..11 -> \"صبح\" //4am-11am\n             in 12..14 -> \"دوپہر\" //12pm-2pm\n             in 15..18 -> \"شام\" //3pm-6pm\n             else -> \"رات\" //7pm-3am\n         }\n\n         if (hours >=12) hours -= 12\n         if (hours == 0) hours = 12\n\n         return (\"$urduDay $urduMonth $ampm $hours:$strMinutes بجے\")\n     }\n }\n",null,"@file:Suppress(\"SpellCheckingInspection\")\n\nimport kotlinx.html.dom.append\nimport kotlinx.browser.document\nimport kotlinx.browser.window\nimport kotlinx.html.*\nimport kotlinx.html.dom.prepend\nimport kotlinx.html.form\nimport kotlinx.html.js.*\nimport kotlinx.html.tr\nimport org.w3c.dom.*\nimport org.w3c.dom.events.Event\nimport kotlin.js.Date\n\nprivate const val IS_DEFAULT_INPUT_MODE_DATE_ONLY = true\nprivate const val IS_DEFAULT_INPUT_MODE_MUTADA = true\n\nobject Ids {\n    const val LANGUAGE = \"language\"\n\n    const val HAIZ_INPUT_TABLE = \"haiz_input_table\"\n    const val HAIZ_DURATION_INPUT_TABLE = \"haiz_duration_input_table\"\n\n    object AddTimeToDate {\n//        const val IS_DATE_ONLY = \"is_date_only_add_time_to_date\"\n        const val DATE_TO_ADD_TO = \"date_to_add_to\"\n        const val TIME_TO_ADD = \"time_to_add\"\n        const val OUTOUT_FIELD = \"add_time_date_output\"\n    }\n    object CalcDuration {\n//        const val IS_DATE_ONLY = \"get_duration_is_date_only\"\n        const val STRT_DATE = \"start_date\"\n        const val END_DATE = \"end_date\"\n        const val OUTPUT_FIELD = \"calc_duration_output\"\n    }\n\n    object Row {\n        const val INPUT_START_TIME = \"input_start_time\"\n        const val INPUT_END_TIME = \"input_end_time\"\n        const val BUTTONS_CONTAINER = \"button_add_before_container\"\n        const val BUTTON_REMOVE = \"button_remove\"\n        const val BUTTON_ADD_BEFORE = \"button_add_before\"\n    }\n\n    object DurationRow {\n        const val INPUT_DURATION = \"input_duration\"\n        const val INPUT_TYPE_OF_DURATION = \"input_duration_type\"\n    }\n\n    object Ikhtilafat {\n        const val IKHTILAF1 = \"ikhtilaf1\"\n        const val IKHTILAF2 = \"ikhtilaf2\"\n        const val IKHTILAF3 = \"ikhtilaf3\"\n        const val IKHTILAF4 = \"ikhtilaf4\"\n    }\n\n    const val CONTENT_CONTAINER = \"content_container\"\n    const val CONTENT_URDU = \"content_urdu\"\n    const val CONTENT_ENGLISH = \"content_english\"\n    const val CONTENT_DATES = \"content_dates\"\n    const val CONTENT_DATES_DIFFERENCE = \"content_dates_difference\"\n    const val DATES_DIFFERENCE_TABLE = \"dates_difference_table\"\n    const val INPUT_CONTAINERS_CONTAINER = \"input_containers_container\"\n    const val INPUT_CONTAINER = \"input_container\"\n    const val COMPARISON_CONTAINER = \"comparison_container\"\n    const val MUSTABEEN_CHECKBOX = \"mustabeen_checkbox\"\n    const val PREG_START_TIME_INPUT = \"preg_start_time_input\"\n    const val PREG_END_TIME_INPUT = \"preg_end_time_input\"\n    const val AADAT_HAIZ_INPUT = \"aadat_haiz_input\"\n    const val AADAT_TUHR_INPUT = \"aadat_tuhr_input\"\n    const val MAWJOODA_TUHR_INPUT = \"mawjooda_tuhr_input\"\n    const val MAWJOODA_FASID_CHECKBOX = \"mawjooda_fasid_checkbox\"\n    const val AADAT_NIFAS_INPUT = \"aadat_nifas_input\"\n    const val INPUT_TYPE_SELECT = \"input_type_select\"\n    const val MASLA_TYPE_SELECT = \"masla_type_select\"\n    const val INPUT_QUESTION = \"input_question\"\n    const val INPUTS_CONTAINER_CLONE_BUTTON = \"inputs_container_clone_button\"\n    const val INPUTS_CONTAINER_REMOVE_BUTTON = \"inputs_container_remove_button\"\n}\n\nobject CssC {\n    const val ROW = \"row\"\n    const val NIFAS = \"is-nifas\"\n    const val MUTADA = \"mutada\"\n    const val DATETIME_AADAT = \"datetime_aadat\"\n    const val IKHTILAF = \"ikhtilaf\"\n\n    const val INVIS = \"invisible\"\n    const val LANG_INVIS = \"lang-invisible\"\n    const val DUR_INVIS = \"duration-invis\"\n    const val ENGLISH = \"english\"\n    const val URDU = \"urdu\"\n    const val DEV = \"dev\"\n    const val RTL = \"rtl\"\n\n    const val LEFT = \"left\"\n    const val RIGHT = \"right\"\n    const val CALC_BTN = \"calc-btn\"\n    const val PLUS = \"plus\"\n    const val MINUS = \"minus\"\n    const val SWITCH = \"switch\"\n    const val SLIDER = \"slider\"\n    const val ROUND = \"round\"\n    const val LABEL_INPUT = \"label-input\"\n}\n\nobject Vls {\n    object Langs {\n        const val ENGLISH = \"english\"\n        const val URDU = \"urdu\"\n    }\n    object Maslas {\n        const val MUTADA = \"mutada\"\n        const val NIFAS = \"nifas\"\n        const val MUBTADIA = \"mubtadia\"\n    }\n    object Types {\n        const val DATE_ONLY = \"dateOnly\"\n        const val DATE_TIME = \"dateTime\"\n        const val DURATION = \"duration\"\n    }\n    object Opts {\n        const val DAM = \"dam\"\n        const val TUHR = \"tuhr\"\n        const val HAML = \"haml\"\n        const val WILADAT = \"wiladat\"\n    }\n}\n\nprivate val inputsContainersContainer get() = document.getElementById(Ids.INPUT_CONTAINERS_CONTAINER) as HTMLElement\n@Suppress(\"UNCHECKED_CAST\")\nprivate val inputsContainers get() = inputsContainersContainer.children.asList() as List<HTMLElement>\nprivate val comparisonContainer get() = document.getElementById(Ids.COMPARISON_CONTAINER) as HTMLElement?\n\nprivate val contentDatesDifferenceElement get() = document.getElementById(Ids.CONTENT_DATES_DIFFERENCE) as HTMLParagraphElement?\nprivate val datesDifferenceTableElement get() = document.getElementById(Ids.DATES_DIFFERENCE_TABLE) as HTMLElement?\nprivate val root_hazapp = document.getElementsByClassName(\"root\").asList()\nprivate val languageSelector get() = document.getElementById(Ids.LANGUAGE) as HTMLSelectElement\n\nprivate val HTMLElement.haizInputTable get() = getChildById(Ids.HAIZ_INPUT_TABLE) as HTMLTableElement\nprivate val HTMLElement.haizDurationInputTable get() = getChildById(Ids.HAIZ_DURATION_INPUT_TABLE) as HTMLTableElement\n\nprivate val HTMLElement.isDateTime get() = (getChildById(Ids.INPUT_TYPE_SELECT) as HTMLSelectElement).value == Vls.Types.DATE_TIME\nprivate val HTMLElement.isDateOnly get() = (getChildById(Ids.INPUT_TYPE_SELECT) as HTMLSelectElement).value == Vls.Types.DATE_ONLY\nprivate val HTMLElement.isDuration get() = (getChildById(Ids.INPUT_TYPE_SELECT) as HTMLSelectElement).value == Vls.Types.DURATION\n\nprivate val HTMLElement.isMutada get() = (getChildById(Ids.MASLA_TYPE_SELECT) as HTMLSelectElement).value == Vls.Maslas.MUTADA\nprivate val HTMLElement.isNifas get() = (getChildById(Ids.MASLA_TYPE_SELECT) as HTMLSelectElement).value == Vls.Maslas.NIFAS\nprivate val HTMLElement.isMubtadia get() = (getChildById(Ids.MASLA_TYPE_SELECT) as HTMLSelectElement).value == Vls.Maslas.MUBTADIA\n\nprivate val HTMLElement.mustabeen get() = (getChildById(Ids.MUSTABEEN_CHECKBOX) as HTMLInputElement).checked\nprivate val HTMLElement.pregStartTime get() = getChildById(Ids.PREG_START_TIME_INPUT) as HTMLInputElement\nprivate val HTMLElement.pregEndTime get() = getChildById(Ids.PREG_END_TIME_INPUT) as HTMLInputElement\nprivate val HTMLElement.aadatHaz get() = getChildById(Ids.AADAT_HAIZ_INPUT) as HTMLInputElement\nprivate val HTMLElement.aadatTuhr get() = getChildById(Ids.AADAT_TUHR_INPUT) as HTMLInputElement\nprivate val HTMLElement.mawjoodaTuhr get() = getChildById(Ids.MAWJOODA_TUHR_INPUT) as HTMLInputElement\nprivate val HTMLElement.isMawjoodaFasid get() = (getChildById(Ids.MAWJOODA_FASID_CHECKBOX) as HTMLInputElement).checked\nprivate val HTMLElement.aadatNifas get() = getChildById(Ids.AADAT_NIFAS_INPUT) as HTMLInputElement\n\nprivate val HTMLElement.contentContainer get() = getChildById(Ids.CONTENT_CONTAINER)!!\nprivate val HTMLElement.contentEnglish get() = getChildById(Ids.CONTENT_ENGLISH) as HTMLParagraphElement\nprivate val HTMLElement.contentUrdu get() = getChildById(Ids.CONTENT_URDU) as HTMLParagraphElement\nprivate val HTMLElement.contentDatesElement get() = getChildById(Ids.CONTENT_DATES) as HTMLParagraphElement\n\nprivate val HTMLElement.questionText get() = (getChildById(Ids.INPUT_QUESTION) as HTMLTextAreaElement)\n\nprivate val HTMLElement.inputsContainerCloneButton get() = getChildById(Ids.INPUTS_CONTAINER_CLONE_BUTTON) as HTMLButtonElement\nprivate val HTMLElement.inputsContainerRemoveButton get() = getChildById(Ids.INPUTS_CONTAINER_REMOVE_BUTTON) as HTMLButtonElement\n\nprivate val HTMLElement.ikhtilaf1 get() = (getChildById(Ids.Ikhtilafat.IKHTILAF1) as HTMLInputElement).checked\nprivate val HTMLElement.ikhtilaf2 get() = (getChildById(Ids.Ikhtilafat.IKHTILAF2) as HTMLInputElement).checked\nprivate val HTMLElement.ikhtilaf3 get() = (getChildById(Ids.Ikhtilafat.IKHTILAF3) as HTMLInputElement).checked\nprivate val HTMLElement.ikhtilaf4 get() = (getChildById(Ids.Ikhtilafat.IKHTILAF4) as HTMLInputElement).checked\n\nprivate var HTMLElement.haizDatesList: List<Entry>?\n    get() = (contentDatesElement.asDynamic().haizDatesList as List<Entry>?)?.takeIf { it != undefined }\n    set(value) { contentDatesElement.asDynamic().haizDatesList = value }\n\nprivate val englishElements get() = document.getElementsByClassName(CssC.ENGLISH).asList()\nprivate val urduElements get() = document.getElementsByClassName(CssC.URDU).asList()\nprivate val languageElements get() = listOf(englishElements, urduElements).flatten()\nprivate val devElements get() = document.getElementsByClassName(CssC.DEV).asList()\n\nprivate val HTMLElement.hazInputTableBody: HTMLTableSectionElement get() {\n        val inputDatesTable = getChildById(Ids.HAIZ_INPUT_TABLE) as HTMLTableElement\n        return inputDatesTable.tBodies[0] as HTMLTableSectionElement\n    }\nprivate val HTMLElement.hazDurationInputTableBody: HTMLTableSectionElement get() {\n        val inputDatesTable = getChildById(Ids.HAIZ_DURATION_INPUT_TABLE) as HTMLTableElement\n        return inputDatesTable.tBodies[0] as HTMLTableSectionElement\n    }\n\nprivate val HTMLElement.haizInputDatesRows: List<HTMLTableRowElement> get() {\n        @Suppress(\"UNCHECKED_CAST\")\n        return hazInputTableBody.rows.asList() as List<HTMLTableRowElement>\n    }\nprivate val HTMLElement.haizDurationInputDatesRows: List<HTMLTableRowElement> get() {\n        @Suppress(\"UNCHECKED_CAST\")\n        return hazDurationInputTableBody.rows.asList() as List<HTMLTableRowElement>\n    }\n\nprivate val HTMLTableRowElement.startTimeInput get() = getChildById(Ids.Row.INPUT_START_TIME) as HTMLInputElement\nprivate val HTMLTableRowElement.endTimeInput get() = getChildById(Ids.Row.INPUT_END_TIME) as HTMLInputElement\nprivate val HTMLTableRowElement.durationInput get() = getChildById(Ids.DurationRow.INPUT_DURATION) as HTMLInputElement\nprivate val HTMLTableRowElement.durationTypeInput get() = getChildById(Ids.DurationRow.INPUT_TYPE_OF_DURATION) as HTMLSelectElement\nprivate val HTMLTableRowElement.damOrTuhr get() = durationTypeInput.value\nprivate val HTMLTableRowElement.removeButton get() = getChildById(Ids.Row.BUTTON_REMOVE) as HTMLButtonElement\n\nprivate val HTMLElement.haizTimeInputs get() = haizInputDatesRows.flatMap { row ->\n    listOf(row.startTimeInput, row.endTimeInput)\n}\nprivate val HTMLElement.haizDurationInputs get() = haizDurationInputDatesRows.flatMap { row ->\n    listOf(row.durationInput, row.durationTypeInput)\n}\n\nprivate val HTMLElement.timeInputsGroups get() = listOf(listOf(pregStartTime, pregEndTime), haizTimeInputs)\nprivate val HTMLElement.durationInputsGroups get() = listOf(haizDurationInputs)\n\n// START PROGRAM\nfun main() {\n    window.onload = {\n        if (root_hazapp.isNotEmpty() && askPassword()) {\n            document.body!!.addInputLayout()\n            setupRows(inputsContainers.first())\n            document.addEventListener(Events.VISIBILITY_CHANGE, {\n                if (!document.isHidden) {\n                    setMaxToCurrentTimeForTimeInputs(inputsContainers.first())\n                }\n            })\n        } else {\n            mainOtherCalcs()\n        }\n        languageSelector.onchange = { languageChange() }\n        handleLanguage()\n        devMode()\n    }\n}\n\nfun askPassword():Boolean {\n    val pass1 = \"786\"\n    val password = window.prompt(\"${StringsOfLanguages.ENGLISH.warningOnlyAuthorizedPersonnel}\\n\\n\" +\n            \"${StringsOfLanguages.URDU.warningOnlyAuthorizedPersonnel}\\n\\n\" +\n            \"${StringsOfLanguages.URDU.passwordRequired}\\n\\n\", \"\")\n    return pass1 == password || askPassword()\n}\n\nfun devMode() {\n    for (element in devElements) element.visibility = window.location.href.contains(\"dev\")\n}\n\nfun handleLanguage() {\n    if (window.location.href.contains(\"lang=en\")) languageSelector.value = Vls.Langs.ENGLISH\n    languageChange()\n}\n\nfun languageChange() {\n    val lang = languageSelector.value\n    for (element in languageElements) element.classList.toggle(CssC.LANG_INVIS, !element.classList.contains(lang))\n    document.body!!.classList.toggle(CssC.RTL, lang == Vls.Langs.URDU)\n    document.querySelectorAll(\"select\")\n        .asList()\n        .map { it as HTMLSelectElement }\n        .forEach { select ->\n            select.children\n                .asList()\n                .map { it as HTMLOptionElement }\n                .firstOrNull { option ->\n                    option.value == select.value && option.classList.contains(lang)\n                }?.selected = true\n        }\n}\n\nfun Node.addInputLayout() {\n    append {\n        div {\n            id = Ids.INPUT_CONTAINERS_CONTAINER\n            inputFormDiv()\n        }\n        div {\n            style = Styles.NEW_ROW\n        }\n    }\n}\n\n// CLONING\nprivate fun removeInputsContainer(inputsContainer: HTMLElement) {\n    inputsContainer.remove()\n    comparisonContainer?.remove()\n    inputsContainers.singleOrNull()?.inputsContainerRemoveButton?.remove()\n}\n\nprivate fun cloneInputsContainer(inputsContainerToCopyFrom: HTMLElement) {\n    comparisonContainer?.remove()\n    if (inputsContainers.size == 1) {\n        addRemoveInputsContainerButton(inputsContainerToCopyFrom)\n    }\n    val clonedInputsContainer = inputsContainerToCopyFrom.after {\n        inputFormDiv(inputsContainerToCopyFrom)\n    }.single()\n    languageChange()\n    disableTree(clonedInputsContainer)\n    setupFirstRow(clonedInputsContainer, inputsContainerToCopyFrom.isDuration)\n}\n\nprivate fun addRemoveInputsContainerButton(inputContainer: HTMLElement) {\n    inputContainer.inputsContainerCloneButton.before {\n        button(type = ButtonType.button, classes = \"${CssC.MINUS} ${CssC.DEV}\") {\n            +\"\\u274C\"\n            id = Ids.INPUTS_CONTAINER_REMOVE_BUTTON\n            style = \"float: right\"\n            onClickFunction = { event ->\n                removeInputsContainer(findInputContainer(event))\n            }\n        }\n    }\n}\n\nprivate fun addCompareButtonIfNeeded() {\n    if (comparisonContainer != null ||\n        inputsContainers.size < 2 ||\n        inputsContainers.any { it.haizDatesList == null }\n    ) return\n\n    inputsContainersContainer.after {\n        div {\n            id = Ids.COMPARISON_CONTAINER\n            button(type = ButtonType.button) {\n                +\"Calculate difference\"\n                style = \"margin: 0.2rem auto; display: block;\"\n                onClickFunction = { compareResults() }\n            }\n            content {\n                id = Ids.CONTENT_DATES_DIFFERENCE\n            }\n            table {\n                id = Ids.DATES_DIFFERENCE_TABLE\n            }\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.inputFormDiv(inputContainerToCopyFrom: HTMLElement? = null) {\n    div {\n        id = Ids.INPUT_CONTAINER\n        if (inputContainerToCopyFrom != null) {\n            removeInputsContainerButton()\n        }\n        classes = setOf(Ids.INPUT_CONTAINER)\n        addInputsContainerButton()\n        inputForm(inputContainerToCopyFrom)\n        content()\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.addInputsContainerButton() {\n    inputsContainerAddRemoveButton {\n        +\"Clone\"\n        classes = setOf(CssC.PLUS, CssC.DEV)\n        id = Ids.INPUTS_CONTAINER_CLONE_BUTTON\n        onClickFunction = { event ->\n            cloneInputsContainer(findInputContainer(event))\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.removeInputsContainerButton() {\n    inputsContainerAddRemoveButton {\n        +\"\\u274C\"\n        classes = setOf(CssC.MINUS)\n        id = Ids.INPUTS_CONTAINER_REMOVE_BUTTON\n        onClickFunction = { event ->\n            removeInputsContainer(findInputContainer(event))\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.inputsContainerAddRemoveButton(block : BUTTON.() -> Unit = {}) {\n    button(type = ButtonType.button) {\n        style = \"float: right\"\n        block()\n    }\n}\n\n// ANSWER\nprivate fun TagConsumer<HTMLElement>.content() {\n    div(classes = CssC.INVIS) {\n        id = Ids.CONTENT_CONTAINER\n        div(classes = CssC.URDU) {\n            id = \"content_wrapper\"\n            div(classes = CssC.LEFT) {\n                small(classes = CssC.RTL)\n                button(classes = CssC.RTL) {\n                    onClickFunction = { event -> copyText(event) }\n                    +\"Copy ⎙\"\n                }\n            }\n            content {\n                id = Ids.CONTENT_URDU\n                classes = setOfNotNull(CssC.URDU)\n            }\n        }\n        div(classes = CssC.ENGLISH) {\n            id = \"content_wrapper\"\n            div(classes = CssC.RIGHT) {\n                small { }\n                button {\n                    onClickFunction = { event -> copyText(event) }\n                    +\"Copy ⎙\"\n                }\n            }\n            div {\n                content {\n                    id = Ids.CONTENT_ENGLISH\n                    classes = setOfNotNull(CssC.ENGLISH)\n                }\n            }\n        }\n        hr()\n        content {\n            id = Ids.CONTENT_DATES\n        }\n        hr()\n    }\n}\n\nprivate fun getNow(): String {\n    var dateStr = \"\"\n    if (languageSelector.value == Vls.Langs.URDU){\n        dateStr = urduDateFormat(Date(Date.now()),TypesOfInputs.DATE_ONLY)\n    }else if(languageSelector.value == Vls.Langs.ENGLISH){\n        dateStr = englishDateFormat(Date(Date.now()),TypesOfInputs.DATE_ONLY)\n    }\n    dateStr += \" ${Date(Date.now()).getFullYear()}\"\n    return dateStr\n}\n\nprivate fun copyText(event: Event) {\n    val div = (event.currentTarget as HTMLElement).getAncestor<HTMLDivElement> { it.id == \"content_wrapper\" }\n\n    val questionTxt = findInputContainer(event).questionText.value\n    val divider = \"${UnicodeChars.BLUE_SWIRL}➖➖➖➖➖${UnicodeChars.BLUE_SWIRL}\"\n    val answerTxt = div?.querySelector(\"p\")?.textContent\n    var dateStr = getNow()\n\n    val copyTxt = \"*${dateStr}*\\n\\n${questionTxt}\\n\\n${divider}\\n\\n${answerTxt}\"\n    copyTxt.let { window.navigator.clipboard.writeText(it) }\n\n    val small = div?.querySelector(\"small\")\n    small?.innerHTML?.let { small.innerHTML = \" Copied \" }\n\n    window.setTimeout({ if (small != null) small.innerHTML = \"\" }, 1000)\n}\n\nprivate fun TagConsumer<HTMLElement>.content(block : P.() -> Unit = {}) {\n    p {\n        id = \"content\"\n        style = \"white-space: pre-wrap;\"\n        block()\n    }\n}\n\n// MAIN PROGRAM DRAWN HERE\nprivate fun TagConsumer<HTMLElement>.inputForm(inputContainerToCopyFrom: HTMLElement?) {\n    form(action = \"javascript:void(0);\") {\n        autoComplete = false\n        ikhtilafiMasle()\n        br()\n        div(classes = CssC.LABEL_INPUT) {\n            maslaConfigurationSelectDropdown(inputContainerToCopyFrom)\n            typeConfigurationSelectDropdown(inputContainerToCopyFrom)\n            nifasInputs(inputContainerToCopyFrom)\n            mutadaInputs(inputContainerToCopyFrom)\n        }\n        hr()\n        questionInput(inputContainerToCopyFrom)\n        hr()\n        haizDatesInputTable(inputContainerToCopyFrom)\n        haizDurationInputTable(inputContainerToCopyFrom)\n        calculateButton()\n        hr()\n        onSubmitFunction = { event -> parseEntries(findInputContainer(event)) }\n    }\n}\n\nprivate fun FlowContent.makeLabel(inputId: String, englishText: String, urduText: String, extraClasses: String = \"\", block: LABEL.() -> Unit = {}) {\n    label {\n        htmlFor = inputId\n        classes = setOf(CssC.ENGLISH, extraClasses)\n        block()\n        +englishText\n    }\n    label {\n        htmlFor = inputId\n        classes = setOf(CssC.URDU, extraClasses)\n        block()\n        +urduText\n    }\n}\n\nprivate fun FlowContent.makeIkhtilafiMasla(inputId: String, englishText: String, urduText: String, block: DIV.() -> Unit = {}) {\n    div(classes = CssC.ROW) {\n        div {\n            makeLabel(inputId, englishText, urduText)\n            label(classes = CssC.SWITCH) {\n                checkBoxInput {\n                    id = inputId\n                }\n                span(classes = \"${CssC.SLIDER} ${CssC.ROUND}\")\n            }\n        }\n        block()\n    }\n}\n\nprivate fun FlowContent.ikhtilafiMasle() {\n    div {\n        details {\n            summary(classes = CssC.IKHTILAF)\n            b {\n                span(classes = CssC.ENGLISH) { +StringsOfLanguages.ENGLISH.ikhtilafimasail }\n                span(classes = CssC.URDU) { StringsOfLanguages.URDU.ikhtilafimasail }\n            }\n            makeIkhtilafiMasla(Ids.Ikhtilafat.IKHTILAF1,\n                StringsOfLanguages.ENGLISH.considerTuhrInGhiarMustabeenIsqaatIkhtilaf,\n                StringsOfLanguages.URDU.considerTuhrInGhiarMustabeenIsqaatIkhtilaf)\n            makeIkhtilafiMasla(Ids.Ikhtilafat.IKHTILAF2,\n                StringsOfLanguages.ENGLISH.aadatIncreasingAtEndOfDaurIkhtilaf,\n                StringsOfLanguages.URDU.aadatIncreasingAtEndOfDaurIkhtilaf) {\n                classes = setOfNotNull(CssC.ROW, CssC.DEV)\n            }\n            makeIkhtilafiMasla(Ids.Ikhtilafat.IKHTILAF3,\n                StringsOfLanguages.ENGLISH.ayyameqabliyyaikhtilaf,\n                StringsOfLanguages.URDU.ayyameqabliyyaikhtilaf) {\n                classes = setOfNotNull(CssC.ROW, CssC.DEV)\n            }\n            makeIkhtilafiMasla(Ids.Ikhtilafat.IKHTILAF4,\n                StringsOfLanguages.ENGLISH.mubtadiaikhitilaf,\n                StringsOfLanguages.URDU.mubtadiaikhitilaf) {\n                classes = setOfNotNull(CssC.ROW, CssC.DEV)\n            }\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.makeDropdownOptions(\n    isSelected: Boolean,\n    optionVal: String,\n    englishText: String,\n    urduText: String,\n    extraClasses: String = \"\",\n    block: OPTION.() -> Unit = {}\n) {\n    option {\n        classes = setOfNotNull(\n            CssC.ENGLISH,\n            extraClasses,\n            if (languageSelector.value != Vls.Langs.ENGLISH) CssC.LANG_INVIS else null\n        )\n        selected = isSelected && languageSelector.value == Vls.Langs.ENGLISH\n        value = optionVal\n        block()\n        +englishText\n    }\n    option {\n        classes = setOfNotNull(\n            CssC.URDU,\n            extraClasses,\n            if (languageSelector.value != Vls.Langs.URDU) CssC.LANG_INVIS else null\n        )\n        selected = isSelected && languageSelector.value == Vls.Langs.URDU\n        value = optionVal\n        block()\n        +urduText\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.maslaConfigurationSelectDropdown(inputContainerToCopyFrom: HTMLElement?) {\n    val isMutada = inputContainerToCopyFrom?.isMutada ?: IS_DEFAULT_INPUT_MODE_MUTADA\n    val isNifas = inputContainerToCopyFrom?.isNifas ?: !IS_DEFAULT_INPUT_MODE_MUTADA\n    val isMubtadia = inputContainerToCopyFrom?.isMubtadia ?: !IS_DEFAULT_INPUT_MODE_MUTADA\n    div(classes = CssC.ROW) {\n        makeLabel(Ids.MASLA_TYPE_SELECT, StringsOfLanguages.ENGLISH.typeOfMasla, StringsOfLanguages.URDU.typeOfMasla)\n        select {\n            id = Ids.MASLA_TYPE_SELECT\n            onChangeFunction = { event -> disableTree(findInputContainer(event)) }\n            makeDropdownOptions(isMutada, Vls.Maslas.MUTADA, StringsOfLanguages.ENGLISH.mutada, StringsOfLanguages.URDU.mutada)\n            makeDropdownOptions(isNifas, Vls.Maslas.NIFAS, StringsOfLanguages.ENGLISH.nifas, StringsOfLanguages.URDU.nifas)\n            makeDropdownOptions(isMubtadia, Vls.Maslas.MUBTADIA, StringsOfLanguages.ENGLISH.mubtadia, StringsOfLanguages.URDU.mubtadia, \"dev\")\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.typeConfigurationSelectDropdown(inputContainerToCopyFrom: HTMLElement?) {\n    val isDateTime = inputContainerToCopyFrom?.isDateTime ?: !IS_DEFAULT_INPUT_MODE_DATE_ONLY\n    val isDateOnly = inputContainerToCopyFrom?.isDateOnly ?: IS_DEFAULT_INPUT_MODE_DATE_ONLY\n    val isDuration = inputContainerToCopyFrom?.isDuration ?: !IS_DEFAULT_INPUT_MODE_DATE_ONLY\n    div(classes = CssC.ROW) {\n        makeLabel(Ids.INPUT_TYPE_SELECT, StringsOfLanguages.ENGLISH.typeOfInput, StringsOfLanguages.URDU.typeOfInput)\n        select {\n            id = Ids.INPUT_TYPE_SELECT\n            onChangeFunction = { event ->\n                onClickTypeConfigurationSelectDropdown(findInputContainer(event))\n            }\n            makeDropdownOptions(isDateOnly, Vls.Types.DATE_ONLY, StringsOfLanguages.ENGLISH.dateOnly, StringsOfLanguages.URDU.dateOnly)\n            makeDropdownOptions(isDateTime, Vls.Types.DATE_TIME, StringsOfLanguages.ENGLISH.dateAndTime, StringsOfLanguages.URDU.dateAndTime)\n            makeDropdownOptions(isDuration, Vls.Types.DURATION, StringsOfLanguages.ENGLISH.duration, StringsOfLanguages.URDU.duration)\n        }\n    }\n}\n\nprivate fun FlowContent.pregnancyTimeInput(inputContainerToCopyFrom: HTMLElement?, block: INPUT.() -> Unit = {}) {\n    if (inputContainerToCopyFrom != null) {\n        timeInput(inputContainerToCopyFrom) {\n            disabled = !inputContainerToCopyFrom.isNifas\n            block()\n        }\n    } else {\n        timeInput(IS_DEFAULT_INPUT_MODE_DATE_ONLY) {\n            disabled = true\n//            max = currentTimeString(IS_DEFAULT_INPUT_MODE_DATE_ONLY)\n            block()\n        }\n    }\n}\n\nprivate fun FlowContent.makeNumberInput(inputId: String, inputVal: String, inputRange: IntRange, block: INPUT.() -> Unit = {}) {\n    input {\n        id = inputId\n        name = inputId\n        value = inputVal\n        onInputFunction = { event -> (event.currentTarget as HTMLInputElement).validateAadat(inputRange) }\n        block()\n    }\n}\n\nprivate fun FlowContent.nifasInputs(inputContainerToCopyFrom: HTMLElement?) {\n    div(classes = \"${CssC.ROW} ${CssC.NIFAS} ${CssC.INVIS} ${CssC.DATETIME_AADAT}\") {\n        makeLabel(Ids.PREG_START_TIME_INPUT,\n            StringsOfLanguages.ENGLISH.pregnancyStartTime,\n            StringsOfLanguages.URDU.pregnancyStartTime)\n        pregnancyTimeInput(inputContainerToCopyFrom) {\n            id = Ids.PREG_START_TIME_INPUT\n            name = Ids.PREG_START_TIME_INPUT\n            onChangeFunction = { event ->\n                findInputContainer(event).pregEndTime.min = (event.currentTarget as HTMLInputElement).value\n            }\n        }\n    }\n    div(classes = \"${CssC.ROW} ${CssC.DATETIME_AADAT} ${CssC.NIFAS} ${CssC.INVIS}\") {\n        makeLabel(\n            Ids.PREG_END_TIME_INPUT, StringsOfLanguages.ENGLISH.birthMiscarrriageTime, StringsOfLanguages.URDU.birthMiscarrriageTime,\n            CssC.DATETIME_AADAT\n        )\n        pregnancyTimeInput(inputContainerToCopyFrom) {\n            classes = setOf(CssC.DATETIME_AADAT, CssC.NIFAS)\n            id = Ids.PREG_END_TIME_INPUT\n            name = Ids.PREG_END_TIME_INPUT\n            onChangeFunction = { event ->\n                findInputContainer(event).pregStartTime.max = (event.currentTarget as HTMLInputElement).value\n            }\n        }\n    }\n    div(classes = \"${CssC.ROW} ${CssC.NIFAS} ${CssC.INVIS}\"){\n        div {\n            makeLabel(Ids.MUSTABEEN_CHECKBOX, StringsOfLanguages.ENGLISH.mustabeenUlKhilqa, StringsOfLanguages.URDU.mustabeenUlKhilqa)\n            checkBoxInput {\n                id = Ids.MUSTABEEN_CHECKBOX\n                name = Ids.MUSTABEEN_CHECKBOX\n                checked = inputContainerToCopyFrom?.mustabeen != false\n            }\n        }\n    }\n    div(classes = \"${CssC.ROW} ${CssC.NIFAS} ${CssC.INVIS}\") {\n        makeLabel(Ids.AADAT_NIFAS_INPUT, StringsOfLanguages.ENGLISH.nifasAadat, StringsOfLanguages.URDU.nifasAadat)\n        makeNumberInput(Ids.AADAT_NIFAS_INPUT, inputContainerToCopyFrom?.aadatNifas?.value.orEmpty(), (1..40)) {\n            step = \"any\"\n            required = false\n            disabled = inputContainerToCopyFrom?.isNifas != true\n        }\n    }\n}\n\nprivate fun FlowContent.mutadaInputs(inputContainerToCopyFrom: HTMLElement?) {\n    div(classes = \"${CssC.ROW}\") {\n        makeLabel(Ids.AADAT_HAIZ_INPUT, StringsOfLanguages.ENGLISH.haizAadat, StringsOfLanguages.URDU.haizAadat)\n        makeNumberInput(Ids.AADAT_HAIZ_INPUT, inputContainerToCopyFrom?.aadatHaz?.value.orEmpty(), (3..10))\n    }\n    div(classes = \"${CssC.ROW} ${CssC.MUTADA}\") {\n        makeLabel(Ids.AADAT_TUHR_INPUT, StringsOfLanguages.ENGLISH.tuhrAadat, StringsOfLanguages.URDU.tuhrAadat)\n        makeNumberInput(Ids.AADAT_TUHR_INPUT, inputContainerToCopyFrom?.aadatTuhr?.value.orEmpty(), (15..6 * 30))\n    }\n    div(classes = \"${CssC.ROW} ${CssC.DATETIME_AADAT}\") {\n        makeLabel(Ids.MAWJOODA_TUHR_INPUT, StringsOfLanguages.ENGLISH.mawjoodahTuhr, StringsOfLanguages.URDU.mawjoodahTuhr)\n        makeNumberInput(Ids.MAWJOODA_TUHR_INPUT, inputContainerToCopyFrom?.mawjoodaTuhr?.value.orEmpty(), (15..10000))\n        div {\n            makeLabel(Ids.MAWJOODA_FASID_CHECKBOX, StringsOfLanguages.ENGLISH.faasid, StringsOfLanguages.URDU.faasid)\n            input(type = InputType.checkBox) {\n                id = Ids.MAWJOODA_FASID_CHECKBOX\n                name = Ids.MAWJOODA_FASID_CHECKBOX\n                checked = inputContainerToCopyFrom?.isMawjoodaFasid?.or(false) == true\n            }\n        }\n    }\n}\n\nfun HTMLInputElement.validateAadat(validityRange: ClosedRange<Int>) {\n    val errormessage = if(languageSelector.value == Vls.Langs.ENGLISH) { StringsOfLanguages.ENGLISH.incorrectAadat } else {StringsOfLanguages.URDU.incorrectAadat}\n    value = value.replace(\"[^0-9:]\".toRegex(), \"\")\n    val doubleValidityRange = validityRange.start.toDouble()..validityRange.endInclusive.toDouble()\n    setCustomValidity(try {\n        val days = (parseDays(value)?.div(MILLISECONDS_IN_A_DAY))?.toDouble()\n        require(days == null || days in doubleValidityRange) { errormessage }\n        \"\"\n    } catch (e: IllegalArgumentException) {\n        e.message ?: errormessage\n    })\n}\n\nprivate fun FlowContent.calculateButton() {\n    button(classes = \"${CssC.ENGLISH} ${CssC.CALC_BTN}\") {\n        +StringsOfLanguages.ENGLISH.calculate\n        onClickFunction = { event -> setMaxToCurrentTimeForTimeInputs(findInputContainer(event)) }\n    }\n    button(classes = \"${CssC.URDU} ${CssC.CALC_BTN}\") {\n        +StringsOfLanguages.URDU.calculate\n        onClickFunction = { event -> setMaxToCurrentTimeForTimeInputs(findInputContainer(event)) }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.makeSpans(englishText: String, urduText: String, block: SPAN.() -> Unit = {}) {\n    span(classes = CssC.ENGLISH) {\n        block()\n        +englishText\n    }\n    span(classes = CssC.URDU) {\n        block()\n        +urduText\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.questionInput(inputContainerToCopyFrom: HTMLElement?) {\n    details {\n        summary {\n            makeSpans(\"Question\", \"سوال\")\n        }\n        div(classes = CssC.ROW) {\n            textArea {\n                id = Ids.INPUT_QUESTION\n                onInputFunction = { event ->\n                    val txtarea = event.currentTarget as HTMLTextAreaElement\n                    txtarea.dir = \"auto\"\n                    txtarea.style.height = \"auto\"\n                    txtarea.style.height = \"${txtarea.scrollHeight + 6}px\"\n                }\n            }\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.haizDatesInputTable(inputContainerToCopyFrom: HTMLElement?) {\n    val isDuration = inputContainerToCopyFrom?.isDuration ?: false\n    table {\n        id = Ids.HAIZ_INPUT_TABLE\n        classes = setOf( if (isDuration) CssC.INVIS else \"\" )\n        thead {\n            tr {\n                th { makeSpans(StringsOfLanguages.ENGLISH.startTime, StringsOfLanguages.URDU.startTime) }\n                th { makeSpans(StringsOfLanguages.ENGLISH.endTime, StringsOfLanguages.URDU.endTime) }\n                th { addBeforeButton() }\n            }\n        }\n        tbody {\n            if (inputContainerToCopyFrom != null) {\n                for (inputDateRow in inputContainerToCopyFrom.haizInputDatesRows) {\n                    inputRow(inputContainerToCopyFrom, inputDateRow.startTimeInput, inputDateRow.endTimeInput, isDuration)\n                }\n            } else {\n                inputRow(\n                    isDateOnlyLayout = IS_DEFAULT_INPUT_MODE_DATE_ONLY,\n                    minTimeInput = \"\",\n                    maxTimeInput = \"\", //currentTimeString(IS_DEFAULT_INPUT_MODE_DATE_ONLY)\n                    disable = isDuration\n                )\n            }\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.haizDurationInputTable(inputContainerToCopyFrom: HTMLElement?) {\n    val isDuration = inputContainerToCopyFrom?.isDuration ?: false\n    table {\n        id = Ids.HAIZ_DURATION_INPUT_TABLE\n        classes = setOf( if (!isDuration) CssC.INVIS else \"\" )\n        thead {\n            tr {\n                th { makeSpans(StringsOfLanguages.ENGLISH.duration, StringsOfLanguages.URDU.duration) }\n                th { makeSpans(StringsOfLanguages.ENGLISH.damOrTuhr, StringsOfLanguages.URDU.damOrTuhr) }\n                th { addBeforeButton(true) }\n            }\n        }\n        tbody {\n            if (inputContainerToCopyFrom != null) {\n                for (inputDateRow in inputContainerToCopyFrom.haizDurationInputDatesRows) {\n                    copyDurationInputRow(\n                        aadat = inputDateRow.durationInput.value,\n                        selectedOption = inputDateRow.damOrTuhr,\n                        disable = !isDuration,\n                        preg = inputContainerToCopyFrom.isNifas)\n                }\n            } else { durationInputRow(false, !isDuration) }\n        }\n    }\n}\n\nprivate fun onChangeDurationSelect(event: Event) {\n    val row = findRow(event)\n    val pregOct = (event.target as HTMLSelectElement).value in setOf(Vls.Opts.HAML, Vls.Opts.WILADAT)\n    row.durationInput.value = if (pregOct) \"0\" else row.durationInput.value\n    row.durationInput.disabled = (event.target as HTMLSelectElement).value in setOf(Vls.Opts.HAML, Vls.Opts.WILADAT)\n}\n\nprivate fun TagConsumer<HTMLElement>.makeDurationSelect(disable: Boolean, selectedOption: String, preg: Boolean) {\n    select {\n        id = Ids.DurationRow.INPUT_TYPE_OF_DURATION\n        name = Ids.DurationRow.INPUT_TYPE_OF_DURATION\n        disabled = disable\n        onChangeFunction = { event -> onChangeDurationSelect(event) }\n        makeDropdownOptions(selectedOption == Vls.Opts.DAM, Vls.Opts.DAM, StringsOfLanguages.ENGLISH.dam, StringsOfLanguages.URDU.dam)\n        makeDropdownOptions(selectedOption == Vls.Opts.TUHR, Vls.Opts.TUHR, StringsOfLanguages.ENGLISH.tuhr, StringsOfLanguages.URDU.tuhr)\n        makeDropdownOptions(\n            selectedOption == Vls.Opts.HAML,\n            Vls.Opts.HAML,\n            StringsOfLanguages.ENGLISH.pregduration,\n            StringsOfLanguages.URDU.pregduration,\n            CssC.NIFAS + \" \" + if (!preg) CssC.INVIS else null\n        )\n        makeDropdownOptions(\n            selectedOption == Vls.Opts.WILADAT,\n            Vls.Opts.WILADAT,\n            StringsOfLanguages.ENGLISH.birthduration,\n            StringsOfLanguages.URDU.birthduration,\n            CssC.NIFAS + \" \" + if (!preg) CssC.INVIS else null\n        )\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.copyDurationInputRow(aadat: String, selectedOption: String, disable: Boolean, preg: Boolean) {\n    tr {\n        td {\n            makeNumberInput(Ids.DurationRow.INPUT_DURATION, aadat, (0..10000)) {\n                required = true\n                disabled = disable\n            }\n        }\n        td {\n            makeDurationSelect(disable, selectedOption, preg)\n        }\n        addRemoveButtonsTableData(true)\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.inputRow(\n    isDateOnlyLayout: Boolean,\n    minTimeInput: String,\n    maxTimeInput: String,\n    disable: Boolean = false) {\n    tr {\n        td {\n            timeInput(isDateOnlyLayout, minTimeInput, maxTimeInput, indexWithinRow = 0) {\n                id = Ids.Row.INPUT_START_TIME\n                disabled = disable\n            }\n        }\n        td {\n            timeInput(isDateOnlyLayout, minTimeInput, maxTimeInput, indexWithinRow = 1) {\n                id = Ids.Row.INPUT_END_TIME\n                disabled = disable\n            }\n        }\n        addRemoveButtonsTableData()\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.durationInputRow(lastWasDam: Boolean, disable: Boolean, preg: Boolean = false) {\n    tr {\n        td {\n            makeNumberInput(Ids.DurationRow.INPUT_DURATION, \"\", (0..10000)) {\n                disabled = disable\n                required = true\n            }\n        }\n        td { makeDurationSelect(disable, if (lastWasDam) Vls.Opts.TUHR else Vls.Opts.DAM, preg) }\n        addRemoveButtonsTableData(true)\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.inputRow(\n    inputContainerToCopyFrom: HTMLElement,\n    startTimeInputToCopyFrom: HTMLInputElement,\n    endTimeInputToCopyFrom: HTMLInputElement,\n    disable: Boolean = false\n) {\n    tr {\n        td {\n            timeInput(inputContainerToCopyFrom, startTimeInputToCopyFrom, indexWithinRow = 0) {\n                id = Ids.Row.INPUT_START_TIME\n                disabled = disable\n            }\n        }\n        td {\n            timeInput(inputContainerToCopyFrom, endTimeInputToCopyFrom, indexWithinRow = 1) {\n                id = Ids.Row.INPUT_END_TIME\n                disabled = disable\n            }\n        }\n        addRemoveButtonsTableData()\n    }\n}\n\nprivate fun TR.addRemoveButtonsTableData(duration: Boolean = false) {\n    td {\n        id = Ids.Row.BUTTONS_CONTAINER\n        addButton(duration)\n        removeButton(duration)\n    }\n}\n\nprivate fun FlowContent.timeInput(\n    isDateOnlyLayout: Boolean,\n    minTimeInput: String,\n    maxTimeInput: String,\n    indexWithinRow: Int,\n    block: INPUT.() -> Unit = {}\n) {\n    timeInput(isDateOnlyLayout, minTimeInput, maxTimeInput) {\n        onChangeFunction = { event -> setMinMaxForTimeInputsOnInput(event, indexWithinRow) }\n        block()\n    }\n}\n\nprivate fun FlowContent.timeInput(\n    inputContainerToCopyFrom: HTMLElement,\n    timeInputToCopyFrom: HTMLInputElement,\n    indexWithinRow: Int,\n    block: INPUT.() -> Unit = {}\n) {\n    timeInput(inputContainerToCopyFrom, timeInputToCopyFrom) {\n        onChangeFunction = { event -> setMinMaxForTimeInputsOnInput(event, indexWithinRow) }\n        block()\n    }\n}\n\nprivate fun FlowContent.timeInput(\n    isDateOnlyLayout: Boolean,\n    minTimeInput: String,\n    maxTimeInput: String,\n    block: INPUT.() -> Unit = {}\n) {\n    timeInput(isDateOnlyLayout) {\n        min = minTimeInput\n        max = maxTimeInput\n        block()\n    }\n}\n\nprivate fun FlowContent.timeInput(\n    inputContainerToCopyFrom: HTMLElement,\n    timeInputToCopyFrom: HTMLInputElement? = null,\n    block: INPUT.() -> Unit = {}\n) {\n    timeInput(inputContainerToCopyFrom.isDateOnly) {\n        block()\n        @Suppress(\"NAME_SHADOWING\")\n        val timeInputToCopyFrom = timeInputToCopyFrom ?: inputContainerToCopyFrom.getChildById(id) as HTMLInputElement\n        value = timeInputToCopyFrom.value\n        min = timeInputToCopyFrom.min\n        max = timeInputToCopyFrom.max\n    }\n}\n\nprivate fun FlowContent.timeInput(\n    isDateOnlyLayout: Boolean,\n    block: INPUT.() -> Unit = {}\n) {\n    customDateTimeInput(isDateOnlyLayout) {\n        required = true\n        onClickFunction = { event ->\n            setMaxToCurrentTimeForTimeInputs(findInputContainer(event))\n        }\n        block()\n    }\n}\n\nprivate fun findInputContainer(event: Event) =\n    (event.currentTarget as Element).getAncestor<HTMLElement> { it.id.startsWith(Ids.INPUT_CONTAINER)}!!\nprivate fun findRow(event: Event) = (event.currentTarget as Element).getAncestor<HTMLTableRowElement>()!!\n\nprivate fun FlowContent.removeButton(duration: Boolean = false) {\n    button(type = ButtonType.button, classes = CssC.MINUS) {\n        +\"\\u274C\"\n        title = \"Remove\"\n        id = Ids.Row.BUTTON_REMOVE\n        onClickFunction = { event ->\n            val row = findRow(event)\n            val inputContainer = findInputContainer(event)\n            if (!duration) {\n                updateMinMaxForTimeInputsBeforeRemovingRow(inputContainer, row.rowIndexWithinTableBody)\n            }\n            row.remove()\n            setupFirstRow(inputContainer, duration)\n        }\n    }\n}\n\nprivate fun FlowContent.addButton(duration: Boolean = false) {\n    button(type = ButtonType.button, classes = CssC.PLUS) {\n        +\"\\u2795\"\n        title = \"Add\"\n        onClickFunction = { event ->\n            val row = findRow(event)\n            val inputContainer = findInputContainer(event)\n            if (duration) {\n                val rowIsDam = row.damOrTuhr in setOf(Vls.Opts.DAM, Vls.Opts.HAML)\n                row.after {\n                    durationInputRow(rowIsDam, false, inputContainer.isNifas)\n                }\n                setupFirstRow(inputContainer, true)\n            } else {\n                row.after {\n                    inputRow(\n                        inputContainer.isDateOnly,\n                        minTimeInput = row.endTimeInput.run { value.takeUnless(String::isEmpty) ?: min },\n                        maxTimeInput = row.endTimeInput.max\n                    )\n                }\n                setupRows(inputContainer)\n            }\n        }\n    }\n}\n\nprivate fun TagConsumer<HTMLElement>.addBeforeButton(duration: Boolean = false) {\n    button(type = ButtonType.button, classes = CssC.PLUS) {\n        +\"\\u2795 \\u25B2\"\n        title = \"Add at Start\"\n        id = Ids.Row.BUTTON_ADD_BEFORE\n        onClickFunction = { event ->\n            val inputContainer = findInputContainer(event)\n            if (duration) {\n                val firstIsDam = inputContainer.haizDurationInputDatesRows.first().damOrTuhr in setOf(Vls.Opts.DAM, Vls.Opts.WILADAT)\n                inputContainer.hazDurationInputTableBody.prepend { durationInputRow(firstIsDam, false, inputContainer.isNifas) }\n                setupFirstRow(inputContainer, true)\n            } else {\n                val row = inputContainer.hazInputTableBody.firstChild as HTMLTableRowElement\n\n                inputContainer.hazInputTableBody.prepend {\n                    inputRow(\n                        inputContainer.isDateOnly,\n                        minTimeInput = \"\",\n                        maxTimeInput = row.startTimeInput.run { value.takeUnless(String::isEmpty) ?: max }\n                    )\n                }\n                setupRows(inputContainer)\n            }\n        }\n    }\n}\n\nprivate fun setupRows(inputContainer: HTMLElement) {\n    setMaxToCurrentTimeForTimeInputs(inputContainer)\n    setupFirstRow(inputContainer, false)\n    setupFirstRow(inputContainer, true)\n}\n\nprivate fun setupFirstRow(inputContainer: HTMLElement, duration: Boolean = false) {\n    val inputDatesRows = if (duration) inputContainer.haizDurationInputDatesRows else inputContainer.haizInputDatesRows\n    inputDatesRows.first().removeButton.visibility = inputDatesRows.size != 1\n    inputDatesRows.getOrNull(1)?.removeButton?.visibility = true\n}\n\nprivate fun setMaxToCurrentTimeForTimeInputs(inputContainer: HTMLElement) {\n//    val currentTime = currentTimeString(inputContainer.isDateOnly)\n    for (timeInputsGroup in inputContainer.timeInputsGroups) {\n        for (timeInput in timeInputsGroup.asReversed()) {\n//            timeInput.max = currentTime\n            if (timeInput.value.isNotEmpty()) break\n        }\n    }\n}\n\nprivate fun setMinMaxForTimeInputsOnInput(event: Event, indexWithinRow: Int) {\n    setMinMaxForTimeInputsOnInput(\n        findInputContainer(event),\n        (findRow(event).rowIndexWithinTableBody * 2) + indexWithinRow\n    )\n}\n\nprivate fun setMinMaxForTimeInputsOnInput(inputContainer: HTMLElement, index: Int) {\n    val timeInputs = inputContainer.haizTimeInputs\n    val timeInput = timeInputs[index]\n    val min: String\n    val max: String\n    val previousTimeInputs: List<HTMLInputElement>\n    val nextTimeInputs: List<HTMLInputElement>\n    val value = timeInput.value\n    if (value.isEmpty()) {\n        min = timeInput.min\n        max = timeInput.max\n        previousTimeInputs = timeInputs.take(index + 1)\n        nextTimeInputs = timeInputs.drop(index)\n    } else {\n        min = value\n        max = value\n        previousTimeInputs = timeInputs.take(index)\n        nextTimeInputs = timeInputs.drop(index + 1)\n    }\n    for (previousTimeInput in previousTimeInputs.asReversed()) {\n        previousTimeInput.max = max\n        if (previousTimeInput.value.isNotEmpty()) break\n    }\n    for (nextTimeInput in nextTimeInputs) {\n        nextTimeInput.min = min\n        if (nextTimeInput.value.isNotEmpty()) break\n    }\n}\n\nprivate fun updateMinMaxForTimeInputsBeforeRemovingRow(inputContainer: HTMLElement, rowIndex: Int) {\n    val timeInputs = inputContainer.haizTimeInputs\n    val startDateIndex = rowIndex * 2\n    val endDateIndex = startDateIndex + 1\n    val min = timeInputs[startDateIndex].min\n    val max = timeInputs[endDateIndex].max\n    val previousTimeInputs = timeInputs.take(startDateIndex)\n    val nextTimeInputs = timeInputs.drop(endDateIndex + 1)\n    for (previousTimeInput in previousTimeInputs.asReversed()) {\n        previousTimeInput.max = max\n        if (previousTimeInput.value.isNotEmpty()) break\n    }\n    for (nextTimeInput in nextTimeInputs) {\n        nextTimeInput.min = min\n        if (nextTimeInput.value.isNotEmpty()) break\n    }\n}\n\nprivate fun onClickTypeConfigurationSelectDropdown(inputContainer: HTMLElement) {\n    val isDateOnly = inputContainer.isDateOnly\n    val isDateTime = inputContainer.isDateTime\n    for (timeInput in inputContainer.timeInputsGroups.flatten()) {\n        val newValue = convertInputValue(timeInput.value, isDateOnly)\n        val newMin = convertInputValue(timeInput.min, isDateOnly)\n        val newMax = convertInputValue(timeInput.max, isDateOnly)\n\n        val dateInputType = if (isDateOnly) InputType.date else InputType.dateTimeLocal\n        timeInput.type = dateInputType.realValue\n\n        timeInput.value = newValue\n        timeInput.min = newMin\n        timeInput.max = newMax\n    }\n    if (isDateTime) {\n        setMaxToCurrentTimeForTimeInputs(inputContainer)\n    }\n    switchToDurationTable(inputContainer)\n}\n\nprivate fun switchToDurationTable(inputContainer: HTMLElement, isDuration: Boolean = inputContainer.isDuration) {\n    disableDateTable(inputContainer, isDuration)\n    inputContainer.haizInputTable.visibility = !isDuration\n    inputContainer.haizDurationInputTable.visibility = isDuration\n}\n\nprivate fun disableDateTable(inputContainer: HTMLElement, disable: Boolean = inputContainer.isDuration) {\n    for (timeInput in inputContainer.timeInputsGroups) {\n        for (input in timeInput) {\n            input.disabled = disable\n        }\n    }\n    for (durationInput in inputContainer.durationInputsGroups) {\n        for (input in durationInput) {\n            input.asDynamic().disabled = !disable\n        }\n    }\n//    disableByClass(CssC.DATETIME_AADAT, CssC.DUR_INVIS, inputContainer, disable)\n    disableTree(inputContainer)\n}\n\nprivate fun disableByClass(classSelector: String, classInvis: String, inputContainer: HTMLElement, disable: Boolean) {\n    inputContainer.getElementsByClassName(classSelector)\n        .asList()\n        .forEach { row ->\n            row.classList.toggle(classInvis, disable)\n            row.querySelectorAll(\"input\")\n                .asList()\n                .map { input ->\n                    input as HTMLInputElement\n                    input.disabled = disable\n                    input.value = \"\"\n                }\n        }\n}\nprivate fun disableByMasla(inputContainer: HTMLElement) {\n    disableByClass(CssC.NIFAS, CssC.INVIS, inputContainer, !inputContainer.isNifas)\n    disableByClass(CssC.MUTADA, CssC.INVIS, inputContainer, !inputContainer.isMutada)\n}\n\nprivate fun disableTree(inputContainer: HTMLElement) {\n    val isNifas = inputContainer.isNifas\n    val isMutada = inputContainer.isMutada\n    val isDateTime = !inputContainer.isDuration\n\n    disableByClass(CssC.DATETIME_AADAT, CssC.INVIS, inputContainer, !isDateTime)\n    disableByMasla(inputContainer)\n    disableByClass(\"${CssC.DATETIME_AADAT} ${CssC.NIFAS}\", CssC.INVIS, inputContainer, !isNifas || !isDateTime)\n    disableByClass(\"${CssC.DATETIME_AADAT} ${CssC.MUTADA}\", CssC.INVIS, inputContainer, !isMutada || !isDateTime)\n\n    val mawjoodaFasidCheck = inputContainer.getChildById(Ids.MAWJOODA_FASID_CHECKBOX) as HTMLInputElement\n    if (inputContainer.isMubtadia) {\n        mawjoodaFasidCheck.checked = true\n        mawjoodaFasidCheck.disabled = true\n    }\n}\n\nprivate fun parseEntries(inputContainer: HTMLElement) {\n    var entries = listOf<Entry>()\n\n    with(inputContainer) {\n        var mawjodahtuhreditable = parseDays(mawjoodaTuhr.value)\n        var pregnancyIs = isNifas\n        var pregnancyStrt = Date(pregStartTime.valueAsNumber)\n        var pregnancyEnd = Date(pregEndTime.valueAsNumber)\n        val mubtadiaIs = isMubtadia\n\n        if(isDuration){\n            //take arbitrary date\n            val arbitraryDate = Date(0,0,0)\n            val durations = haizDurationInputDatesRows.map { row ->\n                Duration(\n                    type = when (row.damOrTuhr) {\n                        Vls.Opts.DAM -> {DurationType.DAM}\n                        Vls.Opts.TUHR -> {DurationType.TUHR}\n                        Vls.Opts.HAML -> {DurationType.HAML}\n                        Vls.Opts.WILADAT -> {DurationType.WILADAT_ISQAT}\n                        else -> {DurationType.NIFAS}\n                    },\n                    timeInMilliseconds = parseDays(row.durationInput.value)!!,\n                    startTime = arbitraryDate\n                ) }\n            for (index in durations.indices){\n                if(index > 0){\n                    durations[index].startTime = durations[index-1].endDate\n                }\n            }\n            if(durations[0].type == DurationType.TUHR){ mawjodahtuhreditable = durations[0].timeInMilliseconds }\n            for(dur in durations){\n                when (dur.type) {\n                    DurationType.DAM -> {\n                        entries += Entry(dur.startTime, dur.endDate)\n                    }\n                    DurationType.HAML -> {\n                        pregnancyIs=true\n                        pregnancyStrt=dur.startTime\n                    }\n                    DurationType.WILADAT_ISQAT -> {\n                        pregnancyEnd=dur.startTime\n                    }\n                }\n            }\n        }else{\n            entries = haizInputDatesRows.map { row ->\n                Entry(\n                    startTime = Date(row.startTimeInput.valueAsNumber),\n                    endTime = Date(row.endTimeInput.valueAsNumber)\n                )\n            }\n\n        }\n\n        val typeOfMasla:TypesOfMasla = if(mubtadiaIs){\n            TypesOfMasla.MUBTADIA\n        } else if(pregnancyIs){\n            TypesOfMasla.NIFAS\n        } else{\n            TypesOfMasla.MUTADAH\n        }\n        val typesOfInputs:TypesOfInputs = if(isDateOnly){\n            TypesOfInputs.DATE_ONLY\n        } else if(isDuration){\n            TypesOfInputs.DURATION\n        }else{TypesOfInputs.DATE_AND_TIME}\n\n\n        @Suppress(\"UnsafeCastFromDynamic\")\n        val output = handleEntries(\n            AllTheInputs(\n                entries,\n                PreMaslaValues(\n                    parseDays(aadatHaz.value),\n                    parseDays(aadatTuhr.value),\n                    mawjodahtuhreditable,\n                    isMawjoodaFasid\n                ),\n                typeOfMasla,\n                Pregnancy(\n                    pregnancyStrt,\n                    pregnancyEnd,\n                    parseDays(aadatNifas.value),\n                    mustabeen\n                ),\n                typesOfInputs,\n                languageSelector.value,\n                Ikhtilaafaat(\n                    ikhtilaf1,\n                    ikhtilaf2,\n                    ikhtilaf3,\n                    ikhtilaf4))\n        )\n        contentContainer.visibility = true\n        contentEnglish.innerHTML = replaceBoldTagWithBoldAndStar(output.englishText)\n        contentUrdu.innerHTML = replaceBoldTagWithBoldAndStar(output.urduText)\n        haizDatesList = output.hazDatesList\n    }\n    addCompareButtonIfNeeded()\n}\n\nfun replaceBoldTagWithBoldAndStar(string: String): String {\n    return string.replace(\"<b>\", \"<b><span class='${CssC.INVIS}'>*</span>\")\n        .replace(\"</b>\", \"<span class='${CssC.INVIS}'>*</span></b>\")\n}\n\nprivate fun compareResults() {\n    val listOfLists = inputsContainers.map { it.haizDatesList!! }\n    val str = getDifferenceFromMultiple(listOfLists)\n    contentDatesDifferenceElement!!.innerHTML = str\n    val output = generatInfoForCompareTable(listOfLists.toMutableList())\n    drawCompareTable(output.headerList,output.listOfColorsOfDaysList, output.resultColors)\n}\n\nfun drawCompareTable(headerList:List<Date>, listOfColorsOfDaysList: List<List<Int>>, resultColors: List<Int>){\n    val datesDifferenceTableElement = datesDifferenceTableElement!!\n    datesDifferenceTableElement.style.width = \"${headerList.size*30 +15}px\"\n    datesDifferenceTableElement.replaceChildren {\n        div { id = \"tHead\"\n            style = Styles.TABLE_HEAD_STYLE\n            div { id = \"monthRow\"\n                style =Styles.TABLE_ROW_STYLE\n                for (header in headerList) {\n                    val date = header.getDate()\n                    div { id = \"cello\"\n                        style = Styles.TABLE_CELL_STYLE\n                        if (date == 1) {\n                            +MonthNames[header.getMonth()]\n                        }\n                    }\n                }\n            }\n            div{\n                style = Styles.NEW_ROW\n            }\n            div { id = \"datesRow\"\n                style = Styles.TABLE_ROW_STYLE\n                for (i in headerList.indices) {\n                    val header = headerList[i]\n                    val date = header.getDate().toString()\n\n                    div { id = \"cello\"\n                        style =Styles.TABLE_CELL_STYLE\n                        +date\n                    }\n                }\n            }\n        }\n        div{\n            style = Styles.NEW_ROW\n        }\n        div { id = \"tBody\"\n            style = Styles.TABLE_BODY_STYLE\n            div{\n                style = Styles.NEW_ROW\n            }\n            div { id = \"emptyRow\"\n                style=Styles.TABLE_ROW_STYLE\n                div{\n                    id = \"emptyHalfCellTopRow\"\n                    style = Styles.EMPTY_HALF_CELL_STYLE\n                }\n                for (day in resultColors){\n                    div{\n                        id = \"emptyCellTopRow\"\n                        style = Styles.EMPTY_CELL_STYLE\n\n                        if (day == 2) {\n                            style += Styles.NA_PAKI\n                        } else if(day == 1){\n                            style += Styles.AYYAAM_E_SHAKK\n                        }\n                    }\n                }\n            }\n\n            for (j in listOfColorsOfDaysList.indices) {\n                val colorsOfDaysList = listOfColorsOfDaysList[j]\n                div{\n                    style = Styles.NEW_ROW\n                }\n                div { id = \"sit${j+1}\"\n                    Styles.TABLE_ROW_STYLE\n                    div { id=\"half_cell\"\n                        style = Styles.HALF_CELL\n                    }\n\n                    for (k in colorsOfDaysList.indices) {\n                        val cellValue = colorsOfDaysList[k]\n                        div { id = \"cello\"\n                            style = Styles.TABLE_CELL_BORDER_STYLE +\n                                    (if (cellValue == 1) Styles.NA_PAKI else \"\")\n                            +\"${k+1}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n",null,null,null,null,null,"import kotlinx.browser.document\nimport org.w3c.dom.HTMLDivElement\nimport org.w3c.dom.HTMLInputElement\nimport org.w3c.dom.HTMLSelectElement\nimport kotlin.js.Date\n\nprivate val languageSelecter get() = document.getElementById(\"language\") as HTMLSelectElement\n\nprivate val addCalcsDateToAddTo get() = (document.getElementById(Ids.AddTimeToDate.DATE_TO_ADD_TO) as HTMLInputElement)\nprivate val addCalcsDurationToAdd get() = (document.getElementById(Ids.AddTimeToDate.TIME_TO_ADD) as HTMLInputElement)\nprivate val addCalcsOutputDate get() = document.getElementById(Ids.AddTimeToDate.OUTOUT_FIELD) as HTMLDivElement\nprivate val addCalcsIsDateOnlyAddTimeToDate get() = (document.getElementById(\"add_time_to_date_only_date\") as HTMLInputElement)\nprivate val addCalcsIsDateTimeAddTimeToDate get() = (document.getElementById(\"add_time_to_date_time_date\") as HTMLInputElement)\nprivate val addCalcsButtonAddTimeToDate get() = (document.getElementById(\"add_time_to_date_button\") as HTMLInputElement)\n\nprivate val addCalcsStrtDate get() = (document.getElementById(Ids.CalcDuration.STRT_DATE) as HTMLInputElement)\nprivate val addCalcsEndDate get() = (document.getElementById(Ids.CalcDuration.END_DATE) as HTMLInputElement)\nprivate val addCalcsOutputDuration get() = document.getElementById(Ids.CalcDuration.OUTPUT_FIELD) as HTMLDivElement\nprivate val addCalcsIsDateOnlyGetDuration get() = (document.getElementById(\"get_duration_only_date\") as HTMLInputElement)\nprivate val addCalcsIsDateTimeGetDuration get() = (document.getElementById(\"get_duration_time_date\") as HTMLInputElement)\nprivate val addCalcsButtonGetDuration get() = (document.getElementById(\"get_duration_button\") as HTMLInputElement)\n\nfun mainOtherCalcs(){\n    addListeners()\n}\n\nfun addCalcsGetDuration(){\n    val isDateOnly:Boolean = addCalcsIsDateOnlyGetDuration.checked\n    val startDate = Date(addCalcsStrtDate.valueAsNumber)\n    val endDate = Date(addCalcsEndDate.valueAsNumber)\n    var strUrdu = \"\"\n    var strEnglish = \"\"\n    var typesOfInputs:TypesOfInputs\n    if(isDateOnly){typesOfInputs=TypesOfInputs.DATE_ONLY}\n    else{typesOfInputs=TypesOfInputs.DATE_AND_TIME}\n\n    if(startDate != null && endDate != null && startDate.getTime() < endDate.getTime()){\n        val result = (endDate.getTime()-startDate.getTime()).toLong()\n        strUrdu = daysHoursMinutesDigitalUrdu(result,typesOfInputs)\n        strEnglish = daysHoursMinutesDigitalEnglish(result, typesOfInputs)\n    }\n    val resultStrings =  OutputStringsLanguages(strUrdu,strEnglish)\n    if(languageSelecter.value==\"urdu\"){\n        addCalcsOutputDuration.innerHTML = resultStrings.urduString\n    }else if(languageSelecter.value==\"english\"){\n        addCalcsOutputDuration.innerHTML = resultStrings.englishString\n    }\n\n}\n\n\nfun addListeners(){\n    addCalcsDateToAddTo.onchange = { addCalcsAddTimeToDate()}\n    addCalcsDurationToAdd.oninput = { event -> (event.currentTarget as HTMLInputElement).validateAadat(0..10000) }\n\n//        addCalcsAddTimeToDate()\n//    }\n    addCalcsDurationToAdd.onchange = { addCalcsAddTimeToDate()}\n    addCalcsStrtDate.onchange = {addCalcsGetDuration()}\n    addCalcsEndDate.onchange = {addCalcsGetDuration()}\n    addCalcsIsDateOnlyAddTimeToDate.onchange = {switchDateTime(\"add-time-to-date\")}\n    addCalcsIsDateTimeAddTimeToDate.onchange = {switchDateTime(\"add-time-to-date\")}\n    addCalcsIsDateOnlyGetDuration.onchange = {switchDateTime(\"calculate-duration\")}\n    addCalcsIsDateTimeGetDuration.onchange = {switchDateTime(\"calculate-duration\")}\n    addCalcsButtonAddTimeToDate.onclick = {addTimeToDateButtonClick()}\n    addCalcsButtonGetDuration.onclick = {getDurationButtonClick()}\n}\n\nfun addCalcsAddTimeToDate() {\n    val isDateOnly: Boolean = addCalcsIsDateOnlyAddTimeToDate.checked\n    var typesOfInputs: TypesOfInputs\n    if (isDateOnly) {\n        typesOfInputs = TypesOfInputs.DATE_ONLY\n    } else {\n        typesOfInputs = TypesOfInputs.DATE_AND_TIME\n        val date = Date(addCalcsDateToAddTo.valueAsNumber)\n        val duration = parseDays(addCalcsDurationToAdd.value)\n        var strResultUrdu = \"\"\n        var strResultEnglish = \"\"\n        if (duration != null && date != null) {\n            val result = addTimeToDate(date, duration)\n            strResultEnglish = englishDateFormat(result, typesOfInputs)\n            strResultUrdu = urduDateFormat(result, typesOfInputs)\n        }\n        val resultStrings = OutputStringsLanguages(strResultUrdu, strResultEnglish)\n        if (languageSelecter.value == \"urdu\") {\n            addCalcsOutputDate.innerHTML = resultStrings.urduString\n        } else if (languageSelecter.value == \"english\") {\n            addCalcsOutputDate.innerHTML = resultStrings.englishString\n        }\n    }\n}\nfun switchDateTime(calcType:String){\n    println(\"got here\")\n    if(calcType==\"calculate-duration\"){\n        if(addCalcsIsDateOnlyGetDuration.checked){\n            addCalcsStrtDate.type = \"date\"\n            addCalcsEndDate.type = \"date\"\n        }else{\n            addCalcsStrtDate.type = \"datetime-local\"\n            addCalcsEndDate.type = \"datetime-local\"\n        }\n    }else if(calcType==\"add-time-to-date\"){\n        if(addCalcsIsDateOnlyAddTimeToDate.checked){\n            addCalcsDateToAddTo.type = \"date\"\n        }else{\n            addCalcsDateToAddTo.type = \"datetime-local\"\n        }\n    }\n}\n\nfun getDurationButtonClick(){\n    addCalcsStrtDate.value = addCalcsEndDate.value\n    addCalcsGetDuration()\n}\n\nfun addTimeToDateButtonClick(){\n    if(addCalcsDurationToAdd != null && addCalcsDateToAddTo.valueAsNumber != null){\n        val result = addTimeToDate(Date(addCalcsDateToAddTo.valueAsNumber), parseDays(addCalcsDurationToAdd.value)!!)\n        addCalcsDateToAddTo.value=result.toDateInputString(addCalcsIsDateOnlyAddTimeToDate.checked)\n        addCalcsDurationToAdd.value=\"\"\n        addCalcsAddTimeToDate()\n    }\n}","\nval urduStrings = Strings(\n    \"${UnicodeChars.ROSE} <b>جواب:</b>\\n\\n\",\n    \"اس ترتیب سے خون آیا اور پاکی ملی:\\n\\n\",\n    \"مبتداہ کو اس ترتیب سے خون آیا اور پاکی ملی:\\n\\n\",\n    \"جب بھی خون یا دھبے آئیں تو وقت تاریخ مہینہ نوٹ فرمالیجئے۔\\n\\n\",\n    \"<b>واللہ تعالی اعلم بالصواب</b>\\n\\n\",\n    \"فی الحال آپ کے پاکی کے دن ہیں اپنی عبادات جاری رکھیں۔\\n\\n\",\n    \"فی الحال آپ کے حیض کے دن ہیں۔ خون جاری رہنے کی صورت میں عبادات سے رکیں۔\\n\\n\",\n    \"اگر خون اسی طرح جاری رہے یا فی الحال بند ہوجائے لیکن پندرہ دن کی کامل پاکی نہیں ملی کہ دوبارہ خون یا دھبہ آگیا تب پھر<b> date1 کو ضرور دوبارہ پوچھ لیں، اس لیے کہ مسئلہ کی صورت بدل جائے گی۔</b>\\n\\n\",\n    \"اگر date1 تک بھی خون جاری ہی رہے  تب بھی date1<b> کو غسل کر کے اپنی عبادات شروع کر دیں۔</b>\\n\\n\",\n    \"حمل سے پہلے اس ترتیب سے خون آیا اور پاکی ملی:\\n\\n\",\n    \"\\n<b>حمل</b>\\n\",\n    \"\\n<b>ولادت date1</b>\\n\",\n    \"\\n<b>ولادت کے بعد اس ترتیب سے خون آیااور پاکی ملی:</b>\\n\",\n    \"\\n<b>date1 کو اسقاط ہوا (غیر مستبین الخلقہ)</b>\\n\",\n    \"اگر خون date1 سے پہلے بند ہو جاۓ تو غسل کر کے نمازیں شروع کر لیں، لیکن احتیاطا date1 کو بھی غسل کر لیجیے۔\\n\\n\",\n    \"اگر سائلہ شادی شدہ ہیں تو یہ مسئلہ بھی مدنظر رکھیں: \\n \\n\\nاگر خون رک بھي جاۓ اور غسل کر کے نمازيں بھي شروع کر لي ہوں، تب بھي date1 سے پہلے صحبت کي اجازت نہيں۔\\n\\n\",\n    \"اگر خون اسی طرح جاری رہے یا فی الحال بند ہوجائے لیکن پندرہ دن کی کامل پاکی نہیں ملی کہ دوبارہ خون یا دھبہ آگیا تب پھر <b>date1 تک آپ کے یقینی پاکی کے دن ہونگے۔</b>\\n\\n\",\n    \"${UnicodeChars.GREEN_CIRCLE} <b>عادت: حیض: duration1، پاکی: duration2</b>\\n\\n\",\n    \"date1 تا date2 کل duration1 حیض کے ہیں۔\\n\\n\",\n    \"${UnicodeChars.RED_CIRCLE} date1 تا date2 کل duration1 حیض کے ہیں۔\\n\\n\",\n    \"${UnicodeChars.YELLOW_CIRCLE} date1 تا date2 کل duration1 یقینی پاکی (استحاضہ) کے ہیں۔\\n\\n\",\n    \"date1 تا date2 کل duration1 نفاس کے ہیں۔\\n\\n\",\n    \"${UnicodeChars.RED_CIRCLE} date1 تا date2 کل duration1 نفاس کے ہیں۔\\n\\n\",\n    \"\\n\\ndate1 سے date2 تک کل duration1 خون۔\\n\\n\",\n    \"${UnicodeChars.RAINBOW} <b>مسئلہ کا حل :</b>\\n\\n\",\n    \"${UnicodeChars.BLACK_SQUARE} اس دوران میں جو نمازیں حیض سمجھ کر چھوڑیں،  ان کی قضاء ضروری ہے۔\\n\\n\",\n    \"${UnicodeChars.BLACK_SQUARE} date1 کو اگر غسل کر لیا تھا، تو غسل کے بعد والی نمازیں درست ہیں۔ اگر غسل نہیں کیا تھا، تو جب تک غسل نہیں کیا، اس کی نمازیں قضاء کریں۔\\n\\n\",\n    \"\\n\\ndate1 سے date2 تک کل duration1 خون جاری رھا (چونکہ آپ کو دو خون کے درمیان میں 15 دن کی کامل پاکی نہیں ملی ہے اسلیئے یوں سمجھا جائے گا کہ آپ کو مسلسل خون جاری ہی رہا ہے۔)\\n\\n\",\n    \"duration1 پاکی۔\\n\\n\",\n    \"duration1 طہر فاسد۔\\n\\n\",\n    \"duration1 استحاضہ + duration2 پاکی = duration3 طہر فاسد۔\\n\\n\",\n    \"duration1 پاکی (چونکہ طہر 6 ماہ سے زیادہ ہے، اس لیے عادت میں 60 دن لیا جاۓ گا۔)\\n\\n\",\n    \"${UnicodeChars.FAT_DASH}${UnicodeChars.FAT_DASH}${UnicodeChars.FAT_DASH}${UnicodeChars.FAT_DASH}\\n\\n\",\n    \"اب سے  یہ معتادہ ہیں۔\\n\\n\",\n    \"ابھی حیض اور پاکی کی کویٔ عادت نہیں۔\\n\\n\",\n    \"حیض کی عادت duration1 ہے، البتہ ابھی پاکی کی کویٔ عادت نہیں۔\\n\\n\",\n    \"زبان منتخب کریں:\",\n    \"صرف تاریخ کے ساتھ مسئلہ حل کیجیے\",\n    \"تاریخ اور وقت کے ساتھ مسئلہ حل کیجیے\",\n    \"اردو\",\n    \"English\",\n    \"حیض کی عادت صحیح\",\n    \"طہر کی عادت صحیح\",\n    \"موجودہ طہر\",\n    \"اگر موجودہ طہر فاسد ہے تو اس خانے میں ٹک لگائیے\",\n    \"عادت  نفاس\",\n    \"ابتداء حمل کی تاریخ(یعنی آخری حیض کب ختم ہوا؟)\",\n    \"اسقاط/ وضع حمل(ولادت) کاوقت/تاریخ\",\n    \"ابتدائے خون\",\n    \"انتہائے خون\",\n    \"حساب لگائیں\",\n    \"عادت درست نہیں، عادت صحیح لکھیے!\",\n    \"نفاس\",\n    \"مستبين الخلقہ: \",\n    \"مسئلہ حل کرنے کے لیے حیض و طہر کی \\\"عادت صحیح\\\" لکھیے\",\n    \"موجودہ طہر(حل کیے جانے والے دم سے قبل متصل طہر) کا دورانیہ(duration) لکھیے۔\",\n    \"نفاس کی عادت لکھیے! اگر پہلا بچہ ہے تو 40 کا عدد لکھیے!\",\n    \"Please enter password here. To request the password, please contact safarjal22@gmail.com\",\n    \"انتباہ: یہ ایپ صرف مسائل حیض میں ماہر علمائے کرام و عالمات کے استعمال کے لیے ہے، جو مسئلہ کے حل کے لیے درکار معلومات کی باریکیوں کو سمجھتے ہوں!\",\n    \"کس طرح حل کرنا ہے؟\",\n    \"صرف دورانیہ کے ساتھ مسئلہ حل کیجیے\",\n    \"دم و طہر\",\n    \"دم\",\n    \"طہر\",\n    \"duration1 دم\\n\\n\",\n    \"duration1 طہر\\n\\n\",\n    \"duration1 طہر فاسد\\n\\n\",\n    \"duration1 استحاضہ + duration2 پاکی = duration3 طہر فاسد\\n\\n\",\n    \"duration1 حیض\\n\\n\",\n    \"duration1 نفاس\\n\\n\",\n    \"شروع کے duration1 استحاضہ\",\n    \"شروع کے duration1 حیض\",\n    \"، پھر duration1 استحاضہ\",\n    \"، پھر duration1 حیض\",\n    \"۔\\n\\n\",\n    \"ولادت\\n\\n\",\n    \"حمل\\n\\n\",\n    \"شروع کے duration1 نفاس\",\n    \"اگر خون date1 یعنی 3 دن سے پہلے رک جاتا ہے،اور پھر مکمل 15 دن کی پاکی مل گیٔ تو یہ سب استحاضہ بن جاۓ گا۔\\n\\n\",\n    \"اگر خون date1 سے پہلے رک جاۓ اور پھر مکمل 15 دن کی پاکی مل گی تو مسئلہ ضرور دوبارہ پوچھیے، اس لیے کے مسئلے کی صورت تبدیل ہو جاۓ گی۔\\n\\n\",\n    \"اگر خون date1 یعنی 40 دن کے بعد بھی جاری رہے، یا رک جاۓ لیکن 15 دن سے کم پاکی کے بعد دوبارہ شروع ہو جاۓ تو مسئلہ دوبارہ پوچھ لیجۓ۔\\n\\n\",\n    \"اگر خون date1 یعنی 10 دن کے بعد بھی جاری رہے، یا رک جاۓ لیکن 15 دن سے کم پاکی کے بعد دوبارہ شروع ہو جاۓ تو مسئلہ دوبارہ پوچھ لیجۓ۔\\n\\n\",\n    \"کیا غیر مستبین الخلقہ اسقاط کے مسئلے میں حمل والا طہر عادت بن سکتا ہے؟\",\n    \"اختلافی مسائل\",\n    \"کیا دور کے اخیر میں عادت سے زیادہ دن حیض بن سکتے ہیں؟\",\n    \"اگر date1 سے پہلے یا date1 کو  خون رک گیا اور 15 دن کی کامل پاکی مل گیٔ، تو یہ سب حیض شمار ہو گا اور اس دوران میں کی گیی عبادات کالعدم ہو جائں گی۔\\n\\n\" +\n            \"اور اگر date1 کے بعد بھی خون جاری رہا تو سب عبادات درست رہیں گی۔\\n\\n\",\n    \"اس وقت آپ کے لیے خون دیکھتے ہی نماز چھوڑنا درست نہیں ہے۔ آپ کو چاہیے کہ date1 تک عبادات جاری رکھیں۔\\n\\n\" +\n            \"آپ کے عادت کے دن date1 کو شروع ہو رہے ہیں۔ اگر خون تب تک جاری رہے تو date1 سے عابدات چھوڑ دیجیے۔\\n\\n\",\n    \"date1 تا date2 کل duration1 خون آیا۔ (یہ ایام قبلیہ کا مسئلہ ہے)۔\\n\\n\",\n    \"مبتداہ\",\n    \"معتادہ\",\n    \"مسئلے کی نوعیت\",\n    \"اگر خون جاری رہے، یا رک جاۓ لیکن 15 دن سے کم پاکی کے بعد دوبارہ شروع ہو جاۓ تو مسئلہ دوبارہ پوچھ لیجۓ۔\\n\\n\",\n    \"▪️چونکہ حیض کی مدت 10 دن ہے اور 10 دن پورے ہو چکے ہیں۔لہذا غسل کر کے عبادات شروع کر دیں\\n\\n\",\n    \"${UnicodeChars.GREEN_CIRCLE} <b>عادت: نفاس: duration3، حیض: duration1، طہر: duration2</b>\\n\\n\",\n    \"\\n<b>اسقاط ہوا (غیر مستبین الخلقہ)</b>\\n\",\n    \"کیا ایام قبلیہ میں عبادات جاری رہیں گی؟\",\n    \"کیا مبتداہ کے حق میں اضطراری عادت بلکل حقیقی عادت کی طرح ہے؟\",\n\n\n    )\nval englishStrings = Strings(\n    \"${UnicodeChars.ROSE}<b>Answer:</b>\\n\\n\",\n    \"The bleeding and purity (tuh’r) has been in the following sequence:\\n\\n\",\n    \"\\\"The bleeding and purity (tuh’r) has been in the following \" +\n            \"sequence for the menstruation beginner:\\\\n\\\\n\\\"\",\n    \"Kindly, keep note of the bleeding/spotting with month, date and time.\\n\\n\",\n    \"<b>And Allah Ta’ala knows best.</b>\\n\\n\",\n    \"You are in the days of your purity (tuh’r) right now, so keep up your ritual \" +\n            \"worship as usual.\\n\\n\",\n    \"You are in the days of your period right now, so, if bleeding continues you\" +\n            \" cannot do any of your ritual worship.\\n\\n\",\n    \"In case this bleeding continues without gap, or, it continues with gaps \" +\n            \"less than 15 days at a stretch, then <b>kindly do contact us again on date1 as \" +\n            \"the current ruling may change accordingly.</b>\\n\\n\",\n    \"If bleeding continues till date1, then you must <b>do ghusl on date1 and begin ibadaat.</b>\\n\\n\",\n    \"The bleeding and purity (tuh’r) has been in the following sequence before pregnancy:\\n\\n\",\n    \"\\nPregnancy\\n\",\n    \"\\n<b>Date of delivery: date1</b>\\n\",\n    \"\\n<b>The bleeding and purity (tuh’r) has been in the following sequence after delivery:</b>\\n\",\n    \"\\n<b>Miscarriage of an undeveloped fetus confirmed on date1</b>\\n\",\n    \"If the bleeding stops before date1 then take ghusl immediately and start saying\" +\n            \" your prayers but take ghusl on date1 too to be on the safe side.\\n\\n\\n\",\n    \"If the questioner is married, then she should keep this in mind as well: \\n \\n\\nEven if \" +\n            \"the bleeding stops and she performs ghusl and resumes salah, intimacy with husband \" +\n            \"remains prohibited till date1.\\n\\n\",\n    \"In case this bleeding continues without complete 15 days of purity, \" +\n            \"then <b>until date1, are certainly the days of purity (tuhr)</b>\\n\\n\",\n    \"${UnicodeChars.GREEN_CIRCLE} Habit: Haidh : duration1, Purity (Tuh’r): duration2 \\n\\n\",\n    \"date1 to date2, a total of duration1 of period.\\n\\n\",\n    \"${UnicodeChars.RED_CIRCLE} date1 to date2, a total of duration1 of period.\\n\\n\",\n    \"${UnicodeChars.YELLOW_CIRCLE} date1 to date2, a total of duration1 of definitive\" +\n            \" purity (istihadha).\\n\\n\",\n    \"date1 to date2, a total of duration1 of post-natal bleeding.\\n\\n\",\n    \"${UnicodeChars.RED_CIRCLE} date1 to date2, a total of duration1 of post-natal bleeding.\\n\\n\",\n    \"\\n\\ndate1 to date2, a total of duration1 of blood.\\n\\n\",\n    \"${UnicodeChars.RAINBOW} <b>Solution:</b>\\n\\n\",\n    \"${UnicodeChars.BLACK_SQUARE} If you left any salah thinking of it as haidh and it turned \" +\n            \"out to be istihadha, then make qada of them.\\n\\n\",\n    \"${UnicodeChars.BLACK_SQUARE} If you performed ghusl on date1, salah after \" +\n            \"it are all valid. If you didn't, then make qada of all the salah until you took ghusl.\\n\\n\",\n    \"\\n\\nduration1 of continued bleeding from date1 to date2 (since you haven’t had 15 \" +\n            \"or more blood-free days at a stretch in there)\\n\\n\",\n    \"duration1 of purity (tuh’r)\\n\\n\",\n    \"duration1 of invalid purity (tuh'r-e-faasid)\\n\\n\",\n    \"duration1 of istihadha + duration2 of purity (tuh’r) = duration3 of invalid\" +\n            \" purity (tuh'r-e-faasid).\\n\\n\",\n    \"duration1 of purity (tuhr). (Since purity (tuh’r) is of more than 6 months, \" +\n            \"therefore 60 days shall be taken as habit of purity (tuh’r)\\n\\n\",\n    \"${UnicodeChars.FAT_DASH}${UnicodeChars.FAT_DASH}${UnicodeChars.FAT_DASH}${UnicodeChars.FAT_DASH}\\n\\n\",\n    \"From now on, she is a mutadah\\n\\n\",\n    \"Till now, there is no habit of haidh or purity (tuh'r)\\n\\n\",\n    \"duration1 is the habit of haidh. There is no habit of purity (tuh'r) yet.\\n\\n\",\n    \"Select Language\",\n    \"Date only\",\n    \"Date and Time\",\n    \"اردو\",\n    \"English\",\n    \"Habit in Haidh\",\n    \"Habit in Purity (Tuh'r)\",\n    \"Current Purity (Tuh'r)\",\n    \"Invalid Purity (Tuh'r e Fasid)\",\n    \"Habit in Nifas\",\n    \"Pregnancy Start Time\",\n    \"Birth/Miscarriage Time\",\n    \"Start Time\",\n    \"End Time\",\n    \"Calculate\",\n    \"Habit is incorrect\",\n    \"Nifas\",\n    \"Mustabeen ul Khilqat\",\n    \"Please enter habit of haidh and purity (tuh'r) to solve this\",\n    \"Please enter a duration for Current Purity\",\n    \"Please enter Nifas Habit to solve this. If this is a first baby, please enter 40.\",\n    \"Please enter password here. To request the password, please contact safarjal22@gmail.com\",\n    \"Attention!! This app is only for use by Ulema and Aalimaat \" +\n            \"who are experts in solving the masail of haidh and nifas, and understand the \" +\n            \"minutae of the information required to solve this.\",\n    \"Type of input: \",\n    \"Duration\",\n    \"Dam/Purity\",\n    \"Dam\",\n    \"Purity\",\n    \"duration1 dam\\n\\n\",\n    \"duration1 purity (tuh'r)\\n\\n\",\n    \"duration1 invalid purity (tuh'r-e-faasid)\\n\\n\",\n    \"duration1 of istehadha + duration2 of purity (tuh'r) = duration3 of invalid purity (tuh'r-e-faasid)\\n\\n\",\n    \"duration1 haidh\\n\\n\",\n    \"duration1 nifas\\n\\n\",\n    \"The first duration1 are istehadha\",\n    \"The first duration1 are haidh\",\n    \", then the next duration1 are istehadha\",\n    \", then the next duration1 are haidh\",\n    \".\\n\\n\",\n    \"Birth\\n\\n\",\n    \"Pregnancy\\n\\n\",\n    \"The first duration1 are nifas\",\n    \"If bleeding stops before date1 (3 days), and is followed by a 15 day\" +\n            \" or more period of purity, then all of this will become istehadha.\\n\\n\",\n    \"If bleeding stops before date1 (3 days), then please ask again, \" +\n            \"as the masla will change.\\n\\n\",\n    \"If bleeding continues after date1 (40 days), or stops, but starts again with gaps \" +\n            \"of less than 15 days, then please ask the masla again.\\n\\n\",\n    \"If bleeding continues after date1 (10 days), or stops, but starts again \" +\n            \"with gaps of less than 15 days, then please ask the masla again.\\n\\n\",\n    \"Can the purity during pregnancy be used as a habit in case\" +\n            \" of miscarriage of an unformed foetus?\",\n    \"Differences of opinion\",\n    \"Can more days than habit become haidh at the end of daur?\",\n    \"If bleeding stopped at or before date1, and there was an\" +\n            \" interval of at 15 days of complete purity after it, all of this will become haidh, and \" +\n            \"ibadaat performed in this time will become null and void.\\n\\n\" +\n            \"If bleeding continues past date1, all ibadaat will remain valid.\\n\\n\",\n    \"It is not correct for you to stop ibadaat when bleeding starts. You should \" +\n            \"continue idadaat till date1, the start of your habit.\\n\\n\" +\n            \"Your habit days are beginning from date1. If bleeding continues till then, then you \" +\n            \"should stop praying from date1.\\n\\n\",\n    \"date1 to date2, a total of duration1 of bleeding. (This is a case of Ayyam-e-Qabliyya).\\n\\n\",\n    \"Mubtadia\",\n    \"Mu'tada\",\n    \"Type of Masla\",\n    \"If bleeding continues, or stops, but starts again \" +\n            \"with gaps of less than 15 days, then please ask the masla again.\\n\\n\",\n    \"As the maximum duration for haidh is 10 days, \" +\n            \"and it is now ten days, please do ghusl and resume your ibadat./n/n\",\n    \"${UnicodeChars.GREEN_CIRCLE} Habit: Nifas : duration3, Haidh : duration1, Purity (Tuh’r): duration2 \\n\\n\",\n    \"\\n<b>Miscarriage of an undeveloped fetus</b>\\n\",\n    \"Will ibadaat be continued during ayyam-e-qabliyya?\",\n    \"Does iztirari habit become real habit in mubtadia?\",\n\n\n    )\n\nobject StringsOfLanguages{\n    val URDU: Strings = urduStrings\n    val ENGLISH: Strings = englishStrings\n}\n\n",null,null,null,null,null,null,null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(701);\n"],"names":["root","factory","exports","module","define","amd","this","Date","firstStartTime","allTheInputs","listOf","getTime","isDam","Duration","toMutableList","i","fixedDurations","addIndicesToFixedDurations","OutputTexts","EndingOutputValues","addStartDateToFixedDurations","pregnancy","endDateOfFixedDuration","isTuhrInHamlAadatInGhairMustabeenIkhtilaf","markAllTuhrsInPregnancyAsHaml","startDateOfHaml","endDateOfHaml","newDuration","timeInHaml","addTimeToDate","newFixedDuration","firstDuration","secondDuration","secondFixedDuration","thirdDuration","thirdFixedDuration","markAllDamsInPregnancyAsHaml","removeTuhrLessThan15","birthDate","startTime","fortyPlusBD","makeAllDamInFortyAfterWiladatAsMuttasil","language","window","alert","BiggerThanFortyNifas","istihazaAfter","nifasInfo","dealWithDamInMuddateNifas","noOutput","removeDamLessThan3","dealWithBiggerThan10Dam","adatsOfHaizList","adatsOfTuhrList","addDurationsToDams","checkForAyyameQabliyya","addWiladat","addStartOfPregnancy","calculateEndingOutputValues","generateOutputStringPregnancy","endingOutputValues","handleMustabeenUlKhilqa","removeTuhrLessThan15InPregnancy","isMawjoodaFasid","inputtedMawjoodaTuhr","first","mawjoodahPakiEndDate","pregStartTime","pregEndTime","mawjoodahPakiStartDate","checkIfMawjoodahPakiIsTuhrInHaml","PreMaslaValues","mawjoodahIsNotAadat","handleGhairMustabeenUlKhilqa","handleNifas","ikhtilaafaat","preMaslaValues","aadatHaz","aadatTuhr","iztirariAadatHaiz","iztirariAadatTuhr","inputtedAadatHaz","AadatsOfHaizAndTuhr","haiz","istehazaAfter","istehazaBefore","mawjoodahTuhr","BiggerThanTenDm","biggerThanTen","dealWithIstihazaAfter","endOfDaurIkhtilaf","remainder","mubtadiaIkhtilaf","dealWithMubtadiaDam","aadats","fixedDuration","markAllMubtadiaDamsAndTuhrsAsMubtadia","getHaizDatesList","generateOutputString","typeOfInput","urduStr","generateHazDatesStr","hazDatesList","generateOutputStringMubtadia","handleMubtadia","generateOutputStringMutadah","handleMutadah","date","mawjoodaTuhr","inputtedAadatTuhr","aadatNifas","fiveSoortain","mp","gp","dm","hz","hall","returnAadatHaiz","daurHaizIkhtilaf","soorat","istihazaBefore","aadatTuhrChanges","FiveSoortainOutput","ayyameQabliyyaIkhtilaf","adat","ayyaameqabliyyah","last","AyyameQabliyya","diffInPakis","istihazaBeforeStartDate","quotient","aadatTuhrEndDate","aadatHaizEndDate","aadatTuhrStartDate","istihazaAfterStartDate","j","duration","listOfLists","counter","numberOfLists","dateTypeList","dateType","counterMax","str","outputList","durationTypes","durationType","type","englishDateFormat","endTime","generateGetDifferenceString","filHaalPaki","lastDurationType","lastDurationTime","qism","ayyameQabliyya","calculateFilHaal","finalAadats","aadaat","startOfAadat","lastDuration","endDateOfHaiz","typesOfMasla","endDateOfTuhr","endofHaiz","previousHaizAadat","tenDays","getSecondLastAadatOfHaiz","previousAadat","endOfAadat","ihtiyatiGhuslCalc","ihtiyatiGhuslTime","nifasAadat","izitrariAadatHaiz","iztirariTuhrAadat","futureDatesList","futureDatesOfInterest","englishStr","generateLanguagedOutputStringPregnancy","entry","strUrdu","strEnglish","mustabeen","index","outputStringBiggerThan10HallDurations","outputStringBiggerThan40HallDuration","outputStringBiggerThan10Hall","outputStringBiggerThan40Hall","urduDateFormat","birthTime","outputStringFinalLines","outputStringHeaderLineDuration","outputStringHeaderLine","OutputStringsLanguages","outputStringAadatLine","outputStringFilHaalLine","filHaal","outputStringAskAgainLine","futureDates","filHaalPakiStrUrdu","filHaalPakiStrEnglish","filHaalHaizStrUrdu","filHaalHaizStrEnglish","futureDate","aadatHaiz","daysHoursMinutesDigitalUrdu","daysHoursMinutesDigitalEnglish","outputStringUrdu","outputStringEnglish","difference","sd","et","time","isMustabeen","ed","block","onFinalize","createTree","ownerDocument","insertRelative","insert","querySelector","id","classList","toggle","visible","parentElement","asList","children","isDateOnly","dateTimeLocalInputWithFallbackGuidelines","classes","toDuration","getTimezoneOffset","letterToTrimFrom","toDateInputString","dateString","offsetLocalTimeToUtc","parseToLocalDate","value","timeInMilliseconds","input","millisecs","toLong","sections","getOrNull","toInt","milisecsleft","milliToDayHrMin","numberOfMilliseconds","days","hours","minutes","returnStatement","strDays","strHours","strMinutes","toString","dateStr","dropLast","toUTCString","ampm","hoursStr","minutesStr","date2","date1","getUTCDate","getUTCMonth","urduMonthNames","month","day","urduDay","urduMonth","getUTCHours","getUTCMinutes","document","getElementById","getChildById","checked","haizDatesList","undefined","getElementsByClassName","rows","prompt","askPassword","location","href","flatten","element","contains","lang","body","append","inputsContainer","remove","before","inputsContainerToCopyFrom","after","languageChange","disableTree","clonedInputsContainer","setupFirstRow","inputsContainerAddRemoveButton","findInputContainer","event","div","textContent","now","getFullYear","getNow","questionTxt","answerTxt","navigator","clipboard","writeText","copyTxt","small","innerHTML","setTimeout","inputContainerToCopyFrom","validityRange","parseDays","errormessage","message","setCustomValidity","isDateOnlyLayout","minTimeInput","maxTimeInput","timeInputToCopyFrom","setMaxToCurrentTimeForTimeInputs","inputContainer","inputDatesRows","asReversed","timeInputs","min","max","previousTimeInputs","take","nextTimeInputs","drop","previousTimeInput","nextTimeInput","findRow","indexWithinRow","convertInputValue","dateInputType","newValue","newMin","newMax","isDateTime","disabled","disable","disableDateTable","isDuration","classInvis","disableByClass","disableByMasla","isNifas","isMutada","mawjoodaFasidCheck","entries","valueAsNumber","addCompareButtonIfNeeded","string","getDifferenceFromMultiple","earliestStartTime","latestEndTime","list","ndays","firstLast","headerList","header","listOfColorsOfDaysList","InfoForCompareTable","resultColors","generatInfoForCompareTable","style","datesDifferenceTableElement","replaceChildren","apply","nodes","typesOfInputs","startDate","endDate","result","resultStrings","strResultUrdu","strResultEnglish","calcType","urduStrings","englishStrings","partial","child","node","addInputLayout","setupRows","addEventListener","mainOtherCalcs","handleLanguage","devMode","inputFormDiv","removeInputsContainer","compareResults","removeInputsContainerButton","addInputsContainerButton","inputForm","content","cloneInputsContainer","setOf","copyText","setOfNotNull","maslaConfigurationSelectDropdown","typeConfigurationSelectDropdown","nifasInputs","mutadaInputs","parseEntries","ikhtilafiMasle","questionInput","haizDatesInputTable","haizDurationInputTable","calculateButton","makeIkhtilafiMasla","onClickTypeConfigurationSelectDropdown","currentTarget","validateAadat","pregnancyTimeInput","makeNumberInput","scrollHeight","inputRow","addBeforeButton","copyDurationInputRow","target","row","pregOct","onChangeDurationSelect","makeDurationSelect","addRemoveButtonsTableData","timeInput","addButton","removeButton","setMinMaxForTimeInputsOnInput","rowIndex","startDateIndex","endDateIndex","updateMinMaxForTimeInputsBeforeRemovingRow","durationInputRow","prepend","firstChild","MonthNames","getMonth","getDate","addCalcsAddTimeToDate","addCalcsGetDuration","switchDateTime","addTimeToDateButtonClick","Strings","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}